
FreeRTOS_Porting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c58  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001d68  08001d68  00011d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d94  08001d94  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d94  08001d94  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d94  08001d94  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d94  08001d94  00011d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d98  08001d98  00011d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001d9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002950  2000000c  08001da8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000295c  08001da8  0002295c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000041c1  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000dba  00000000  00000000  000241f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000460  00000000  00000000  00024fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003e8  00000000  00000000  00025410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015015  00000000  00000000  000257f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004909  00000000  00000000  0003a80d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008676e  00000000  00000000  0003f116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c5884  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010fc  00000000  00000000  000c58d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08001d50 	.word	0x08001d50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08001d50 	.word	0x08001d50

08000150 <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b08a      	sub	sp, #40	; 0x28
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    PRIVILEGED_DATA static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
 8000158:	2300      	movs	r3, #0
 800015a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800015c:	f001 f856 	bl	800120c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
 8000160:	4b46      	ldr	r3, [pc, #280]	; (800027c <pvPortMalloc+0x12c>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	2b00      	cmp	r3, #0
 8000166:	d104      	bne.n	8000172 <pvPortMalloc+0x22>
        {
            prvHeapInit();
 8000168:	f000 f8dc 	bl	8000324 <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
 800016c:	4b43      	ldr	r3, [pc, #268]	; (800027c <pvPortMalloc+0x12c>)
 800016e:	2201      	movs	r2, #1
 8000170:	601a      	str	r2, [r3, #0]
        }

        if( xWantedSize > 0 )
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2b00      	cmp	r3, #0
 8000176:	d013      	beq.n	80001a0 <pvPortMalloc+0x50>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = heapSTRUCT_SIZE + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8000178:	2308      	movs	r3, #8
 800017a:	461a      	mov	r2, r3
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	f003 0307 	and.w	r3, r3, #7
 8000182:	1ad3      	subs	r3, r2, r3
 8000184:	3308      	adds	r3, #8
 8000186:	617b      	str	r3, [r7, #20]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8000188:	697b      	ldr	r3, [r7, #20]
 800018a:	43db      	mvns	r3, r3
 800018c:	687a      	ldr	r2, [r7, #4]
 800018e:	429a      	cmp	r2, r3
 8000190:	d804      	bhi.n	800019c <pvPortMalloc+0x4c>
            {
                xWantedSize += xAdditionalRequiredSize;
 8000192:	687a      	ldr	r2, [r7, #4]
 8000194:	697b      	ldr	r3, [r7, #20]
 8000196:	4413      	add	r3, r2
 8000198:	607b      	str	r3, [r7, #4]
 800019a:	e001      	b.n	80001a0 <pvPortMalloc+0x50>
            }
            else
            {
                xWantedSize = 0;
 800019c:	2300      	movs	r3, #0
 800019e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	db63      	blt.n	800026e <pvPortMalloc+0x11e>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d060      	beq.n	800026e <pvPortMalloc+0x11e>
 80001ac:	4b34      	ldr	r3, [pc, #208]	; (8000280 <pvPortMalloc+0x130>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	687a      	ldr	r2, [r7, #4]
 80001b2:	429a      	cmp	r2, r3
 80001b4:	d85b      	bhi.n	800026e <pvPortMalloc+0x11e>
            {
                /* Blocks are stored in byte order - traverse the list from the start
                 * (smallest) block until one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80001b6:	4b33      	ldr	r3, [pc, #204]	; (8000284 <pvPortMalloc+0x134>)
 80001b8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80001ba:	4b32      	ldr	r3, [pc, #200]	; (8000284 <pvPortMalloc+0x134>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80001c0:	e004      	b.n	80001cc <pvPortMalloc+0x7c>
                {
                    pxPreviousBlock = pxBlock;
 80001c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001c4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80001c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80001cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001ce:	685b      	ldr	r3, [r3, #4]
 80001d0:	687a      	ldr	r2, [r7, #4]
 80001d2:	429a      	cmp	r2, r3
 80001d4:	d903      	bls.n	80001de <pvPortMalloc+0x8e>
 80001d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d1f1      	bne.n	80001c2 <pvPortMalloc+0x72>
                }

                /* If we found the end marker then a block of adequate size was not found. */
                if( pxBlock != &xEnd )
 80001de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001e0:	4a29      	ldr	r2, [pc, #164]	; (8000288 <pvPortMalloc+0x138>)
 80001e2:	4293      	cmp	r3, r2
 80001e4:	d043      	beq.n	800026e <pvPortMalloc+0x11e>
                {
                    /* Return the memory space - jumping over the BlockLink_t structure
                     * at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 80001e6:	6a3b      	ldr	r3, [r7, #32]
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2208      	movs	r2, #8
 80001ec:	4413      	add	r3, r2
 80001ee:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out of the
                     * list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80001f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001f2:	681a      	ldr	r2, [r3, #0]
 80001f4:	6a3b      	ldr	r3, [r7, #32]
 80001f6:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80001f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001fa:	685a      	ldr	r2, [r3, #4]
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	1ad3      	subs	r3, r2, r3
 8000200:	2208      	movs	r2, #8
 8000202:	0052      	lsls	r2, r2, #1
 8000204:	4293      	cmp	r3, r2
 8000206:	d922      	bls.n	800024e <pvPortMalloc+0xfe>
                    {
                        /* This block is to be split into two.  Create a new block
                         * following the number of bytes requested. The void cast is
                         * used to prevent byte alignment warnings from the compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4413      	add	r3, r2
 800020e:	613b      	str	r3, [r7, #16]

                        /* Calculate the sizes of two blocks split from the single
                         * block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000212:	685a      	ldr	r2, [r3, #4]
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	1ad2      	subs	r2, r2, r3
 8000218:	693b      	ldr	r3, [r7, #16]
 800021a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800021c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8000222:	693b      	ldr	r3, [r7, #16]
 8000224:	685b      	ldr	r3, [r3, #4]
 8000226:	60fb      	str	r3, [r7, #12]
 8000228:	4b16      	ldr	r3, [pc, #88]	; (8000284 <pvPortMalloc+0x134>)
 800022a:	61bb      	str	r3, [r7, #24]
 800022c:	e002      	b.n	8000234 <pvPortMalloc+0xe4>
 800022e:	69bb      	ldr	r3, [r7, #24]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	61bb      	str	r3, [r7, #24]
 8000234:	69bb      	ldr	r3, [r7, #24]
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	685b      	ldr	r3, [r3, #4]
 800023a:	68fa      	ldr	r2, [r7, #12]
 800023c:	429a      	cmp	r2, r3
 800023e:	d8f6      	bhi.n	800022e <pvPortMalloc+0xde>
 8000240:	69bb      	ldr	r3, [r7, #24]
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	693b      	ldr	r3, [r7, #16]
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	69bb      	ldr	r3, [r7, #24]
 800024a:	693a      	ldr	r2, [r7, #16]
 800024c:	601a      	str	r2, [r3, #0]
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800024e:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <pvPortMalloc+0x130>)
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000254:	685b      	ldr	r3, [r3, #4]
 8000256:	1ad3      	subs	r3, r2, r3
 8000258:	4a09      	ldr	r2, [pc, #36]	; (8000280 <pvPortMalloc+0x130>)
 800025a:	6013      	str	r3, [r2, #0]

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800025c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000266:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8000268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800026e:	f000 ffdb 	bl	8001228 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8000272:	69fb      	ldr	r3, [r7, #28]
}
 8000274:	4618      	mov	r0, r3
 8000276:	3728      	adds	r7, #40	; 0x28
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	20002838 	.word	0x20002838
 8000280:	20000000 	.word	0x20000000
 8000284:	20002828 	.word	0x20002828
 8000288:	20002830 	.word	0x20002830

0800028c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b086      	sub	sp, #24
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d039      	beq.n	8000312 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
 800029e:	2308      	movs	r3, #8
 80002a0:	425b      	negs	r3, r3
 80002a2:	693a      	ldr	r2, [r7, #16]
 80002a4:	4413      	add	r3, r2
 80002a6:	613b      	str	r3, [r7, #16]

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;
 80002a8:	693b      	ldr	r3, [r7, #16]
 80002aa:	60fb      	str	r3, [r7, #12]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	0fdb      	lsrs	r3, r3, #31
 80002b2:	f003 0301 	and.w	r3, r3, #1
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d02a      	beq.n	8000312 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d126      	bne.n	8000312 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + heapSTRUCT_SIZE, 0, pxLink->xBlockSize - heapSTRUCT_SIZE );
                }
                #endif

                vTaskSuspendAll();
 80002d0:	f000 ff9c 	bl	800120c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	60bb      	str	r3, [r7, #8]
 80002da:	4b10      	ldr	r3, [pc, #64]	; (800031c <vPortFree+0x90>)
 80002dc:	617b      	str	r3, [r7, #20]
 80002de:	e002      	b.n	80002e6 <vPortFree+0x5a>
 80002e0:	697b      	ldr	r3, [r7, #20]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	617b      	str	r3, [r7, #20]
 80002e6:	697b      	ldr	r3, [r7, #20]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	68ba      	ldr	r2, [r7, #8]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d8f6      	bhi.n	80002e0 <vPortFree+0x54>
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	697b      	ldr	r3, [r7, #20]
 80002fc:	68fa      	ldr	r2, [r7, #12]
 80002fe:	601a      	str	r2, [r3, #0]
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	685a      	ldr	r2, [r3, #4]
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <vPortFree+0x94>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4413      	add	r3, r2
 800030a:	4a05      	ldr	r2, [pc, #20]	; (8000320 <vPortFree+0x94>)
 800030c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                }
                ( void ) xTaskResumeAll();
 800030e:	f000 ff8b 	bl	8001228 <xTaskResumeAll>
            }
        }
    }
}
 8000312:	bf00      	nop
 8000314:	3718      	adds	r7, #24
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20002828 	.word	0x20002828
 8000320:	20000000 	.word	0x20000000

08000324 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;

    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800032a:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <prvHeapInit+0x44>)
 800032c:	f023 0307 	bic.w	r3, r3, #7
 8000330:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000332:	4a0e      	ldr	r2, [pc, #56]	; (800036c <prvHeapInit+0x48>)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8000338:	4b0c      	ldr	r3, [pc, #48]	; (800036c <prvHeapInit+0x48>)
 800033a:	2200      	movs	r2, #0
 800033c:	605a      	str	r2, [r3, #4]

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 800033e:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <prvHeapInit+0x4c>)
 8000340:	f242 72f8 	movw	r2, #10232	; 0x27f8
 8000344:	605a      	str	r2, [r3, #4]
    xEnd.pxNextFreeBlock = NULL;
 8000346:	4b0a      	ldr	r3, [pc, #40]	; (8000370 <prvHeapInit+0x4c>)
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	f242 72f8 	movw	r2, #10232	; 0x27f8
 8000356:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	4a05      	ldr	r2, [pc, #20]	; (8000370 <prvHeapInit+0x4c>)
 800035c:	601a      	str	r2, [r3, #0]
}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	2000002f 	.word	0x2000002f
 800036c:	20002828 	.word	0x20002828
 8000370:	20002830 	.word	0x20002830

08000374 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	f103 0208 	add.w	r2, r3, #8
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	f04f 32ff 	mov.w	r2, #4294967295
 800038c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	f103 0208 	add.w	r2, r3, #8
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f103 0208 	add.w	r2, r3, #8
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr

080003b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80003b2:	b480      	push	{r7}
 80003b4:	b083      	sub	sp, #12
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr

080003ca <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80003ca:	b480      	push	{r7}
 80003cc:	b085      	sub	sp, #20
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	6078      	str	r0, [r7, #4]
 80003d2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003e0:	d103      	bne.n	80003ea <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	691b      	ldr	r3, [r3, #16]
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	e00c      	b.n	8000404 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	3308      	adds	r3, #8
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	e002      	b.n	80003f8 <vListInsert+0x2e>
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	685b      	ldr	r3, [r3, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	68ba      	ldr	r2, [r7, #8]
 8000400:	429a      	cmp	r2, r3
 8000402:	d2f6      	bcs.n	80003f2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	685a      	ldr	r2, [r3, #4]
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	683a      	ldr	r2, [r7, #0]
 8000412:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	68fa      	ldr	r2, [r7, #12]
 8000418:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	683a      	ldr	r2, [r7, #0]
 800041e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	687a      	ldr	r2, [r7, #4]
 8000424:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	1c5a      	adds	r2, r3, #1
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	601a      	str	r2, [r3, #0]
}
 8000430:	bf00      	nop
 8000432:	3714      	adds	r7, #20
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr

0800043a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800043a:	b480      	push	{r7}
 800043c:	b085      	sub	sp, #20
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	691b      	ldr	r3, [r3, #16]
 8000446:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	687a      	ldr	r2, [r7, #4]
 800044e:	6892      	ldr	r2, [r2, #8]
 8000450:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	689b      	ldr	r3, [r3, #8]
 8000456:	687a      	ldr	r2, [r7, #4]
 8000458:	6852      	ldr	r2, [r2, #4]
 800045a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	429a      	cmp	r2, r3
 8000464:	d103      	bne.n	800046e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	689a      	ldr	r2, [r3, #8]
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	2200      	movs	r2, #0
 8000472:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	1e5a      	subs	r2, r3, #1
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	681b      	ldr	r3, [r3, #0]
}
 8000482:	4618      	mov	r0, r3
 8000484:	3714      	adds	r7, #20
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr

0800048c <main>:

void ControlMotorsTask(void *pvParameter);
void ProducerTask(void *pvParameter);

int main()
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af02      	add	r7, sp, #8
	xQueue = xQueueCreate(1, sizeof(char));
 8000492:	2200      	movs	r2, #0
 8000494:	2101      	movs	r1, #1
 8000496:	2001      	movs	r0, #1
 8000498:	f000 fa16 	bl	80008c8 <xQueueGenericCreate>
 800049c:	4603      	mov	r3, r0
 800049e:	4a16      	ldr	r2, [pc, #88]	; (80004f8 <main+0x6c>)
 80004a0:	6013      	str	r3, [r2, #0]
	semaphore = xSemaphoreCreateMutex();
 80004a2:	2001      	movs	r0, #1
 80004a4:	f000 fa8c 	bl	80009c0 <xQueueCreateMutex>
 80004a8:	4603      	mov	r3, r0
 80004aa:	4a14      	ldr	r2, [pc, #80]	; (80004fc <main+0x70>)
 80004ac:	6013      	str	r3, [r2, #0]
	if(xQueue != NULL)
 80004ae:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <main+0x6c>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d01e      	beq.n	80004f4 <main+0x68>
	{
		RCC->APB2ENR = (1<<2); //Enable GPIOA
 80004b6:	4b12      	ldr	r3, [pc, #72]	; (8000500 <main+0x74>)
 80004b8:	2204      	movs	r2, #4
 80004ba:	619a      	str	r2, [r3, #24]
		GPIOA->CRL = (3<<4) | (3<<8); // configure PA1 = blue led as output pin
 80004bc:	4b11      	ldr	r3, [pc, #68]	; (8000504 <main+0x78>)
 80004be:	f44f 724c 	mov.w	r2, #816	; 0x330
 80004c2:	601a      	str	r2, [r3, #0]
		xTaskCreate(ControlMotorsTask, "ControlMotorsTask", 300, NULL, 2, NULL);
 80004c4:	2300      	movs	r3, #0
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	2302      	movs	r3, #2
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	2300      	movs	r3, #0
 80004ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004d2:	490d      	ldr	r1, [pc, #52]	; (8000508 <main+0x7c>)
 80004d4:	480d      	ldr	r0, [pc, #52]	; (800050c <main+0x80>)
 80004d6:	f000 fced 	bl	8000eb4 <xTaskCreate>
		xTaskCreate(ProducerTask, "ProducerTask", 300, NULL, 2, NULL);
 80004da:	2300      	movs	r3, #0
 80004dc:	9301      	str	r3, [sp, #4]
 80004de:	2302      	movs	r3, #2
 80004e0:	9300      	str	r3, [sp, #0]
 80004e2:	2300      	movs	r3, #0
 80004e4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004e8:	4909      	ldr	r1, [pc, #36]	; (8000510 <main+0x84>)
 80004ea:	480a      	ldr	r0, [pc, #40]	; (8000514 <main+0x88>)
 80004ec:	f000 fce2 	bl	8000eb4 <xTaskCreate>
		vTaskStartScheduler();
 80004f0:	f000 fe50 	bl	8001194 <vTaskStartScheduler>
	else
	{

	}

	while(1);
 80004f4:	e7fe      	b.n	80004f4 <main+0x68>
 80004f6:	bf00      	nop
 80004f8:	2000283c 	.word	0x2000283c
 80004fc:	20002840 	.word	0x20002840
 8000500:	40021000 	.word	0x40021000
 8000504:	40010800 	.word	0x40010800
 8000508:	08001d68 	.word	0x08001d68
 800050c:	08000519 	.word	0x08000519
 8000510:	08001d7c 	.word	0x08001d7c
 8000514:	08000559 	.word	0x08000559

08000518 <ControlMotorsTask>:
	return 0;
}

void ControlMotorsTask(void *pvParameter)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	char control = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		xQueueReceive(xQueue, &control, portMAX_DELAY);
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <ControlMotorsTask+0x38>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f107 010f 	add.w	r1, r7, #15
 800052c:	f04f 32ff 	mov.w	r2, #4294967295
 8000530:	4618      	mov	r0, r3
 8000532:	f000 fb07 	bl	8000b44 <xQueueReceive>
		if(control == 'w')
 8000536:	7bfb      	ldrb	r3, [r7, #15]
 8000538:	2b77      	cmp	r3, #119	; 0x77
 800053a:	d105      	bne.n	8000548 <ControlMotorsTask+0x30>
		{
			GPIOA->ODR ^=(1<<1);
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <ControlMotorsTask+0x3c>)
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	4a04      	ldr	r2, [pc, #16]	; (8000554 <ControlMotorsTask+0x3c>)
 8000542:	f083 0302 	eor.w	r3, r3, #2
 8000546:	60d3      	str	r3, [r2, #12]
		}
		else
		{

		}
		vTaskDelay(200/portTICK_RATE_MS);
 8000548:	20c8      	movs	r0, #200	; 0xc8
 800054a:	f000 fdff 	bl	800114c <vTaskDelay>
		xQueueReceive(xQueue, &control, portMAX_DELAY);
 800054e:	e7e9      	b.n	8000524 <ControlMotorsTask+0xc>
 8000550:	2000283c 	.word	0x2000283c
 8000554:	40010800 	.word	0x40010800

08000558 <ProducerTask>:

	}
}

void ProducerTask(void *pvParameter)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]

	while(1)
	{
		char control = 'w';
 8000560:	2377      	movs	r3, #119	; 0x77
 8000562:	73fb      	strb	r3, [r7, #15]
		xQueueSendToBack(xQueue, &control, portMAX_DELAY);
 8000564:	4b09      	ldr	r3, [pc, #36]	; (800058c <ProducerTask+0x34>)
 8000566:	6818      	ldr	r0, [r3, #0]
 8000568:	f107 010f 	add.w	r1, r7, #15
 800056c:	2300      	movs	r3, #0
 800056e:	f04f 32ff 	mov.w	r2, #4294967295
 8000572:	f000 fa3d 	bl	80009f0 <xQueueGenericSend>
		GPIOA->ODR ^=(1<<2);
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <ProducerTask+0x38>)
 8000578:	68db      	ldr	r3, [r3, #12]
 800057a:	4a05      	ldr	r2, [pc, #20]	; (8000590 <ProducerTask+0x38>)
 800057c:	f083 0304 	eor.w	r3, r3, #4
 8000580:	60d3      	str	r3, [r2, #12]
		vTaskDelay(100/portTICK_RATE_MS);
 8000582:	2064      	movs	r0, #100	; 0x64
 8000584:	f000 fde2 	bl	800114c <vTaskDelay>
	{
 8000588:	e7ea      	b.n	8000560 <ProducerTask+0x8>
 800058a:	bf00      	nop
 800058c:	2000283c 	.word	0x2000283c
 8000590:	40010800 	.word	0x40010800

08000594 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	3b04      	subs	r3, #4
 80005a4:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005ac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	3b04      	subs	r3, #4
 80005b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	f023 0201 	bic.w	r2, r3, #1
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3b04      	subs	r3, #4
 80005c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80005c4:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <pxPortInitialiseStack+0x54>)
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	3b14      	subs	r3, #20
 80005ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	3b20      	subs	r3, #32
 80005da:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80005dc:	68fb      	ldr	r3, [r7, #12]
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	080005ed 	.word	0x080005ed

080005ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	603b      	str	r3, [r7, #0]

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005f6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80005fa:	f383 8811 	msr	BASEPRI, r3
 80005fe:	f3bf 8f6f 	isb	sy
 8000602:	f3bf 8f4f 	dsb	sy
 8000606:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000608:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800060a:	bf00      	nop
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0fc      	beq.n	800060c <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000612:	bf00      	nop
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr
	...

08000620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <pxCurrentTCBConst2>)
 8000622:	6819      	ldr	r1, [r3, #0]
 8000624:	6808      	ldr	r0, [r1, #0]
 8000626:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800062a:	f380 8809 	msr	PSP, r0
 800062e:	f3bf 8f6f 	isb	sy
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	f380 8811 	msr	BASEPRI, r0
 800063a:	f04e 0e0d 	orr.w	lr, lr, #13
 800063e:	4770      	bx	lr

08000640 <pxCurrentTCBConst2>:
 8000640:	20002844 	.word	0x20002844
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000644:	bf00      	nop
 8000646:	bf00      	nop

08000648 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8000648:	4806      	ldr	r0, [pc, #24]	; (8000664 <prvPortStartFirstTask+0x1c>)
 800064a:	6800      	ldr	r0, [r0, #0]
 800064c:	6800      	ldr	r0, [r0, #0]
 800064e:	f380 8808 	msr	MSP, r0
 8000652:	b662      	cpsie	i
 8000654:	b661      	cpsie	f
 8000656:	f3bf 8f4f 	dsb	sy
 800065a:	f3bf 8f6f 	isb	sy
 800065e:	df00      	svc	0
 8000660:	bf00      	nop
 8000662:	0000      	.short	0x0000
 8000664:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000668:	bf00      	nop
 800066a:	bf00      	nop

0800066c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
        *pucFirstUserPriorityRegister = ulOriginalPriority;
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <xPortStartScheduler+0x38>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a0b      	ldr	r2, [pc, #44]	; (80006a4 <xPortStartScheduler+0x38>)
 8000676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800067a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <xPortStartScheduler+0x38>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a08      	ldr	r2, [pc, #32]	; (80006a4 <xPortStartScheduler+0x38>)
 8000682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000686:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8000688:	f000 f890 	bl	80007ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <xPortStartScheduler+0x3c>)
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000692:	f7ff ffd9 	bl	8000648 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8000696:	f000 ffb9 	bl	800160c <vTaskSwitchContext>
    prvTaskExitError();
 800069a:	f7ff ffa7 	bl	80005ec <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800069e:	2300      	movs	r3, #0
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	e000ed20 	.word	0xe000ed20
 80006a8:	20000004 	.word	0x20000004

080006ac <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
        __asm volatile
 80006b2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80006b6:	f383 8811 	msr	BASEPRI, r3
 80006ba:	f3bf 8f6f 	isb	sy
 80006be:	f3bf 8f4f 	dsb	sy
 80006c2:	607b      	str	r3, [r7, #4]
    }
 80006c4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <vPortEnterCritical+0x30>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	3301      	adds	r3, #1
 80006cc:	4a03      	ldr	r2, [pc, #12]	; (80006dc <vPortEnterCritical+0x30>)
 80006ce:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	20000004 	.word	0x20000004

080006e0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 80006e6:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <vPortExitCritical+0x30>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	3b01      	subs	r3, #1
 80006ec:	4a08      	ldr	r2, [pc, #32]	; (8000710 <vPortExitCritical+0x30>)
 80006ee:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <vPortExitCritical+0x30>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d105      	bne.n	8000704 <vPortExitCritical+0x24>
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000702:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	20000004 	.word	0x20000004
	...

08000720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000720:	f3ef 8009 	mrs	r0, PSP
 8000724:	f3bf 8f6f 	isb	sy
 8000728:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <pxCurrentTCBConst>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000730:	6010      	str	r0, [r2, #0]
 8000732:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000736:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800073a:	f380 8811 	msr	BASEPRI, r0
 800073e:	f000 ff65 	bl	800160c <vTaskSwitchContext>
 8000742:	f04f 0000 	mov.w	r0, #0
 8000746:	f380 8811 	msr	BASEPRI, r0
 800074a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800074e:	6819      	ldr	r1, [r3, #0]
 8000750:	6808      	ldr	r0, [r1, #0]
 8000752:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000756:	f380 8809 	msr	PSP, r0
 800075a:	f3bf 8f6f 	isb	sy
 800075e:	4770      	bx	lr

08000760 <pxCurrentTCBConst>:
 8000760:	20002844 	.word	0x20002844
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000764:	bf00      	nop
 8000766:	bf00      	nop

08000768 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
        __asm volatile
 800076e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000772:	f383 8811 	msr	BASEPRI, r3
 8000776:	f3bf 8f6f 	isb	sy
 800077a:	f3bf 8f4f 	dsb	sy
 800077e:	607b      	str	r3, [r7, #4]
    }
 8000780:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000782:	f000 fe3d 	bl	8001400 <xTaskIncrementTick>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d003      	beq.n	8000794 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <SysTick_Handler+0x40>)
 800078e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	2300      	movs	r3, #0
 8000796:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	f383 8811 	msr	BASEPRI, r3
    }
 800079e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	e000ed04 	.word	0xe000ed04

080007ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <vPortSetupTimerInterrupt+0x28>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <vPortSetupTimerInterrupt+0x2c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <vPortSetupTimerInterrupt+0x30>)
 80007be:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80007c2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80007c4:	4b03      	ldr	r3, [pc, #12]	; (80007d4 <vPortSetupTimerInterrupt+0x28>)
 80007c6:	2207      	movs	r2, #7
 80007c8:	601a      	str	r2, [r3, #0]
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e000e010 	.word	0xe000e010
 80007d8:	e000e018 	.word	0xe000e018
 80007dc:	e000e014 	.word	0xe000e014

080007e0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80007ea:	2301      	movs	r3, #1
 80007ec:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d05d      	beq.n	80008b4 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d059      	beq.n	80008b4 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000808:	2100      	movs	r1, #0
 800080a:	fba3 2302 	umull	r2, r3, r3, r2
 800080e:	2b00      	cmp	r3, #0
 8000810:	d000      	beq.n	8000814 <xQueueGenericReset+0x34>
 8000812:	2101      	movs	r1, #1
 8000814:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000816:	2b00      	cmp	r3, #0
 8000818:	d14c      	bne.n	80008b4 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 800081a:	f7ff ff47 	bl	80006ac <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000826:	68b9      	ldr	r1, [r7, #8]
 8000828:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800082a:	fb01 f303 	mul.w	r3, r1, r3
 800082e:	441a      	add	r2, r3
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	2200      	movs	r2, #0
 8000838:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800084a:	3b01      	subs	r3, #1
 800084c:	68b9      	ldr	r1, [r7, #8]
 800084e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000850:	fb01 f303 	mul.w	r3, r1, r3
 8000854:	441a      	add	r2, r3
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	22ff      	movs	r2, #255	; 0xff
 800085e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	22ff      	movs	r2, #255	; 0xff
 8000866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d114      	bne.n	800089a <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	691b      	ldr	r3, [r3, #16]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d01a      	beq.n	80008ae <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	3310      	adds	r3, #16
 800087c:	4618      	mov	r0, r3
 800087e:	f000 ff21 	bl	80016c4 <xTaskRemoveFromEventList>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d012      	beq.n	80008ae <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <xQueueGenericReset+0xe4>)
 800088a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	f3bf 8f4f 	dsb	sy
 8000894:	f3bf 8f6f 	isb	sy
 8000898:	e009      	b.n	80008ae <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	3310      	adds	r3, #16
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fd68 	bl	8000374 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	3324      	adds	r3, #36	; 0x24
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fd63 	bl	8000374 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80008ae:	f7ff ff17 	bl	80006e0 <vPortExitCritical>
 80008b2:	e001      	b.n	80008b8 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80008b8:	68fb      	ldr	r3, [r7, #12]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	e000ed04 	.word	0xe000ed04

080008c8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	; 0x28
 80008cc:	af02      	add	r7, sp, #8
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	4613      	mov	r3, r2
 80008d4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d02d      	beq.n	800093c <xQueueGenericCreate+0x74>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80008e0:	2100      	movs	r1, #0
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	fba3 2302 	umull	r2, r3, r3, r2
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d000      	beq.n	80008f0 <xQueueGenericCreate+0x28>
 80008ee:	2101      	movs	r1, #1
 80008f0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d122      	bne.n	800093c <xQueueGenericCreate+0x74>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	68ba      	ldr	r2, [r7, #8]
 80008fa:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80008fe:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000902:	d81b      	bhi.n	800093c <xQueueGenericCreate+0x74>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	fb02 f303 	mul.w	r3, r2, r3
 800090c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800090e:	69bb      	ldr	r3, [r7, #24]
 8000910:	3350      	adds	r3, #80	; 0x50
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fc1c 	bl	8000150 <pvPortMalloc>
 8000918:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d00d      	beq.n	800093c <xQueueGenericCreate+0x74>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	3350      	adds	r3, #80	; 0x50
 8000928:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800092a:	79fa      	ldrb	r2, [r7, #7]
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	4613      	mov	r3, r2
 8000932:	697a      	ldr	r2, [r7, #20]
 8000934:	68b9      	ldr	r1, [r7, #8]
 8000936:	68f8      	ldr	r0, [r7, #12]
 8000938:	f000 f805 	bl	8000946 <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800093c:	69fb      	ldr	r3, [r7, #28]
    }
 800093e:	4618      	mov	r0, r3
 8000940:	3720      	adds	r7, #32
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b084      	sub	sp, #16
 800094a:	af00      	add	r7, sp, #0
 800094c:	60f8      	str	r0, [r7, #12]
 800094e:	60b9      	str	r1, [r7, #8]
 8000950:	607a      	str	r2, [r7, #4]
 8000952:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d103      	bne.n	8000962 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	e002      	b.n	8000968 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	68ba      	ldr	r2, [r7, #8]
 8000972:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000974:	2101      	movs	r1, #1
 8000976:	69b8      	ldr	r0, [r7, #24]
 8000978:	f7ff ff32 	bl	80007e0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	78fa      	ldrb	r2, [r7, #3]
 8000980:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000984:	bf00      	nop
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d00e      	beq.n	80009b8 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2200      	movs	r2, #0
 80009aa:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80009ac:	2300      	movs	r3, #0
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f000 f81c 	bl	80009f0 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80009ca:	2301      	movs	r3, #1
 80009cc:	617b      	str	r3, [r7, #20]
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	461a      	mov	r2, r3
 80009d6:	6939      	ldr	r1, [r7, #16]
 80009d8:	6978      	ldr	r0, [r7, #20]
 80009da:	f7ff ff75 	bl	80008c8 <xQueueGenericCreate>
 80009de:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80009e0:	68f8      	ldr	r0, [r7, #12]
 80009e2:	f7ff ffd3 	bl	800098c <prvInitialiseMutex>

        return xNewQueue;
 80009e6:	68fb      	ldr	r3, [r7, #12]
    }
 80009e8:	4618      	mov	r0, r3
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
 80009fc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000a06:	f7ff fe51 	bl	80006ac <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000a0a:	6a3b      	ldr	r3, [r7, #32]
 8000a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a0e:	6a3b      	ldr	r3, [r7, #32]
 8000a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d302      	bcc.n	8000a1c <xQueueGenericSend+0x2c>
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d129      	bne.n	8000a70 <xQueueGenericSend+0x80>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000a1c:	683a      	ldr	r2, [r7, #0]
 8000a1e:	68b9      	ldr	r1, [r7, #8]
 8000a20:	6a38      	ldr	r0, [r7, #32]
 8000a22:	f000 f931 	bl	8000c88 <prvCopyDataToQueue>
 8000a26:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a28:	6a3b      	ldr	r3, [r7, #32]
 8000a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d010      	beq.n	8000a52 <xQueueGenericSend+0x62>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a30:	6a3b      	ldr	r3, [r7, #32]
 8000a32:	3324      	adds	r3, #36	; 0x24
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 fe45 	bl	80016c4 <xTaskRemoveFromEventList>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d013      	beq.n	8000a68 <xQueueGenericSend+0x78>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000a40:	4b3f      	ldr	r3, [pc, #252]	; (8000b40 <xQueueGenericSend+0x150>)
 8000a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	f3bf 8f4f 	dsb	sy
 8000a4c:	f3bf 8f6f 	isb	sy
 8000a50:	e00a      	b.n	8000a68 <xQueueGenericSend+0x78>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d007      	beq.n	8000a68 <xQueueGenericSend+0x78>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8000a58:	4b39      	ldr	r3, [pc, #228]	; (8000b40 <xQueueGenericSend+0x150>)
 8000a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	f3bf 8f4f 	dsb	sy
 8000a64:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000a68:	f7ff fe3a 	bl	80006e0 <vPortExitCritical>
                return pdPASS;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	e063      	b.n	8000b38 <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d103      	bne.n	8000a7e <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a76:	f7ff fe33 	bl	80006e0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e05c      	b.n	8000b38 <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d106      	bne.n	8000a92 <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 fee3 	bl	8001854 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a92:	f7ff fe25 	bl	80006e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a96:	f000 fbb9 	bl	800120c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a9a:	f7ff fe07 	bl	80006ac <vPortEnterCritical>
 8000a9e:	6a3b      	ldr	r3, [r7, #32]
 8000aa0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000aa4:	b25b      	sxtb	r3, r3
 8000aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aaa:	d103      	bne.n	8000ab4 <xQueueGenericSend+0xc4>
 8000aac:	6a3b      	ldr	r3, [r7, #32]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000ab4:	6a3b      	ldr	r3, [r7, #32]
 8000ab6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000aba:	b25b      	sxtb	r3, r3
 8000abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac0:	d103      	bne.n	8000aca <xQueueGenericSend+0xda>
 8000ac2:	6a3b      	ldr	r3, [r7, #32]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000aca:	f7ff fe09 	bl	80006e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ace:	1d3a      	adds	r2, r7, #4
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 fed2 	bl	8001880 <xTaskCheckForTimeOut>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d124      	bne.n	8000b2c <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000ae2:	6a38      	ldr	r0, [r7, #32]
 8000ae4:	f000 f9c8 	bl	8000e78 <prvIsQueueFull>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d018      	beq.n	8000b20 <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000aee:	6a3b      	ldr	r3, [r7, #32]
 8000af0:	3310      	adds	r3, #16
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	4611      	mov	r1, r2
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 fdce 	bl	8001698 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000afc:	6a38      	ldr	r0, [r7, #32]
 8000afe:	f000 f953 	bl	8000da8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000b02:	f000 fb91 	bl	8001228 <xTaskResumeAll>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	f47f af7c 	bne.w	8000a06 <xQueueGenericSend+0x16>
                {
                    portYIELD_WITHIN_API();
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <xQueueGenericSend+0x150>)
 8000b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	f3bf 8f4f 	dsb	sy
 8000b1a:	f3bf 8f6f 	isb	sy
 8000b1e:	e772      	b.n	8000a06 <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000b20:	6a38      	ldr	r0, [r7, #32]
 8000b22:	f000 f941 	bl	8000da8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000b26:	f000 fb7f 	bl	8001228 <xTaskResumeAll>
 8000b2a:	e76c      	b.n	8000a06 <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000b2c:	6a38      	ldr	r0, [r7, #32]
 8000b2e:	f000 f93b 	bl	8000da8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000b32:	f000 fb79 	bl	8001228 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8000b36:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	e000ed04 	.word	0xe000ed04

08000b44 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	623b      	str	r3, [r7, #32]
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000b58:	f7ff fda8 	bl	80006ac <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000b5c:	6a3b      	ldr	r3, [r7, #32]
 8000b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b60:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d01f      	beq.n	8000ba8 <xQueueReceive+0x64>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000b68:	68b9      	ldr	r1, [r7, #8]
 8000b6a:	6a38      	ldr	r0, [r7, #32]
 8000b6c:	f000 f8f6 	bl	8000d5c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	1e5a      	subs	r2, r3, #1
 8000b74:	6a3b      	ldr	r3, [r7, #32]
 8000b76:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b78:	6a3b      	ldr	r3, [r7, #32]
 8000b7a:	691b      	ldr	r3, [r3, #16]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d00f      	beq.n	8000ba0 <xQueueReceive+0x5c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b80:	6a3b      	ldr	r3, [r7, #32]
 8000b82:	3310      	adds	r3, #16
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 fd9d 	bl	80016c4 <xTaskRemoveFromEventList>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d007      	beq.n	8000ba0 <xQueueReceive+0x5c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000b90:	4b3c      	ldr	r3, [pc, #240]	; (8000c84 <xQueueReceive+0x140>)
 8000b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	f3bf 8f4f 	dsb	sy
 8000b9c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000ba0:	f7ff fd9e 	bl	80006e0 <vPortExitCritical>
                return pdPASS;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	e069      	b.n	8000c7c <xQueueReceive+0x138>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d103      	bne.n	8000bb6 <xQueueReceive+0x72>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000bae:	f7ff fd97 	bl	80006e0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e062      	b.n	8000c7c <xQueueReceive+0x138>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d106      	bne.n	8000bca <xQueueReceive+0x86>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 fe47 	bl	8001854 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000bca:	f7ff fd89 	bl	80006e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000bce:	f000 fb1d 	bl	800120c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000bd2:	f7ff fd6b 	bl	80006ac <vPortEnterCritical>
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000bdc:	b25b      	sxtb	r3, r3
 8000bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be2:	d103      	bne.n	8000bec <xQueueReceive+0xa8>
 8000be4:	6a3b      	ldr	r3, [r7, #32]
 8000be6:	2200      	movs	r2, #0
 8000be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000bec:	6a3b      	ldr	r3, [r7, #32]
 8000bee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000bf2:	b25b      	sxtb	r3, r3
 8000bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf8:	d103      	bne.n	8000c02 <xQueueReceive+0xbe>
 8000bfa:	6a3b      	ldr	r3, [r7, #32]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000c02:	f7ff fd6d 	bl	80006e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c06:	1d3a      	adds	r2, r7, #4
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 fe36 	bl	8001880 <xTaskCheckForTimeOut>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d123      	bne.n	8000c62 <xQueueReceive+0x11e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c1a:	6a38      	ldr	r0, [r7, #32]
 8000c1c:	f000 f916 	bl	8000e4c <prvIsQueueEmpty>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d017      	beq.n	8000c56 <xQueueReceive+0x112>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000c26:	6a3b      	ldr	r3, [r7, #32]
 8000c28:	3324      	adds	r3, #36	; 0x24
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	4611      	mov	r1, r2
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 fd32 	bl	8001698 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000c34:	6a38      	ldr	r0, [r7, #32]
 8000c36:	f000 f8b7 	bl	8000da8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000c3a:	f000 faf5 	bl	8001228 <xTaskResumeAll>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d189      	bne.n	8000b58 <xQueueReceive+0x14>
                {
                    portYIELD_WITHIN_API();
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <xQueueReceive+0x140>)
 8000c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	f3bf 8f4f 	dsb	sy
 8000c50:	f3bf 8f6f 	isb	sy
 8000c54:	e780      	b.n	8000b58 <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000c56:	6a38      	ldr	r0, [r7, #32]
 8000c58:	f000 f8a6 	bl	8000da8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000c5c:	f000 fae4 	bl	8001228 <xTaskResumeAll>
 8000c60:	e77a      	b.n	8000b58 <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000c62:	6a38      	ldr	r0, [r7, #32]
 8000c64:	f000 f8a0 	bl	8000da8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000c68:	f000 fade 	bl	8001228 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c6c:	6a38      	ldr	r0, [r7, #32]
 8000c6e:	f000 f8ed 	bl	8000e4c <prvIsQueueEmpty>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	f43f af6f 	beq.w	8000b58 <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000c7a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3728      	adds	r7, #40	; 0x28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	e000ed04 	.word	0xe000ed04

08000c88 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c9c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d10d      	bne.n	8000cc2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d14d      	bne.n	8000d4a <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 feea 	bl	8001a8c <xTaskPriorityDisinherit>
 8000cb8:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	e043      	b.n	8000d4a <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d119      	bne.n	8000cfc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	6858      	ldr	r0, [r3, #4]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	68b9      	ldr	r1, [r7, #8]
 8000cd4:	f001 f826 	bl	8001d24 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	685a      	ldr	r2, [r3, #4]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	441a      	add	r2, r3
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d32b      	bcc.n	8000d4a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	e026      	b.n	8000d4a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	68d8      	ldr	r0, [r3, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	461a      	mov	r2, r3
 8000d06:	68b9      	ldr	r1, [r7, #8]
 8000d08:	f001 f80c 	bl	8001d24 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	68da      	ldr	r2, [r3, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d14:	425b      	negs	r3, r3
 8000d16:	441a      	add	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	68da      	ldr	r2, [r3, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d207      	bcs.n	8000d38 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	689a      	ldr	r2, [r3, #8]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	425b      	negs	r3, r3
 8000d32:	441a      	add	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d105      	bne.n	8000d4a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d002      	beq.n	8000d4a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	1c5a      	adds	r2, r3, #1
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000d52:	697b      	ldr	r3, [r7, #20]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d018      	beq.n	8000da0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	441a      	add	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	68da      	ldr	r2, [r3, #12]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d303      	bcc.n	8000d90 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	68d9      	ldr	r1, [r3, #12]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	461a      	mov	r2, r3
 8000d9a:	6838      	ldr	r0, [r7, #0]
 8000d9c:	f000 ffc2 	bl	8001d24 <memcpy>
    }
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000db0:	f7ff fc7c 	bl	80006ac <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000dba:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000dbc:	e011      	b.n	8000de2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d012      	beq.n	8000dec <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3324      	adds	r3, #36	; 0x24
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 fc7a 	bl	80016c4 <xTaskRemoveFromEventList>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000dd6:	f000 fd9d 	bl	8001914 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	dce9      	bgt.n	8000dbe <prvUnlockQueue+0x16>
 8000dea:	e000      	b.n	8000dee <prvUnlockQueue+0x46>
                    break;
 8000dec:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	22ff      	movs	r2, #255	; 0xff
 8000df2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000df6:	f7ff fc73 	bl	80006e0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000dfa:	f7ff fc57 	bl	80006ac <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e04:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000e06:	e011      	b.n	8000e2c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	691b      	ldr	r3, [r3, #16]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d012      	beq.n	8000e36 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3310      	adds	r3, #16
 8000e14:	4618      	mov	r0, r3
 8000e16:	f000 fc55 	bl	80016c4 <xTaskRemoveFromEventList>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000e20:	f000 fd78 	bl	8001914 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000e24:	7bbb      	ldrb	r3, [r7, #14]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000e2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	dce9      	bgt.n	8000e08 <prvUnlockQueue+0x60>
 8000e34:	e000      	b.n	8000e38 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000e36:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	22ff      	movs	r2, #255	; 0xff
 8000e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000e40:	f7ff fc4e 	bl	80006e0 <vPortExitCritical>
}
 8000e44:	bf00      	nop
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000e54:	f7ff fc2a 	bl	80006ac <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000e60:	2301      	movs	r3, #1
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	e001      	b.n	8000e6a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000e6a:	f7ff fc39 	bl	80006e0 <vPortExitCritical>

    return xReturn;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000e80:	f7ff fc14 	bl	80006ac <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d102      	bne.n	8000e96 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000e90:	2301      	movs	r3, #1
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	e001      	b.n	8000e9a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000e9a:	f7ff fc21 	bl	80006e0 <vPortExitCritical>

    return xReturn;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08c      	sub	sp, #48	; 0x30
 8000eb8:	af04      	add	r7, sp, #16
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff f941 	bl	8000150 <pvPortMalloc>
 8000ece:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d013      	beq.n	8000efe <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000ed6:	205c      	movs	r0, #92	; 0x5c
 8000ed8:	f7ff f93a 	bl	8000150 <pvPortMalloc>
 8000edc:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d008      	beq.n	8000ef6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000ee4:	225c      	movs	r2, #92	; 0x5c
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	69f8      	ldr	r0, [r7, #28]
 8000eea:	f000 ff29 	bl	8001d40 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	631a      	str	r2, [r3, #48]	; 0x30
 8000ef4:	e005      	b.n	8000f02 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000ef6:	6978      	ldr	r0, [r7, #20]
 8000ef8:	f7ff f9c8 	bl	800028c <vPortFree>
 8000efc:	e001      	b.n	8000f02 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d013      	beq.n	8000f30 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000f08:	88fa      	ldrh	r2, [r7, #6]
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	9303      	str	r3, [sp, #12]
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	9302      	str	r3, [sp, #8]
 8000f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	68b9      	ldr	r1, [r7, #8]
 8000f1e:	68f8      	ldr	r0, [r7, #12]
 8000f20:	f000 f80e 	bl	8000f40 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000f24:	69f8      	ldr	r0, [r7, #28]
 8000f26:	f000 f87b 	bl	8001020 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	61bb      	str	r3, [r7, #24]
 8000f2e:	e002      	b.n	8000f36 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000f30:	f04f 33ff 	mov.w	r3, #4294967295
 8000f34:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000f36:	69bb      	ldr	r3, [r7, #24]
    }
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3720      	adds	r7, #32
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
 8000f4c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	461a      	mov	r2, r3
 8000f58:	21a5      	movs	r1, #165	; 0xa5
 8000f5a:	f000 fef1 	bl	8001d40 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	f023 0307 	bic.w	r3, r3, #7
 8000f76:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d01e      	beq.n	8000fbc <prvInitialiseNewTask+0x7c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	e012      	b.n	8000faa <prvInitialiseNewTask+0x6a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000f84:	68ba      	ldr	r2, [r7, #8]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	4413      	add	r3, r2
 8000f8a:	7819      	ldrb	r1, [r3, #0]
 8000f8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	4413      	add	r3, r2
 8000f92:	3334      	adds	r3, #52	; 0x34
 8000f94:	460a      	mov	r2, r1
 8000f96:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000f98:	68ba      	ldr	r2, [r7, #8]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d006      	beq.n	8000fb2 <prvInitialiseNewTask+0x72>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d9e9      	bls.n	8000f84 <prvInitialiseNewTask+0x44>
 8000fb0:	e000      	b.n	8000fb4 <prvInitialiseNewTask+0x74>
            {
                break;
 8000fb2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000fbc:	6a3b      	ldr	r3, [r7, #32]
 8000fbe:	2b05      	cmp	r3, #5
 8000fc0:	d901      	bls.n	8000fc6 <prvInitialiseNewTask+0x86>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000fc2:	2305      	movs	r3, #5
 8000fc4:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc8:	6a3a      	ldr	r2, [r7, #32]
 8000fca:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fce:	6a3a      	ldr	r2, [r7, #32]
 8000fd0:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff f9eb 	bl	80003b2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fde:	3318      	adds	r3, #24
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff f9e6 	bl	80003b2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fea:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000fec:	6a3b      	ldr	r3, [r7, #32]
 8000fee:	f1c3 0206 	rsb	r2, r3, #6
 8000ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ffa:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000ffc:	683a      	ldr	r2, [r7, #0]
 8000ffe:	68f9      	ldr	r1, [r7, #12]
 8001000:	6938      	ldr	r0, [r7, #16]
 8001002:	f7ff fac7 	bl	8000594 <pxPortInitialiseStack>
 8001006:	4602      	mov	r2, r0
 8001008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800100a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	2b00      	cmp	r3, #0
 8001010:	d002      	beq.n	8001018 <prvInitialiseNewTask+0xd8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001016:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001018:	bf00      	nop
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001028:	f7ff fb40 	bl	80006ac <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800102c:	4b40      	ldr	r3, [pc, #256]	; (8001130 <prvAddNewTaskToReadyList+0x110>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	3301      	adds	r3, #1
 8001032:	4a3f      	ldr	r2, [pc, #252]	; (8001130 <prvAddNewTaskToReadyList+0x110>)
 8001034:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001036:	4b3f      	ldr	r3, [pc, #252]	; (8001134 <prvAddNewTaskToReadyList+0x114>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d109      	bne.n	8001052 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800103e:	4a3d      	ldr	r2, [pc, #244]	; (8001134 <prvAddNewTaskToReadyList+0x114>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001044:	4b3a      	ldr	r3, [pc, #232]	; (8001130 <prvAddNewTaskToReadyList+0x110>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d110      	bne.n	800106e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800104c:	f000 fc86 	bl	800195c <prvInitialiseTaskLists>
 8001050:	e00d      	b.n	800106e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001052:	4b39      	ldr	r3, [pc, #228]	; (8001138 <prvAddNewTaskToReadyList+0x118>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d109      	bne.n	800106e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800105a:	4b36      	ldr	r3, [pc, #216]	; (8001134 <prvAddNewTaskToReadyList+0x114>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001064:	429a      	cmp	r2, r3
 8001066:	d802      	bhi.n	800106e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001068:	4a32      	ldr	r2, [pc, #200]	; (8001134 <prvAddNewTaskToReadyList+0x114>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800106e:	4b33      	ldr	r3, [pc, #204]	; (800113c <prvAddNewTaskToReadyList+0x11c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	4a31      	ldr	r2, [pc, #196]	; (800113c <prvAddNewTaskToReadyList+0x11c>)
 8001076:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001078:	4b30      	ldr	r3, [pc, #192]	; (800113c <prvAddNewTaskToReadyList+0x11c>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001084:	2201      	movs	r2, #1
 8001086:	409a      	lsls	r2, r3
 8001088:	4b2d      	ldr	r3, [pc, #180]	; (8001140 <prvAddNewTaskToReadyList+0x120>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4313      	orrs	r3, r2
 800108e:	4a2c      	ldr	r2, [pc, #176]	; (8001140 <prvAddNewTaskToReadyList+0x120>)
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001096:	492b      	ldr	r1, [pc, #172]	; (8001144 <prvAddNewTaskToReadyList+0x124>)
 8001098:	4613      	mov	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	440b      	add	r3, r1
 80010a2:	3304      	adds	r3, #4
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	3204      	adds	r2, #4
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	1d1a      	adds	r2, r3, #4
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4a1b      	ldr	r2, [pc, #108]	; (8001144 <prvAddNewTaskToReadyList+0x124>)
 80010d6:	441a      	add	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	615a      	str	r2, [r3, #20]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010e0:	4918      	ldr	r1, [pc, #96]	; (8001144 <prvAddNewTaskToReadyList+0x124>)
 80010e2:	4613      	mov	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	440b      	add	r3, r1
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	1c59      	adds	r1, r3, #1
 80010f0:	4814      	ldr	r0, [pc, #80]	; (8001144 <prvAddNewTaskToReadyList+0x124>)
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4403      	add	r3, r0
 80010fc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80010fe:	f7ff faef 	bl	80006e0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <prvAddNewTaskToReadyList+0x118>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00e      	beq.n	8001128 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <prvAddNewTaskToReadyList+0x114>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001114:	429a      	cmp	r2, r3
 8001116:	d207      	bcs.n	8001128 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <prvAddNewTaskToReadyList+0x128>)
 800111a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	f3bf 8f4f 	dsb	sy
 8001124:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20002930 	.word	0x20002930
 8001134:	20002844 	.word	0x20002844
 8001138:	2000293c 	.word	0x2000293c
 800113c:	2000294c 	.word	0x2000294c
 8001140:	20002938 	.word	0x20002938
 8001144:	20002848 	.word	0x20002848
 8001148:	e000ed04 	.word	0xe000ed04

0800114c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d008      	beq.n	8001170 <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 800115e:	f000 f855 	bl	800120c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001162:	2100      	movs	r1, #0
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 fd13 	bl	8001b90 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800116a:	f000 f85d 	bl	8001228 <xTaskResumeAll>
 800116e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d107      	bne.n	8001186 <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <vTaskDelay+0x44>)
 8001178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	f3bf 8f4f 	dsb	sy
 8001182:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	e000ed04 	.word	0xe000ed04

08001194 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <vTaskStartScheduler+0x5c>)
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	2300      	movs	r3, #0
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2300      	movs	r3, #0
 80011a4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011a8:	4912      	ldr	r1, [pc, #72]	; (80011f4 <vTaskStartScheduler+0x60>)
 80011aa:	4813      	ldr	r0, [pc, #76]	; (80011f8 <vTaskStartScheduler+0x64>)
 80011ac:	f7ff fe82 	bl	8000eb4 <xTaskCreate>
 80011b0:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d115      	bne.n	80011e4 <vTaskStartScheduler+0x50>
        __asm volatile
 80011b8:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80011bc:	f383 8811 	msr	BASEPRI, r3
 80011c0:	f3bf 8f6f 	isb	sy
 80011c4:	f3bf 8f4f 	dsb	sy
 80011c8:	603b      	str	r3, [r7, #0]
    }
 80011ca:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <vTaskStartScheduler+0x68>)
 80011ce:	f04f 32ff 	mov.w	r2, #4294967295
 80011d2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <vTaskStartScheduler+0x6c>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <vTaskStartScheduler+0x70>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80011e0:	f7ff fa44 	bl	800066c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <vTaskStartScheduler+0x74>)
 80011e6:	681b      	ldr	r3, [r3, #0]
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20002954 	.word	0x20002954
 80011f4:	08001d8c 	.word	0x08001d8c
 80011f8:	0800192d 	.word	0x0800192d
 80011fc:	20002950 	.word	0x20002950
 8001200:	2000293c 	.word	0x2000293c
 8001204:	20002934 	.word	0x20002934
 8001208:	20000008 	.word	0x20000008

0800120c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <vTaskSuspendAll+0x18>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	3301      	adds	r3, #1
 8001216:	4a03      	ldr	r2, [pc, #12]	; (8001224 <vTaskSuspendAll+0x18>)
 8001218:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20002958 	.word	0x20002958

08001228 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001236:	f7ff fa39 	bl	80006ac <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800123a:	4b68      	ldr	r3, [pc, #416]	; (80013dc <xTaskResumeAll+0x1b4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3b01      	subs	r3, #1
 8001240:	4a66      	ldr	r2, [pc, #408]	; (80013dc <xTaskResumeAll+0x1b4>)
 8001242:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001244:	4b65      	ldr	r3, [pc, #404]	; (80013dc <xTaskResumeAll+0x1b4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	f040 80c0 	bne.w	80013ce <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800124e:	4b64      	ldr	r3, [pc, #400]	; (80013e0 <xTaskResumeAll+0x1b8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 80bb 	beq.w	80013ce <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001258:	e08a      	b.n	8001370 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800125a:	4b62      	ldr	r3, [pc, #392]	; (80013e4 <xTaskResumeAll+0x1bc>)
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	6a12      	ldr	r2, [r2, #32]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	69d2      	ldr	r2, [r2, #28]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	3318      	adds	r3, #24
 8001284:	429a      	cmp	r2, r3
 8001286:	d103      	bne.n	8001290 <xTaskResumeAll+0x68>
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	6a1a      	ldr	r2, [r3, #32]
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	2200      	movs	r2, #0
 8001294:	629a      	str	r2, [r3, #40]	; 0x28
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	1e5a      	subs	r2, r3, #1
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	68d2      	ldr	r2, [r2, #12]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	6892      	ldr	r2, [r2, #8]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	3304      	adds	r3, #4
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d103      	bne.n	80012ce <xTaskResumeAll+0xa6>
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	68da      	ldr	r2, [r3, #12]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	1e5a      	subs	r2, r3, #1
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e2:	2201      	movs	r2, #1
 80012e4:	409a      	lsls	r2, r3
 80012e6:	4b40      	ldr	r3, [pc, #256]	; (80013e8 <xTaskResumeAll+0x1c0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	4a3e      	ldr	r2, [pc, #248]	; (80013e8 <xTaskResumeAll+0x1c0>)
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012f4:	493d      	ldr	r1, [pc, #244]	; (80013ec <xTaskResumeAll+0x1c4>)
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	440b      	add	r3, r1
 8001300:	3304      	adds	r3, #4
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	603b      	str	r3, [r7, #0]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	3204      	adds	r2, #4
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	1d1a      	adds	r2, r3, #4
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800132a:	4613      	mov	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4a2e      	ldr	r2, [pc, #184]	; (80013ec <xTaskResumeAll+0x1c4>)
 8001334:	441a      	add	r2, r3
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	615a      	str	r2, [r3, #20]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800133e:	492b      	ldr	r1, [pc, #172]	; (80013ec <xTaskResumeAll+0x1c4>)
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	440b      	add	r3, r1
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	1c59      	adds	r1, r3, #1
 800134e:	4827      	ldr	r0, [pc, #156]	; (80013ec <xTaskResumeAll+0x1c4>)
 8001350:	4613      	mov	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4403      	add	r3, r0
 800135a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001360:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <xTaskResumeAll+0x1c8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001366:	429a      	cmp	r2, r3
 8001368:	d302      	bcc.n	8001370 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 800136a:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <xTaskResumeAll+0x1cc>)
 800136c:	2201      	movs	r2, #1
 800136e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001370:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <xTaskResumeAll+0x1bc>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	f47f af70 	bne.w	800125a <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001380:	f000 fb6a 	bl	8001a58 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001384:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <xTaskResumeAll+0x1d0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d010      	beq.n	80013b2 <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001390:	f000 f836 	bl	8001400 <xTaskIncrementTick>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d002      	beq.n	80013a0 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 800139a:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <xTaskResumeAll+0x1cc>)
 800139c:	2201      	movs	r2, #1
 800139e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1f1      	bne.n	8001390 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <xTaskResumeAll+0x1d0>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <xTaskResumeAll+0x1cc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d009      	beq.n	80013ce <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80013ba:	2301      	movs	r3, #1
 80013bc:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <xTaskResumeAll+0x1d4>)
 80013c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	f3bf 8f4f 	dsb	sy
 80013ca:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80013ce:	f7ff f987 	bl	80006e0 <vPortExitCritical>

    return xAlreadyYielded;
 80013d2:	693b      	ldr	r3, [r7, #16]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20002958 	.word	0x20002958
 80013e0:	20002930 	.word	0x20002930
 80013e4:	200028f0 	.word	0x200028f0
 80013e8:	20002938 	.word	0x20002938
 80013ec:	20002848 	.word	0x20002848
 80013f0:	20002844 	.word	0x20002844
 80013f4:	20002944 	.word	0x20002944
 80013f8:	20002940 	.word	0x20002940
 80013fc:	e000ed04 	.word	0xe000ed04

08001400 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800140a:	4b75      	ldr	r3, [pc, #468]	; (80015e0 <xTaskIncrementTick+0x1e0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	f040 80dc 	bne.w	80015cc <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001414:	4b73      	ldr	r3, [pc, #460]	; (80015e4 <xTaskIncrementTick+0x1e4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	3301      	adds	r3, #1
 800141a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800141c:	4a71      	ldr	r2, [pc, #452]	; (80015e4 <xTaskIncrementTick+0x1e4>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d110      	bne.n	800144a <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001428:	4b6f      	ldr	r3, [pc, #444]	; (80015e8 <xTaskIncrementTick+0x1e8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	4b6f      	ldr	r3, [pc, #444]	; (80015ec <xTaskIncrementTick+0x1ec>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a6d      	ldr	r2, [pc, #436]	; (80015e8 <xTaskIncrementTick+0x1e8>)
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	4a6d      	ldr	r2, [pc, #436]	; (80015ec <xTaskIncrementTick+0x1ec>)
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b6c      	ldr	r3, [pc, #432]	; (80015f0 <xTaskIncrementTick+0x1f0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	3301      	adds	r3, #1
 8001442:	4a6b      	ldr	r2, [pc, #428]	; (80015f0 <xTaskIncrementTick+0x1f0>)
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	f000 fb07 	bl	8001a58 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800144a:	4b6a      	ldr	r3, [pc, #424]	; (80015f4 <xTaskIncrementTick+0x1f4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	429a      	cmp	r2, r3
 8001452:	f0c0 80a6 	bcc.w	80015a2 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001456:	4b64      	ldr	r3, [pc, #400]	; (80015e8 <xTaskIncrementTick+0x1e8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d104      	bne.n	800146a <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001460:	4b64      	ldr	r3, [pc, #400]	; (80015f4 <xTaskIncrementTick+0x1f4>)
 8001462:	f04f 32ff 	mov.w	r2, #4294967295
 8001466:	601a      	str	r2, [r3, #0]
                    break;
 8001468:	e09b      	b.n	80015a2 <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800146a:	4b5f      	ldr	r3, [pc, #380]	; (80015e8 <xTaskIncrementTick+0x1e8>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	429a      	cmp	r2, r3
 8001480:	d203      	bcs.n	800148a <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001482:	4a5c      	ldr	r2, [pc, #368]	; (80015f4 <xTaskIncrementTick+0x1f4>)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001488:	e08b      	b.n	80015a2 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	68d2      	ldr	r2, [r2, #12]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	6892      	ldr	r2, [r2, #8]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	3304      	adds	r3, #4
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d103      	bne.n	80014b8 <xTaskIncrementTick+0xb8>
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	68da      	ldr	r2, [r3, #12]
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	2200      	movs	r2, #0
 80014bc:	615a      	str	r2, [r3, #20]
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	1e5a      	subs	r2, r3, #1
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d01e      	beq.n	800150e <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	6a12      	ldr	r2, [r2, #32]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	69d2      	ldr	r2, [r2, #28]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	3318      	adds	r3, #24
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d103      	bne.n	80014fe <xTaskIncrementTick+0xfe>
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	6a1a      	ldr	r2, [r3, #32]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	2200      	movs	r2, #0
 8001502:	629a      	str	r2, [r3, #40]	; 0x28
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	1e5a      	subs	r2, r3, #1
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001512:	2201      	movs	r2, #1
 8001514:	409a      	lsls	r2, r3
 8001516:	4b38      	ldr	r3, [pc, #224]	; (80015f8 <xTaskIncrementTick+0x1f8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4313      	orrs	r3, r2
 800151c:	4a36      	ldr	r2, [pc, #216]	; (80015f8 <xTaskIncrementTick+0x1f8>)
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001524:	4935      	ldr	r1, [pc, #212]	; (80015fc <xTaskIncrementTick+0x1fc>)
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	440b      	add	r3, r1
 8001530:	3304      	adds	r3, #4
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	603b      	str	r3, [r7, #0]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	3204      	adds	r2, #4
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1d1a      	adds	r2, r3, #4
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4a26      	ldr	r2, [pc, #152]	; (80015fc <xTaskIncrementTick+0x1fc>)
 8001564:	441a      	add	r2, r3
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	615a      	str	r2, [r3, #20]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800156e:	4923      	ldr	r1, [pc, #140]	; (80015fc <xTaskIncrementTick+0x1fc>)
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	1c59      	adds	r1, r3, #1
 800157e:	481f      	ldr	r0, [pc, #124]	; (80015fc <xTaskIncrementTick+0x1fc>)
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4403      	add	r3, r0
 800158a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <xTaskIncrementTick+0x200>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001596:	429a      	cmp	r2, r3
 8001598:	f67f af5d 	bls.w	8001456 <xTaskIncrementTick+0x56>
                        {
                            xSwitchRequired = pdTRUE;
 800159c:	2301      	movs	r3, #1
 800159e:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80015a0:	e759      	b.n	8001456 <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <xTaskIncrementTick+0x200>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015a8:	4914      	ldr	r1, [pc, #80]	; (80015fc <xTaskIncrementTick+0x1fc>)
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	440b      	add	r3, r1
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d901      	bls.n	80015be <xTaskIncrementTick+0x1be>
            {
                xSwitchRequired = pdTRUE;
 80015ba:	2301      	movs	r3, #1
 80015bc:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <xTaskIncrementTick+0x204>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d007      	beq.n	80015d6 <xTaskIncrementTick+0x1d6>
            {
                xSwitchRequired = pdTRUE;
 80015c6:	2301      	movs	r3, #1
 80015c8:	61fb      	str	r3, [r7, #28]
 80015ca:	e004      	b.n	80015d6 <xTaskIncrementTick+0x1d6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80015cc:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <xTaskIncrementTick+0x208>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	3301      	adds	r3, #1
 80015d2:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <xTaskIncrementTick+0x208>)
 80015d4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80015d6:	69fb      	ldr	r3, [r7, #28]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3720      	adds	r7, #32
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20002958 	.word	0x20002958
 80015e4:	20002934 	.word	0x20002934
 80015e8:	200028e8 	.word	0x200028e8
 80015ec:	200028ec 	.word	0x200028ec
 80015f0:	20002948 	.word	0x20002948
 80015f4:	20002950 	.word	0x20002950
 80015f8:	20002938 	.word	0x20002938
 80015fc:	20002848 	.word	0x20002848
 8001600:	20002844 	.word	0x20002844
 8001604:	20002944 	.word	0x20002944
 8001608:	20002940 	.word	0x20002940

0800160c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001612:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <vTaskSwitchContext+0x78>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800161a:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <vTaskSwitchContext+0x7c>)
 800161c:	2201      	movs	r2, #1
 800161e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001620:	e02a      	b.n	8001678 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <vTaskSwitchContext+0x7c>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001628:	4b18      	ldr	r3, [pc, #96]	; (800168c <vTaskSwitchContext+0x80>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	fab3 f383 	clz	r3, r3
 8001634:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	f1c3 031f 	rsb	r3, r3, #31
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4a11      	ldr	r2, [pc, #68]	; (8001690 <vTaskSwitchContext+0x84>)
 800164a:	4413      	add	r3, r2
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	3308      	adds	r3, #8
 8001660:	429a      	cmp	r2, r3
 8001662:	d104      	bne.n	800166e <vTaskSwitchContext+0x62>
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	4a07      	ldr	r2, [pc, #28]	; (8001694 <vTaskSwitchContext+0x88>)
 8001676:	6013      	str	r3, [r2, #0]
}
 8001678:	bf00      	nop
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	20002958 	.word	0x20002958
 8001688:	20002944 	.word	0x20002944
 800168c:	20002938 	.word	0x20002938
 8001690:	20002848 	.word	0x20002848
 8001694:	20002844 	.word	0x20002844

08001698 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80016a2:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <vTaskPlaceOnEventList+0x28>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3318      	adds	r3, #24
 80016a8:	4619      	mov	r1, r3
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7fe fe8d 	bl	80003ca <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80016b0:	2101      	movs	r1, #1
 80016b2:	6838      	ldr	r0, [r7, #0]
 80016b4:	f000 fa6c 	bl	8001b90 <prvAddCurrentTaskToDelayedList>
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20002844 	.word	0x20002844

080016c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	; 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	6a12      	ldr	r2, [r2, #32]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	69d2      	ldr	r2, [r2, #28]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	3318      	adds	r3, #24
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d103      	bne.n	8001702 <xTaskRemoveFromEventList+0x3e>
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	6a1a      	ldr	r2, [r3, #32]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	2200      	movs	r2, #0
 8001706:	629a      	str	r2, [r3, #40]	; 0x28
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	1e5a      	subs	r2, r3, #1
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001712:	4b4a      	ldr	r3, [pc, #296]	; (800183c <xTaskRemoveFromEventList+0x178>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d15e      	bne.n	80017d8 <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	68d2      	ldr	r2, [r2, #12]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	6892      	ldr	r2, [r2, #8]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	3304      	adds	r3, #4
 800173c:	429a      	cmp	r2, r3
 800173e:	d103      	bne.n	8001748 <xTaskRemoveFromEventList+0x84>
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	2200      	movs	r2, #0
 800174c:	615a      	str	r2, [r3, #20]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	1e5a      	subs	r2, r3, #1
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175c:	2201      	movs	r2, #1
 800175e:	409a      	lsls	r2, r3
 8001760:	4b37      	ldr	r3, [pc, #220]	; (8001840 <xTaskRemoveFromEventList+0x17c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4313      	orrs	r3, r2
 8001766:	4a36      	ldr	r2, [pc, #216]	; (8001840 <xTaskRemoveFromEventList+0x17c>)
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800176e:	4935      	ldr	r1, [pc, #212]	; (8001844 <xTaskRemoveFromEventList+0x180>)
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	3304      	adds	r3, #4
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	3204      	adds	r2, #4
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	1d1a      	adds	r2, r3, #4
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4a25      	ldr	r2, [pc, #148]	; (8001844 <xTaskRemoveFromEventList+0x180>)
 80017ae:	441a      	add	r2, r3
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	615a      	str	r2, [r3, #20]
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b8:	4922      	ldr	r1, [pc, #136]	; (8001844 <xTaskRemoveFromEventList+0x180>)
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	440b      	add	r3, r1
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	1c59      	adds	r1, r3, #1
 80017c8:	481e      	ldr	r0, [pc, #120]	; (8001844 <xTaskRemoveFromEventList+0x180>)
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4403      	add	r3, r0
 80017d4:	6019      	str	r1, [r3, #0]
 80017d6:	e01b      	b.n	8001810 <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <xTaskRemoveFromEventList+0x184>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	61da      	str	r2, [r3, #28]
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	621a      	str	r2, [r3, #32]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	3218      	adds	r2, #24
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	f103 0218 	add.w	r2, r3, #24
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	4a11      	ldr	r2, [pc, #68]	; (8001848 <xTaskRemoveFromEventList+0x184>)
 8001804:	629a      	str	r2, [r3, #40]	; 0x28
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <xTaskRemoveFromEventList+0x184>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	3301      	adds	r3, #1
 800180c:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <xTaskRemoveFromEventList+0x184>)
 800180e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001814:	4b0d      	ldr	r3, [pc, #52]	; (800184c <xTaskRemoveFromEventList+0x188>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	429a      	cmp	r2, r3
 800181c:	d905      	bls.n	800182a <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800181e:	2301      	movs	r3, #1
 8001820:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <xTaskRemoveFromEventList+0x18c>)
 8001824:	2201      	movs	r2, #1
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	e001      	b.n	800182e <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800182e:	69fb      	ldr	r3, [r7, #28]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3724      	adds	r7, #36	; 0x24
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20002958 	.word	0x20002958
 8001840:	20002938 	.word	0x20002938
 8001844:	20002848 	.word	0x20002848
 8001848:	200028f0 	.word	0x200028f0
 800184c:	20002844 	.word	0x20002844
 8001850:	20002944 	.word	0x20002944

08001854 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <vTaskInternalSetTimeOutState+0x24>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <vTaskInternalSetTimeOutState+0x28>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	605a      	str	r2, [r3, #4]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20002948 	.word	0x20002948
 800187c:	20002934 	.word	0x20002934

08001880 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 800188a:	f7fe ff0f 	bl	80006ac <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800188e:	4b1f      	ldr	r3, [pc, #124]	; (800190c <xTaskCheckForTimeOut+0x8c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a6:	d102      	bne.n	80018ae <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	e026      	b.n	80018fc <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4b17      	ldr	r3, [pc, #92]	; (8001910 <xTaskCheckForTimeOut+0x90>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d00a      	beq.n	80018d0 <xTaskCheckForTimeOut+0x50>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d305      	bcc.n	80018d0 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80018c4:	2301      	movs	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	e015      	b.n	80018fc <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d20b      	bcs.n	80018f2 <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1ad2      	subs	r2, r2, r3
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ffb4 	bl	8001854 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	e004      	b.n	80018fc <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80018f8:	2301      	movs	r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80018fc:	f7fe fef0 	bl	80006e0 <vPortExitCritical>

    return xReturn;
 8001900:	697b      	ldr	r3, [r7, #20]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20002934 	.word	0x20002934
 8001910:	20002948 	.word	0x20002948

08001914 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <vTaskMissedYield+0x14>)
 800191a:	2201      	movs	r2, #1
 800191c:	601a      	str	r2, [r3, #0]
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20002944 	.word	0x20002944

0800192c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001934:	f000 f852 	bl	80019dc <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <prvIdleTask+0x28>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d9f9      	bls.n	8001934 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <prvIdleTask+0x2c>)
 8001942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	f3bf 8f4f 	dsb	sy
 800194c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001950:	e7f0      	b.n	8001934 <prvIdleTask+0x8>
 8001952:	bf00      	nop
 8001954:	20002848 	.word	0x20002848
 8001958:	e000ed04 	.word	0xe000ed04

0800195c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001962:	2300      	movs	r3, #0
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	e00c      	b.n	8001982 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4a12      	ldr	r2, [pc, #72]	; (80019bc <prvInitialiseTaskLists+0x60>)
 8001974:	4413      	add	r3, r2
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fcfc 	bl	8000374 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3301      	adds	r3, #1
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b05      	cmp	r3, #5
 8001986:	d9ef      	bls.n	8001968 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001988:	480d      	ldr	r0, [pc, #52]	; (80019c0 <prvInitialiseTaskLists+0x64>)
 800198a:	f7fe fcf3 	bl	8000374 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800198e:	480d      	ldr	r0, [pc, #52]	; (80019c4 <prvInitialiseTaskLists+0x68>)
 8001990:	f7fe fcf0 	bl	8000374 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001994:	480c      	ldr	r0, [pc, #48]	; (80019c8 <prvInitialiseTaskLists+0x6c>)
 8001996:	f7fe fced 	bl	8000374 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800199a:	480c      	ldr	r0, [pc, #48]	; (80019cc <prvInitialiseTaskLists+0x70>)
 800199c:	f7fe fcea 	bl	8000374 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80019a0:	480b      	ldr	r0, [pc, #44]	; (80019d0 <prvInitialiseTaskLists+0x74>)
 80019a2:	f7fe fce7 	bl	8000374 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <prvInitialiseTaskLists+0x78>)
 80019a8:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <prvInitialiseTaskLists+0x64>)
 80019aa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <prvInitialiseTaskLists+0x7c>)
 80019ae:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <prvInitialiseTaskLists+0x68>)
 80019b0:	601a      	str	r2, [r3, #0]
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20002848 	.word	0x20002848
 80019c0:	200028c0 	.word	0x200028c0
 80019c4:	200028d4 	.word	0x200028d4
 80019c8:	200028f0 	.word	0x200028f0
 80019cc:	20002904 	.word	0x20002904
 80019d0:	2000291c 	.word	0x2000291c
 80019d4:	200028e8 	.word	0x200028e8
 80019d8:	200028ec 	.word	0x200028ec

080019dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80019e2:	e019      	b.n	8001a18 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80019e4:	f7fe fe62 	bl	80006ac <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019e8:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <prvCheckTasksWaitingTermination+0x50>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3304      	adds	r3, #4
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fd20 	bl	800043a <uxListRemove>
                --uxCurrentNumberOfTasks;
 80019fa:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <prvCheckTasksWaitingTermination+0x54>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	4a0b      	ldr	r2, [pc, #44]	; (8001a30 <prvCheckTasksWaitingTermination+0x54>)
 8001a02:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <prvCheckTasksWaitingTermination+0x58>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <prvCheckTasksWaitingTermination+0x58>)
 8001a0c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8001a0e:	f7fe fe67 	bl	80006e0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f810 	bl	8001a38 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <prvCheckTasksWaitingTermination+0x58>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1e1      	bne.n	80019e4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20002904 	.word	0x20002904
 8001a30:	20002930 	.word	0x20002930
 8001a34:	20002918 	.word	0x20002918

08001a38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fc21 	bl	800028c <vPortFree>
            vPortFree( pxTCB );
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7fe fc1e 	bl	800028c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <prvResetNextTaskUnblockTime+0x2c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d104      	bne.n	8001a70 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001a66:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <prvResetNextTaskUnblockTime+0x30>)
 8001a68:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001a6e:	e005      	b.n	8001a7c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001a70:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <prvResetNextTaskUnblockTime+0x2c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a03      	ldr	r2, [pc, #12]	; (8001a88 <prvResetNextTaskUnblockTime+0x30>)
 8001a7a:	6013      	str	r3, [r2, #0]
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	200028e8 	.word	0x200028e8
 8001a88:	20002950 	.word	0x20002950

08001a8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d06c      	beq.n	8001b7c <xTaskPriorityDisinherit+0xf0>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aa6:	1e5a      	subs	r2, r3, #1
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d061      	beq.n	8001b7c <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d15d      	bne.n	8001b7c <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fcb8 	bl	800043a <uxListRemove>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d10a      	bne.n	8001ae6 <xTaskPriorityDisinherit+0x5a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43da      	mvns	r2, r3
 8001adc:	4b2a      	ldr	r3, [pc, #168]	; (8001b88 <xTaskPriorityDisinherit+0xfc>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	4a29      	ldr	r2, [pc, #164]	; (8001b88 <xTaskPriorityDisinherit+0xfc>)
 8001ae4:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	f1c3 0206 	rsb	r2, r3, #6
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afe:	2201      	movs	r2, #1
 8001b00:	409a      	lsls	r2, r3
 8001b02:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <xTaskPriorityDisinherit+0xfc>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	4a1f      	ldr	r2, [pc, #124]	; (8001b88 <xTaskPriorityDisinherit+0xfc>)
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b10:	491e      	ldr	r1, [pc, #120]	; (8001b8c <xTaskPriorityDisinherit+0x100>)
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	60da      	str	r2, [r3, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	3204      	adds	r2, #4
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1d1a      	adds	r2, r3, #4
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4a0f      	ldr	r2, [pc, #60]	; (8001b8c <xTaskPriorityDisinherit+0x100>)
 8001b50:	441a      	add	r2, r3
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	615a      	str	r2, [r3, #20]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b5a:	490c      	ldr	r1, [pc, #48]	; (8001b8c <xTaskPriorityDisinherit+0x100>)
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	440b      	add	r3, r1
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	1c59      	adds	r1, r3, #1
 8001b6a:	4808      	ldr	r0, [pc, #32]	; (8001b8c <xTaskPriorityDisinherit+0x100>)
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4403      	add	r3, r0
 8001b76:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001b7c:	697b      	ldr	r3, [r7, #20]
    }
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20002938 	.word	0x20002938
 8001b8c:	20002848 	.word	0x20002848

08001b90 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001b9a:	4b36      	ldr	r3, [pc, #216]	; (8001c74 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ba0:	4b35      	ldr	r3, [pc, #212]	; (8001c78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fc47 	bl	800043a <uxListRemove>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10b      	bne.n	8001bca <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001bb2:	4b31      	ldr	r3, [pc, #196]	; (8001c78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb8:	2201      	movs	r2, #1
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43da      	mvns	r2, r3
 8001bc0:	4b2e      	ldr	r3, [pc, #184]	; (8001c7c <prvAddCurrentTaskToDelayedList+0xec>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	4a2d      	ldr	r2, [pc, #180]	; (8001c7c <prvAddCurrentTaskToDelayedList+0xec>)
 8001bc8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd0:	d124      	bne.n	8001c1c <prvAddCurrentTaskToDelayedList+0x8c>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d021      	beq.n	8001c1c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001bd8:	4b29      	ldr	r3, [pc, #164]	; (8001c80 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	6892      	ldr	r2, [r2, #8]
 8001bee:	60da      	str	r2, [r3, #12]
 8001bf0:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	3204      	adds	r2, #4
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	1d1a      	adds	r2, r3, #4
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a1d      	ldr	r2, [pc, #116]	; (8001c80 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001c0c:	615a      	str	r2, [r3, #20]
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	3301      	adds	r3, #1
 8001c14:	4a1a      	ldr	r2, [pc, #104]	; (8001c80 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001c1a:	e026      	b.n	8001c6a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d209      	bcs.n	8001c48 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c34:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4610      	mov	r0, r2
 8001c42:	f7fe fbc2 	bl	80003ca <vListInsert>
}
 8001c46:	e010      	b.n	8001c6a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c48:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	3304      	adds	r3, #4
 8001c52:	4619      	mov	r1, r3
 8001c54:	4610      	mov	r0, r2
 8001c56:	f7fe fbb8 	bl	80003ca <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d202      	bcs.n	8001c6a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001c64:	4a09      	ldr	r2, [pc, #36]	; (8001c8c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6013      	str	r3, [r2, #0]
}
 8001c6a:	bf00      	nop
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20002934 	.word	0x20002934
 8001c78:	20002844 	.word	0x20002844
 8001c7c:	20002938 	.word	0x20002938
 8001c80:	2000291c 	.word	0x2000291c
 8001c84:	200028ec 	.word	0x200028ec
 8001c88:	200028e8 	.word	0x200028e8
 8001c8c:	20002950 	.word	0x20002950

08001c90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c90:	f7ff f90a 	bl	8000ea8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c94:	480b      	ldr	r0, [pc, #44]	; (8001cc4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c96:	490c      	ldr	r1, [pc, #48]	; (8001cc8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c98:	4a0c      	ldr	r2, [pc, #48]	; (8001ccc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c9c:	e002      	b.n	8001ca4 <LoopCopyDataInit>

08001c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ca2:	3304      	adds	r3, #4

08001ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca8:	d3f9      	bcc.n	8001c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001caa:	4a09      	ldr	r2, [pc, #36]	; (8001cd0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cac:	4c09      	ldr	r4, [pc, #36]	; (8001cd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb0:	e001      	b.n	8001cb6 <LoopFillZerobss>

08001cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb4:	3204      	adds	r2, #4

08001cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb8:	d3fb      	bcc.n	8001cb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cba:	f000 f80f 	bl	8001cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cbe:	f7fe fbe5 	bl	800048c <main>
  bx lr
 8001cc2:	4770      	bx	lr
  ldr r0, =_sdata
 8001cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001ccc:	08001d9c 	.word	0x08001d9c
  ldr r2, =_sbss
 8001cd0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001cd4:	2000295c 	.word	0x2000295c

08001cd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cd8:	e7fe      	b.n	8001cd8 <ADC1_2_IRQHandler>
	...

08001cdc <__libc_init_array>:
 8001cdc:	b570      	push	{r4, r5, r6, lr}
 8001cde:	2600      	movs	r6, #0
 8001ce0:	4d0c      	ldr	r5, [pc, #48]	; (8001d14 <__libc_init_array+0x38>)
 8001ce2:	4c0d      	ldr	r4, [pc, #52]	; (8001d18 <__libc_init_array+0x3c>)
 8001ce4:	1b64      	subs	r4, r4, r5
 8001ce6:	10a4      	asrs	r4, r4, #2
 8001ce8:	42a6      	cmp	r6, r4
 8001cea:	d109      	bne.n	8001d00 <__libc_init_array+0x24>
 8001cec:	f000 f830 	bl	8001d50 <_init>
 8001cf0:	2600      	movs	r6, #0
 8001cf2:	4d0a      	ldr	r5, [pc, #40]	; (8001d1c <__libc_init_array+0x40>)
 8001cf4:	4c0a      	ldr	r4, [pc, #40]	; (8001d20 <__libc_init_array+0x44>)
 8001cf6:	1b64      	subs	r4, r4, r5
 8001cf8:	10a4      	asrs	r4, r4, #2
 8001cfa:	42a6      	cmp	r6, r4
 8001cfc:	d105      	bne.n	8001d0a <__libc_init_array+0x2e>
 8001cfe:	bd70      	pop	{r4, r5, r6, pc}
 8001d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d04:	4798      	blx	r3
 8001d06:	3601      	adds	r6, #1
 8001d08:	e7ee      	b.n	8001ce8 <__libc_init_array+0xc>
 8001d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d0e:	4798      	blx	r3
 8001d10:	3601      	adds	r6, #1
 8001d12:	e7f2      	b.n	8001cfa <__libc_init_array+0x1e>
 8001d14:	08001d94 	.word	0x08001d94
 8001d18:	08001d94 	.word	0x08001d94
 8001d1c:	08001d94 	.word	0x08001d94
 8001d20:	08001d98 	.word	0x08001d98

08001d24 <memcpy>:
 8001d24:	440a      	add	r2, r1
 8001d26:	4291      	cmp	r1, r2
 8001d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8001d2c:	d100      	bne.n	8001d30 <memcpy+0xc>
 8001d2e:	4770      	bx	lr
 8001d30:	b510      	push	{r4, lr}
 8001d32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001d36:	4291      	cmp	r1, r2
 8001d38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001d3c:	d1f9      	bne.n	8001d32 <memcpy+0xe>
 8001d3e:	bd10      	pop	{r4, pc}

08001d40 <memset>:
 8001d40:	4603      	mov	r3, r0
 8001d42:	4402      	add	r2, r0
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d100      	bne.n	8001d4a <memset+0xa>
 8001d48:	4770      	bx	lr
 8001d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8001d4e:	e7f9      	b.n	8001d44 <memset+0x4>

08001d50 <_init>:
 8001d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d52:	bf00      	nop
 8001d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d56:	bc08      	pop	{r3}
 8001d58:	469e      	mov	lr, r3
 8001d5a:	4770      	bx	lr

08001d5c <_fini>:
 8001d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d5e:	bf00      	nop
 8001d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d62:	bc08      	pop	{r3}
 8001d64:	469e      	mov	lr, r3
 8001d66:	4770      	bx	lr
