
Systick_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000021c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000328  08000330  00010330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000328  08000328  00010330  2**0
                  CONTENTS
  4 .ARM          00000000  08000328  08000328  00010330  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000328  08000330  00010330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000328  08000328  00010328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800032c  0800032c  0001032c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000330  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000330  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010330  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006c8  00000000  00000000  00010359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000374  00000000  00000000  00010a21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000100  00000000  00000000  00010d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b8  00000000  00000000  00010e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015206  00000000  00000000  00010f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ad9  00000000  00000000  00026156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007a94e  00000000  00000000  00027c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a257d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000234  00000000  00000000  000a25d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08000310 	.word	0x08000310

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08000310 	.word	0x08000310

0800014c <SysTick_Handler>:
static volatile uint32_t usTicks;

// SysTick_Handler function will be called every 1 ms
//8000000/8000=1000
void SysTick_Handler()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
    if (usTicks != 0)
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <SysTick_Handler+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b00      	cmp	r3, #0
 8000156:	d004      	beq.n	8000162 <SysTick_Handler+0x16>
    {
        usTicks--;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <SysTick_Handler+0x20>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	3b01      	subs	r3, #1
 800015e:	4a03      	ldr	r2, [pc, #12]	; (800016c <SysTick_Handler+0x20>)
 8000160:	6013      	str	r3, [r2, #0]
    }
}
 8000162:	bf00      	nop
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr
 800016a:	bf00      	nop
 800016c:	2000001c 	.word	0x2000001c

08000170 <DelayInit>:

void DelayInit()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
    // Update SystemCoreClock value
	SysTick->LOAD = (OSC / MILLIS_IN_SEC) -1;
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <DelayInit+0x1c>)
 8000176:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800017a:	605a      	str	r2, [r3, #4]

    // Configure the SysTick timer to overflow every 1 us
	//SysTick->CTRL = (1<<0) | (1<<1) | (1<<2);
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
 800017c:	4b03      	ldr	r3, [pc, #12]	; (800018c <DelayInit+0x1c>)
 800017e:	2207      	movs	r2, #7
 8000180:	601a      	str	r2, [r3, #0]

}
 8000182:	bf00      	nop
 8000184:	46bd      	mov	sp, r7
 8000186:	bc80      	pop	{r7}
 8000188:	4770      	bx	lr
 800018a:	bf00      	nop
 800018c:	e000e010 	.word	0xe000e010

08000190 <DelayUs>:

void DelayUs(uint32_t us)
{
 8000190:	b480      	push	{r7}
 8000192:	b083      	sub	sp, #12
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
    // Reload us value
    usTicks = us;
 8000198:	4a06      	ldr	r2, [pc, #24]	; (80001b4 <DelayUs+0x24>)
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	6013      	str	r3, [r2, #0]
    // Wait until usTick reach zero
    while (usTicks);
 800019e:	bf00      	nop
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <DelayUs+0x24>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d1fb      	bne.n	80001a0 <DelayUs+0x10>
}
 80001a8:	bf00      	nop
 80001aa:	bf00      	nop
 80001ac:	370c      	adds	r7, #12
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	2000001c 	.word	0x2000001c

080001b8 <DelayMs>:

void DelayMs(uint32_t ms)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
    // Wait until ms reach zero
    while (ms--)
 80001c0:	e002      	b.n	80001c8 <DelayMs+0x10>
    {
        // Delay 1ms
        DelayUs(1);
 80001c2:	2001      	movs	r0, #1
 80001c4:	f7ff ffe4 	bl	8000190 <DelayUs>
    while (ms--)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	1e5a      	subs	r2, r3, #1
 80001cc:	607a      	str	r2, [r7, #4]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d1f7      	bne.n	80001c2 <DelayMs+0xa>
    }
}
 80001d2:	bf00      	nop
 80001d4:	bf00      	nop
 80001d6:	3708      	adds	r7, #8
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}

080001dc <main>:

*/

#include "delay.h"
unsigned int counter;
int main(){
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= (1<<4); // Enable GPIOC
 80001e0:	4b10      	ldr	r3, [pc, #64]	; (8000224 <main+0x48>)
 80001e2:	699b      	ldr	r3, [r3, #24]
 80001e4:	4a0f      	ldr	r2, [pc, #60]	; (8000224 <main+0x48>)
 80001e6:	f043 0310 	orr.w	r3, r3, #16
 80001ea:	6193      	str	r3, [r2, #24]
	GPIOC->CRH=0x33333333;
 80001ec:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <main+0x4c>)
 80001ee:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80001f2:	605a      	str	r2, [r3, #4]
	DelayInit();
 80001f4:	f7ff ffbc 	bl	8000170 <DelayInit>

	while(1){

	 	GPIOC->ODR &=~(1<<13);
 80001f8:	4b0b      	ldr	r3, [pc, #44]	; (8000228 <main+0x4c>)
 80001fa:	68db      	ldr	r3, [r3, #12]
 80001fc:	4a0a      	ldr	r2, [pc, #40]	; (8000228 <main+0x4c>)
 80001fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000202:	60d3      	str	r3, [r2, #12]
	 	DelayMs(1000);
 8000204:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000208:	f7ff ffd6 	bl	80001b8 <DelayMs>
		GPIOC->ODR |=(1<<13);
 800020c:	4b06      	ldr	r3, [pc, #24]	; (8000228 <main+0x4c>)
 800020e:	68db      	ldr	r3, [r3, #12]
 8000210:	4a05      	ldr	r2, [pc, #20]	; (8000228 <main+0x4c>)
 8000212:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000216:	60d3      	str	r3, [r2, #12]
		DelayMs(1000);
 8000218:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800021c:	f7ff ffcc 	bl	80001b8 <DelayMs>
	 	GPIOC->ODR &=~(1<<13);
 8000220:	e7ea      	b.n	80001f8 <main+0x1c>
 8000222:	bf00      	nop
 8000224:	40021000 	.word	0x40021000
 8000228:	40011000 	.word	0x40011000

0800022c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000230:	e7fe      	b.n	8000230 <NMI_Handler+0x4>

08000232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000232:	b480      	push	{r7}
 8000234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000236:	e7fe      	b.n	8000236 <HardFault_Handler+0x4>

08000238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800023c:	e7fe      	b.n	800023c <MemManage_Handler+0x4>

0800023e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800023e:	b480      	push	{r7}
 8000240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000242:	e7fe      	b.n	8000242 <BusFault_Handler+0x4>

08000244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000248:	e7fe      	b.n	8000248 <UsageFault_Handler+0x4>

0800024a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800024a:	b480      	push	{r7}
 800024c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800024e:	bf00      	nop
 8000250:	46bd      	mov	sp, r7
 8000252:	bc80      	pop	{r7}
 8000254:	4770      	bx	lr

08000256 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000256:	b480      	push	{r7}
 8000258:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800025a:	bf00      	nop
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr

08000262 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000262:	b480      	push	{r7}
 8000264:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000266:	bf00      	nop
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr

0800026e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800026e:	b480      	push	{r7}
 8000270:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000272:	bf00      	nop
 8000274:	46bd      	mov	sp, r7
 8000276:	bc80      	pop	{r7}
 8000278:	4770      	bx	lr
	...

0800027c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800027c:	480c      	ldr	r0, [pc, #48]	; (80002b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800027e:	490d      	ldr	r1, [pc, #52]	; (80002b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000280:	4a0d      	ldr	r2, [pc, #52]	; (80002b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000284:	e002      	b.n	800028c <LoopCopyDataInit>

08000286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800028a:	3304      	adds	r3, #4

0800028c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800028c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800028e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000290:	d3f9      	bcc.n	8000286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000292:	4a0a      	ldr	r2, [pc, #40]	; (80002bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000294:	4c0a      	ldr	r4, [pc, #40]	; (80002c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000298:	e001      	b.n	800029e <LoopFillZerobss>

0800029a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800029a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800029c:	3204      	adds	r2, #4

0800029e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800029e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a0:	d3fb      	bcc.n	800029a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80002a2:	f7ff ffe4 	bl	800026e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002a6:	f000 f80f 	bl	80002c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002aa:	f7ff ff97 	bl	80001dc <main>
  bx lr
 80002ae:	4770      	bx	lr
  ldr r0, =_sdata
 80002b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b8:	08000330 	.word	0x08000330
  ldr r2, =_sbss
 80002bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c0:	20000020 	.word	0x20000020

080002c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c4:	e7fe      	b.n	80002c4 <ADC1_2_IRQHandler>
	...

080002c8 <__libc_init_array>:
 80002c8:	b570      	push	{r4, r5, r6, lr}
 80002ca:	2600      	movs	r6, #0
 80002cc:	4d0c      	ldr	r5, [pc, #48]	; (8000300 <__libc_init_array+0x38>)
 80002ce:	4c0d      	ldr	r4, [pc, #52]	; (8000304 <__libc_init_array+0x3c>)
 80002d0:	1b64      	subs	r4, r4, r5
 80002d2:	10a4      	asrs	r4, r4, #2
 80002d4:	42a6      	cmp	r6, r4
 80002d6:	d109      	bne.n	80002ec <__libc_init_array+0x24>
 80002d8:	f000 f81a 	bl	8000310 <_init>
 80002dc:	2600      	movs	r6, #0
 80002de:	4d0a      	ldr	r5, [pc, #40]	; (8000308 <__libc_init_array+0x40>)
 80002e0:	4c0a      	ldr	r4, [pc, #40]	; (800030c <__libc_init_array+0x44>)
 80002e2:	1b64      	subs	r4, r4, r5
 80002e4:	10a4      	asrs	r4, r4, #2
 80002e6:	42a6      	cmp	r6, r4
 80002e8:	d105      	bne.n	80002f6 <__libc_init_array+0x2e>
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80002f0:	4798      	blx	r3
 80002f2:	3601      	adds	r6, #1
 80002f4:	e7ee      	b.n	80002d4 <__libc_init_array+0xc>
 80002f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002fa:	4798      	blx	r3
 80002fc:	3601      	adds	r6, #1
 80002fe:	e7f2      	b.n	80002e6 <__libc_init_array+0x1e>
 8000300:	08000328 	.word	0x08000328
 8000304:	08000328 	.word	0x08000328
 8000308:	08000328 	.word	0x08000328
 800030c:	0800032c 	.word	0x0800032c

08000310 <_init>:
 8000310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000312:	bf00      	nop
 8000314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000316:	bc08      	pop	{r3}
 8000318:	469e      	mov	lr, r3
 800031a:	4770      	bx	lr

0800031c <_fini>:
 800031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031e:	bf00      	nop
 8000320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000322:	bc08      	pop	{r3}
 8000324:	469e      	mov	lr, r3
 8000326:	4770      	bx	lr
