
RemoteController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001358  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001464  08001464  00011464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014a4  080014a4  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080014a4  080014a4  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080014a4  080014a4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014a4  080014a4  000114a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080014a8  080014a8  000114a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080014ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000068  08001514  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08001514  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000038db  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a75  00000000  00000000  0002396c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000240  00000000  00000000  000243e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001e8  00000000  00000000  00024628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017612  00000000  00000000  00024810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000310a  00000000  00000000  0003be22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083bbb  00000000  00000000  0003ef2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c2ae7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c34  00000000  00000000  000c2b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	0800144c 	.word	0x0800144c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	0800144c 	.word	0x0800144c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_d2uiz>:
 80004c4:	004a      	lsls	r2, r1, #1
 80004c6:	d211      	bcs.n	80004ec <__aeabi_d2uiz+0x28>
 80004c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80004cc:	d211      	bcs.n	80004f2 <__aeabi_d2uiz+0x2e>
 80004ce:	d50d      	bpl.n	80004ec <__aeabi_d2uiz+0x28>
 80004d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80004d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80004d8:	d40e      	bmi.n	80004f8 <__aeabi_d2uiz+0x34>
 80004da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80004de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80004e6:	fa23 f002 	lsr.w	r0, r3, r2
 80004ea:	4770      	bx	lr
 80004ec:	f04f 0000 	mov.w	r0, #0
 80004f0:	4770      	bx	lr
 80004f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80004f6:	d102      	bne.n	80004fe <__aeabi_d2uiz+0x3a>
 80004f8:	f04f 30ff 	mov.w	r0, #4294967295
 80004fc:	4770      	bx	lr
 80004fe:	f04f 0000 	mov.w	r0, #0
 8000502:	4770      	bx	lr

08000504 <_ZN3ADCC1Ev>:
	{
		ADC_1 = ADC1_BASE,
		ADC_2 = ADC2_BASE,
	};

	ADC()
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	{
		if(this == reinterpret_cast<ADC*>(ADCInstance::ADC_1))
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a09      	ldr	r2, [pc, #36]	; (8000534 <_ZN3ADCC1Ev+0x30>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d103      	bne.n	800051c <_ZN3ADCC1Ev+0x18>
		{
			ADC1_Init();
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f000 f81d 	bl	8000554 <_ZN3ADC9ADC1_InitEv>
 800051a:	e006      	b.n	800052a <_ZN3ADCC1Ev+0x26>
		}
		else if(this == reinterpret_cast<ADC*>(ADCInstance::ADC_2))
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4a06      	ldr	r2, [pc, #24]	; (8000538 <_ZN3ADCC1Ev+0x34>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d102      	bne.n	800052a <_ZN3ADCC1Ev+0x26>
		{
			ADC2_Init();
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f000 f88d 	bl	8000644 <_ZN3ADC9ADC2_InitEv>
		}
	}
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4618      	mov	r0, r3
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40012400 	.word	0x40012400
 8000538:	40012800 	.word	0x40012800

0800053c <_ZN3ADCnwEjNS_11ADCInstanceE>:

	//placement new
	void* operator new(size_t, ADCInstance adc)
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
	{
		return reinterpret_cast<void*>(adc);
 8000546:	683b      	ldr	r3, [r7, #0]
	}
 8000548:	4618      	mov	r0, r3
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr
	...

08000554 <_ZN3ADC9ADC1_InitEv>:
	//ADC init
	void ADC1_Init()
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	{
		//MODE:CFG Input=00 : Analog=00
		GPIOA->CRL=0x44444400;
 800055c:	4b35      	ldr	r3, [pc, #212]	; (8000634 <_ZN3ADC9ADC1_InitEv+0xe0>)
 800055e:	4a36      	ldr	r2, [pc, #216]	; (8000638 <_ZN3ADC9ADC1_InitEv+0xe4>)
 8000560:	601a      	str	r2, [r3, #0]
		//ADC configure clock to 14Mhz
		RCC-> CFGR &= ~(3<<14);	//ensure ADCPRE is zero
 8000562:	4b36      	ldr	r3, [pc, #216]	; (800063c <_ZN3ADC9ADC1_InitEv+0xe8>)
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	4a35      	ldr	r2, [pc, #212]	; (800063c <_ZN3ADC9ADC1_InitEv+0xe8>)
 8000568:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800056c:	6053      	str	r3, [r2, #4]
		RCC-> CFGR |= (2<<14);  //14mHZ
 800056e:	4b33      	ldr	r3, [pc, #204]	; (800063c <_ZN3ADC9ADC1_InitEv+0xe8>)
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	4a32      	ldr	r2, [pc, #200]	; (800063c <_ZN3ADC9ADC1_InitEv+0xe8>)
 8000574:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000578:	6053      	str	r3, [r2, #4]

		//A1configure pin for ADC as an input alternate
		//select Reqular Group from Control Register

		// Select the required Channel ADC12_IN1
		 SQR1|=0x00000180;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800057e:	f443 72c0 	orr.w	r2, r3, #384	; 0x180
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	62da      	str	r2, [r3, #44]	; 0x2c
		 SQR2|=0;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	631a      	str	r2, [r3, #48]	; 0x30
		 SQR3|=0x00000001;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000592:	f043 0201 	orr.w	r2, r3, #1
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	635a      	str	r2, [r3, #52]	; 0x34
		//Sampling Time Selection ADC12_IN1 = PA1
		 SMPR1|=(6<<0);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	f043 0206 	orr.w	r2, r3, #6
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	60da      	str	r2, [r3, #12]

		 CR2 |= (7<<17);	//select SWSTART as trigger
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	f443 2260 	orr.w	r2, r3, #917504	; 0xe0000
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	609a      	str	r2, [r3, #8]
		 CR2 |= (1<<20);	//enable external trigger -
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	609a      	str	r2, [r3, #8]

		//Right Alignment
		 CR2 &= ~(1<<11);	//right alignment -
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	609a      	str	r2, [r3, #8]

		 CR2 |= (1<<1);	//continuous conversion
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	689b      	ldr	r3, [r3, #8]
 80005ce:	f043 0202 	orr.w	r2, r3, #2
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	609a      	str	r2, [r3, #8]
		//adc on
	    CR2 |= (1<<0);	//ADC on
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	f043 0201 	orr.w	r2, r3, #1
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	609a      	str	r2, [r3, #8]

		 CR2 |= (1<<3);	// Reset calibration
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	689b      	ldr	r3, [r3, #8]
 80005e6:	f043 0208 	orr.w	r2, r3, #8
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	609a      	str	r2, [r3, #8]
		while (ADC1->CR2 & (1<<3));	// wait until reset finished
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <_ZN3ADC9ADC1_InitEv+0xec>)
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	f003 0308 	and.w	r3, r3, #8
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	bf14      	ite	ne
 80005fa:	2301      	movne	r3, #1
 80005fc:	2300      	moveq	r3, #0
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b00      	cmp	r3, #0
 8000602:	d000      	beq.n	8000606 <_ZN3ADC9ADC1_InitEv+0xb2>
 8000604:	e7f3      	b.n	80005ee <_ZN3ADC9ADC1_InitEv+0x9a>
	    CR2 |= (1<<2);	// start calibration
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	f043 0204 	orr.w	r2, r3, #4
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	609a      	str	r2, [r3, #8]
	   while ( CR2 & (1<<2));	// wait unt
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	f003 0304 	and.w	r3, r3, #4
 800061a:	2b00      	cmp	r3, #0
 800061c:	bf14      	ite	ne
 800061e:	2301      	movne	r3, #1
 8000620:	2300      	moveq	r3, #0
 8000622:	b2db      	uxtb	r3, r3
 8000624:	2b00      	cmp	r3, #0
 8000626:	d000      	beq.n	800062a <_ZN3ADC9ADC1_InitEv+0xd6>
 8000628:	e7f3      	b.n	8000612 <_ZN3ADC9ADC1_InitEv+0xbe>
	}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	40010800 	.word	0x40010800
 8000638:	44444400 	.word	0x44444400
 800063c:	40021000 	.word	0x40021000
 8000640:	40012400 	.word	0x40012400

08000644 <_ZN3ADC9ADC2_InitEv>:

	void ADC2_Init()
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	{
		//MODE:CFG Input=00 : Analog=00
		GPIOA->CRL|=0x44444400;
 800064c:	4b37      	ldr	r3, [pc, #220]	; (800072c <_ZN3ADC9ADC2_InitEv+0xe8>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a36      	ldr	r2, [pc, #216]	; (800072c <_ZN3ADC9ADC2_InitEv+0xe8>)
 8000652:	f043 2344 	orr.w	r3, r3, #1140868096	; 0x44004400
 8000656:	f443 0388 	orr.w	r3, r3, #4456448	; 0x440000
 800065a:	6013      	str	r3, [r2, #0]
		//ADC configure clock to 14Mhz
		RCC-> CFGR &= ~(3<<14);	//ensure ADCPRE is zero
 800065c:	4b34      	ldr	r3, [pc, #208]	; (8000730 <_ZN3ADC9ADC2_InitEv+0xec>)
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	4a33      	ldr	r2, [pc, #204]	; (8000730 <_ZN3ADC9ADC2_InitEv+0xec>)
 8000662:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000666:	6053      	str	r3, [r2, #4]
		RCC-> CFGR |= (2<<14);  //14mHZ
 8000668:	4b31      	ldr	r3, [pc, #196]	; (8000730 <_ZN3ADC9ADC2_InitEv+0xec>)
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	4a30      	ldr	r2, [pc, #192]	; (8000730 <_ZN3ADC9ADC2_InitEv+0xec>)
 800066e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000672:	6053      	str	r3, [r2, #4]

		//A1configure pin for ADC as an input alternate
		//select Reqular Group from Control Register

		// Select the required Channel ADC12_IN0
		 SQR1|=0x00000180;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000678:	f443 72c0 	orr.w	r2, r3, #384	; 0x180
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	62da      	str	r2, [r3, #44]	; 0x2c
		 SQR2|=0;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	631a      	str	r2, [r3, #48]	; 0x30
		 SQR3|=0x00000000;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	635a      	str	r2, [r3, #52]	; 0x34
		//Sampling Time Selection ADC12_IN0 = PA0 @ 1.5 cycles
		 SMPR1|=(6<<0);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	f043 0206 	orr.w	r2, r3, #6
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	60da      	str	r2, [r3, #12]

		 CR2 |= (7<<17);	//select SWSTART as trigger
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	f443 2260 	orr.w	r2, r3, #917504	; 0xe0000
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	609a      	str	r2, [r3, #8]
		 CR2 |= (1<<20);	//enable external trigger -
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	609a      	str	r2, [r3, #8]

		//Right Alignment
		 CR2 &= ~(1<<11);	//right alignment -
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	609a      	str	r2, [r3, #8]

		 CR2 |= (1<<1);	//continuous conversion
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	f043 0202 	orr.w	r2, r3, #2
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	609a      	str	r2, [r3, #8]
		//adc on
		 CR2 |= (1<<0);	//ADC on
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	f043 0201 	orr.w	r2, r3, #1
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	609a      	str	r2, [r3, #8]

		 CR2 |= (1<<3);	// Reset calibration
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	f043 0208 	orr.w	r2, r3, #8
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	609a      	str	r2, [r3, #8]
		while ( CR2 & (1<<3));	// wait until reset finished
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	f003 0308 	and.w	r3, r3, #8
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	bf14      	ite	ne
 80006f0:	2301      	movne	r3, #1
 80006f2:	2300      	moveq	r3, #0
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d000      	beq.n	80006fc <_ZN3ADC9ADC2_InitEv+0xb8>
 80006fa:	e7f3      	b.n	80006e4 <_ZN3ADC9ADC2_InitEv+0xa0>
		 CR2 |= (1<<2);	// start calibration
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	f043 0204 	orr.w	r2, r3, #4
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	609a      	str	r2, [r3, #8]
		while ( CR2 & (1<<2));	// wait until calibration finished
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	f003 0304 	and.w	r3, r3, #4
 8000710:	2b00      	cmp	r3, #0
 8000712:	bf14      	ite	ne
 8000714:	2301      	movne	r3, #1
 8000716:	2300      	moveq	r3, #0
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d000      	beq.n	8000720 <_ZN3ADC9ADC2_InitEv+0xdc>
 800071e:	e7f3      	b.n	8000708 <_ZN3ADC9ADC2_InitEv+0xc4>
	}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	40010800 	.word	0x40010800
 8000730:	40021000 	.word	0x40021000

08000734 <_ZN3ADC8ADC_ReadEv>:
	//ADC Read
	int ADC_Read()
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	{
		static int ADC_value=0;
		CR2 |= (1<<22); // start SW conversion
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	689b      	ldr	r3, [r3, #8]
 8000740:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	609a      	str	r2, [r3, #8]
		while (!(SR & (1<<1)));	//EOC
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f003 0302 	and.w	r3, r3, #2
 8000750:	2b00      	cmp	r3, #0
 8000752:	bf0c      	ite	eq
 8000754:	2301      	moveq	r3, #1
 8000756:	2300      	movne	r3, #0
 8000758:	b2db      	uxtb	r3, r3
 800075a:	2b00      	cmp	r3, #0
 800075c:	d000      	beq.n	8000760 <_ZN3ADC8ADC_ReadEv+0x2c>
 800075e:	e7f3      	b.n	8000748 <_ZN3ADC8ADC_ReadEv+0x14>
		ADC_value =  DR;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000764:	461a      	mov	r2, r3
 8000766:	4b07      	ldr	r3, [pc, #28]	; (8000784 <_ZN3ADC8ADC_ReadEv+0x50>)
 8000768:	601a      	str	r2, [r3, #0]
		//reset EOC Flag
		SR &= ~(1<<1);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f023 0202 	bic.w	r2, r3, #2
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	601a      	str	r2, [r3, #0]
		return ADC_value;
 8000776:	4b03      	ldr	r3, [pc, #12]	; (8000784 <_ZN3ADC8ADC_ReadEv+0x50>)
 8000778:	681b      	ldr	r3, [r3, #0]
	}
 800077a:	4618      	mov	r0, r3
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	20000084 	.word	0x20000084

08000788 <_ZN5USARTC1Ev>:

	enum core
	{
		clock = 8000000
	};
	USART()
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	{
		if(this == reinterpret_cast<USART*>(Usart1))
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <_ZN5USARTC1Ev+0x44>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d113      	bne.n	80007c0 <_ZN5USARTC1Ev+0x38>
		{
			//Initialize USART1
		   //Enable clock for AFIO, USART1 and GPIOA
			RCC->APB2ENR = (1<<0) | (1<< 2) | (1<<14);
 8000798:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <_ZN5USARTC1Ev+0x48>)
 800079a:	f244 0205 	movw	r2, #16389	; 0x4005
 800079e:	619a      	str	r2, [r3, #24]

			//PA9 is Open-Drain for Transmission and PA10 is input floating
			GPIOA->CRH = (0x0B<<4) | (4<<8);
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <_ZN5USARTC1Ev+0x4c>)
 80007a2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80007a6:	605a      	str	r2, [r3, #4]

			//PA1 led is Output for Blue LED
			GPIOA->CRL = (3<<4);
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <_ZN5USARTC1Ev+0x4c>)
 80007aa:	2230      	movs	r2, #48	; 0x30
 80007ac:	601a      	str	r2, [r3, #0]

			//Enable RE and TE from CR1 , M=0
			 CR1 = (1<<2) | (1<< 3);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	220c      	movs	r2, #12
 80007b2:	60da      	str	r2, [r3, #12]

			//Enable USART through UE
			CR1 |= (1<<13);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	60da      	str	r2, [r3, #12]


		}
	}
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4618      	mov	r0, r3
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	40013800 	.word	0x40013800
 80007d0:	40021000 	.word	0x40021000
 80007d4:	40010800 	.word	0x40010800

080007d8 <_ZN5USARTnwEjNS_12UsartIntanceE>:

	void * operator new (size_t, UsartIntance usart)
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]
	{
		return reinterpret_cast<void *>(usart);
 80007e2:	683b      	ldr	r3, [r7, #0]
	}
 80007e4:	4618      	mov	r0, r3
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
	...

080007f0 <_ZN5USART11setBaudRateENS_4BaudE>:
	//setters and getters for

	//set baud rate
	void setBaudRate(Baud baud)
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
	{
		//Baud rate = 9600
		double ubrr  = core::clock /baud;
 80007fa:	4a0b      	ldr	r2, [pc, #44]	; (8000828 <_ZN5USART11setBaudRateENS_4BaudE+0x38>)
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fde4 	bl	80003d0 <__aeabi_ui2d>
 8000808:	4602      	mov	r2, r0
 800080a:	460b      	mov	r3, r1
 800080c:	e9c7 2302 	strd	r2, r3, [r7, #8]
		BRR = ubrr ;
 8000810:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000814:	f7ff fe56 	bl	80004c4 <__aeabi_d2uiz>
 8000818:	4602      	mov	r2, r0
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	609a      	str	r2, [r3, #8]
	}
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	007a1200 	.word	0x007a1200

0800082c <_ZN5USART4sendEc>:
	{
		while(!(SR & (1<<5)));
		return DR & 0x00FF;
	}

	void send(char data)
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	460b      	mov	r3, r1
 8000836:	70fb      	strb	r3, [r7, #3]
	{
		DR = data;
 8000838:	78fa      	ldrb	r2, [r7, #3]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	605a      	str	r2, [r3, #4]
		while(!(SR & (1<<6)));
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000846:	2b00      	cmp	r3, #0
 8000848:	bf0c      	ite	eq
 800084a:	2301      	moveq	r3, #1
 800084c:	2300      	movne	r3, #0
 800084e:	b2db      	uxtb	r3, r3
 8000850:	2b00      	cmp	r3, #0
 8000852:	d000      	beq.n	8000856 <_ZN5USART4sendEc+0x2a>
 8000854:	e7f3      	b.n	800083e <_ZN5USART4sendEc+0x12>
	}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <_ZN5USART10sendStringEPc>:

	void sendString(char *str)
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
	{
		int i = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
		while(str[i] != '\0')
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	683a      	ldr	r2, [r7, #0]
 8000872:	4413      	add	r3, r2
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d00b      	beq.n	8000892 <_ZN5USART10sendStringEPc+0x32>
		{
			send(str[i]);
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	683a      	ldr	r2, [r7, #0]
 800087e:	4413      	add	r3, r2
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	4619      	mov	r1, r3
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff ffd1 	bl	800082c <_ZN5USART4sendEc>
			i++;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	3301      	adds	r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
		while(str[i] != '\0')
 8000890:	e7ed      	b.n	800086e <_ZN5USART10sendStringEPc+0xe>
		}
	}
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <_Z8Clock_72v>:
#define BAUD 9600
#include "adc.h"
#include "usart.h"
#include <string>
void Clock_72()
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
	FLASH->ACR	= 0x12;	//See note
 80008a0:	4b24      	ldr	r3, [pc, #144]	; (8000934 <_Z8Clock_72v+0x98>)
 80008a2:	2212      	movs	r2, #18
 80008a4:	601a      	str	r2, [r3, #0]
	RCC->CR |= 1<<16;	//HSE on
 80008a6:	4b24      	ldr	r3, [pc, #144]	; (8000938 <_Z8Clock_72v+0x9c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a23      	ldr	r2, [pc, #140]	; (8000938 <_Z8Clock_72v+0x9c>)
 80008ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008b0:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & (1<<17)));	//wait until HSE ready
 80008b2:	4b21      	ldr	r3, [pc, #132]	; (8000938 <_Z8Clock_72v+0x9c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	bf0c      	ite	eq
 80008be:	2301      	moveq	r3, #1
 80008c0:	2300      	movne	r3, #0
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d000      	beq.n	80008ca <_Z8Clock_72v+0x2e>
 80008c8:	e7f3      	b.n	80008b2 <_Z8Clock_72v+0x16>
	//  RCC->CFGR2 = 3<<4;	//Predev2 divide by 8 -->8MHz
	RCC->CR |= 1<<26;	//PLL2 on
 80008ca:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <_Z8Clock_72v+0x9c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a1a      	ldr	r2, [pc, #104]	; (8000938 <_Z8Clock_72v+0x9c>)
 80008d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80008d4:	6013      	str	r3, [r2, #0]
	RCC->CFGR |= (1<<16);
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <_Z8Clock_72v+0x9c>)
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	4a17      	ldr	r2, [pc, #92]	; (8000938 <_Z8Clock_72v+0x9c>)
 80008dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008e0:	6053      	str	r3, [r2, #4]
	//  RCC->CFGR2 |= 3<<8;	//PLL2 multiply by 8->40MHz
	RCC->CFGR |= 7<<18;	// mult by 9	--->72MHz
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <_Z8Clock_72v+0x9c>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	4a14      	ldr	r2, [pc, #80]	; (8000938 <_Z8Clock_72v+0x9c>)
 80008e8:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80008ec:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= 1<<10;	//APB1 = 36MHz. See bus clocks.
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <_Z8Clock_72v+0x9c>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	4a11      	ldr	r2, [pc, #68]	; (8000938 <_Z8Clock_72v+0x9c>)
 80008f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008f8:	6053      	str	r3, [r2, #4]
	RCC->CR |= 1<<24;	//enable PLL
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <_Z8Clock_72v+0x9c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <_Z8Clock_72v+0x9c>)
 8000900:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000904:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & (1<<25)));	//wait until locked
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <_Z8Clock_72v+0x9c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800090e:	2b00      	cmp	r3, #0
 8000910:	bf0c      	ite	eq
 8000912:	2301      	moveq	r3, #1
 8000914:	2300      	movne	r3, #0
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	d000      	beq.n	800091e <_Z8Clock_72v+0x82>
 800091c:	e7f3      	b.n	8000906 <_Z8Clock_72v+0x6a>
	RCC->CFGR |= 2;	//PLL as clock source
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <_Z8Clock_72v+0x9c>)
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	4a05      	ldr	r2, [pc, #20]	; (8000938 <_Z8Clock_72v+0x9c>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6053      	str	r3, [r2, #4]
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40022000 	.word	0x40022000
 8000938:	40021000 	.word	0x40021000

0800093c <main>:

int main()
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b08b      	sub	sp, #44	; 0x2c
 8000940:	af00      	add	r7, sp, #0

	Clock_72();
 8000942:	f7ff ffab 	bl	800089c <_Z8Clock_72v>

	ADC & joystic_x = *new(ADC::ADC_1) ADC;
 8000946:	491c      	ldr	r1, [pc, #112]	; (80009b8 <main+0x7c>)
 8000948:	2050      	movs	r0, #80	; 0x50
 800094a:	f7ff fdf7 	bl	800053c <_ZN3ADCnwEjNS_11ADCInstanceE>
 800094e:	4604      	mov	r4, r0
 8000950:	4620      	mov	r0, r4
 8000952:	f7ff fdd7 	bl	8000504 <_ZN3ADCC1Ev>
 8000956:	627c      	str	r4, [r7, #36]	; 0x24
	ADC & joystic_y = *new(ADC::ADC_2) ADC;
 8000958:	4918      	ldr	r1, [pc, #96]	; (80009bc <main+0x80>)
 800095a:	2050      	movs	r0, #80	; 0x50
 800095c:	f7ff fdee 	bl	800053c <_ZN3ADCnwEjNS_11ADCInstanceE>
 8000960:	4604      	mov	r4, r0
 8000962:	4620      	mov	r0, r4
 8000964:	f7ff fdce 	bl	8000504 <_ZN3ADCC1Ev>
 8000968:	623c      	str	r4, [r7, #32]

    USART &ttl = *new(USART::Usart1) USART;
 800096a:	4915      	ldr	r1, [pc, #84]	; (80009c0 <main+0x84>)
 800096c:	201c      	movs	r0, #28
 800096e:	f7ff ff33 	bl	80007d8 <_ZN5USARTnwEjNS_12UsartIntanceE>
 8000972:	4604      	mov	r4, r0
 8000974:	4620      	mov	r0, r4
 8000976:	f7ff ff07 	bl	8000788 <_ZN5USARTC1Ev>
 800097a:	61fc      	str	r4, [r7, #28]
    ttl.setBaudRate(USART::baud_9600);
 800097c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8000980:	69f8      	ldr	r0, [r7, #28]
 8000982:	f7ff ff35 	bl	80007f0 <_ZN5USART11setBaudRateENS_4BaudE>
    char buffer[20];
    while(1)
    {
    	//read joustic X axis
    	int x_axis = joystic_x.ADC_Read();
 8000986:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000988:	f7ff fed4 	bl	8000734 <_ZN3ADC8ADC_ReadEv>
 800098c:	61b8      	str	r0, [r7, #24]
    	//read Joystic Y Axis
    	int y_axis = joystic_y.ADC_Read();
 800098e:	6a38      	ldr	r0, [r7, #32]
 8000990:	f7ff fed0 	bl	8000734 <_ZN3ADC8ADC_ReadEv>
 8000994:	6178      	str	r0, [r7, #20]

    	//combine readings and convert into ascii string
    	sprintf(buffer , "%d%d",x_axis, y_axis);
 8000996:	4638      	mov	r0, r7
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	69ba      	ldr	r2, [r7, #24]
 800099c:	4909      	ldr	r1, [pc, #36]	; (80009c4 <main+0x88>)
 800099e:	f000 f8db 	bl	8000b58 <siprintf>
    	//send over USART
    	ttl.sendString(buffer);
 80009a2:	463b      	mov	r3, r7
 80009a4:	4619      	mov	r1, r3
 80009a6:	69f8      	ldr	r0, [r7, #28]
 80009a8:	f7ff ff5a 	bl	8000860 <_ZN5USART10sendStringEPc>
    	ttl.sendString("\r\n");
 80009ac:	4906      	ldr	r1, [pc, #24]	; (80009c8 <main+0x8c>)
 80009ae:	69f8      	ldr	r0, [r7, #28]
 80009b0:	f7ff ff56 	bl	8000860 <_ZN5USART10sendStringEPc>

    }
 80009b4:	e7e7      	b.n	8000986 <main+0x4a>
 80009b6:	bf00      	nop
 80009b8:	40012400 	.word	0x40012400
 80009bc:	40012800 	.word	0x40012800
 80009c0:	40013800 	.word	0x40013800
 80009c4:	08001464 	.word	0x08001464
 80009c8:	0800146c 	.word	0x0800146c

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <NMI_Handler+0x4>

080009d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <MemManage_Handler+0x4>

080009de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr

080009f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr

08000a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr

08000a0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a12:	f000 f865 	bl	8000ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a24:	4a14      	ldr	r2, [pc, #80]	; (8000a78 <_sbrk+0x5c>)
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <_sbrk+0x60>)
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <_sbrk+0x64>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d102      	bne.n	8000a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <_sbrk+0x64>)
 8000a3a:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <_sbrk+0x68>)
 8000a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d207      	bcs.n	8000a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a4c:	f000 f85a 	bl	8000b04 <__errno>
 8000a50:	4603      	mov	r3, r0
 8000a52:	220c      	movs	r2, #12
 8000a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a56:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5a:	e009      	b.n	8000a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <_sbrk+0x64>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a62:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <_sbrk+0x64>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <_sbrk+0x64>)
 8000a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20005000 	.word	0x20005000
 8000a7c:	00000400 	.word	0x00000400
 8000a80:	20000088 	.word	0x20000088
 8000a84:	200000a0 	.word	0x200000a0

08000a88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr

08000a94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a94:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a96:	490d      	ldr	r1, [pc, #52]	; (8000acc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a98:	4a0d      	ldr	r2, [pc, #52]	; (8000ad0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a9c:	e002      	b.n	8000aa4 <LoopCopyDataInit>

08000a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa2:	3304      	adds	r3, #4

08000aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa8:	d3f9      	bcc.n	8000a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000aac:	4c0a      	ldr	r4, [pc, #40]	; (8000ad8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab0:	e001      	b.n	8000ab6 <LoopFillZerobss>

08000ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab4:	3204      	adds	r2, #4

08000ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab8:	d3fb      	bcc.n	8000ab2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000aba:	f7ff ffe5 	bl	8000a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000abe:	f000 f827 	bl	8000b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ac2:	f7ff ff3b 	bl	800093c <main>
  bx lr
 8000ac6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000acc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ad0:	080014ac 	.word	0x080014ac
  ldr r2, =_sbss
 8000ad4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ad8:	200000a0 	.word	0x200000a0

08000adc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000adc:	e7fe      	b.n	8000adc <ADC1_2_IRQHandler>
	...

08000ae0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_IncTick+0x1c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_IncTick+0x20>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	4a03      	ldr	r2, [pc, #12]	; (8000b00 <HAL_IncTick+0x20>)
 8000af2:	6013      	str	r3, [r2, #0]
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	20000000 	.word	0x20000000
 8000b00:	2000008c 	.word	0x2000008c

08000b04 <__errno>:
 8000b04:	4b01      	ldr	r3, [pc, #4]	; (8000b0c <__errno+0x8>)
 8000b06:	6818      	ldr	r0, [r3, #0]
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000004 	.word	0x20000004

08000b10 <__libc_init_array>:
 8000b10:	b570      	push	{r4, r5, r6, lr}
 8000b12:	2600      	movs	r6, #0
 8000b14:	4d0c      	ldr	r5, [pc, #48]	; (8000b48 <__libc_init_array+0x38>)
 8000b16:	4c0d      	ldr	r4, [pc, #52]	; (8000b4c <__libc_init_array+0x3c>)
 8000b18:	1b64      	subs	r4, r4, r5
 8000b1a:	10a4      	asrs	r4, r4, #2
 8000b1c:	42a6      	cmp	r6, r4
 8000b1e:	d109      	bne.n	8000b34 <__libc_init_array+0x24>
 8000b20:	f000 fc94 	bl	800144c <_init>
 8000b24:	2600      	movs	r6, #0
 8000b26:	4d0a      	ldr	r5, [pc, #40]	; (8000b50 <__libc_init_array+0x40>)
 8000b28:	4c0a      	ldr	r4, [pc, #40]	; (8000b54 <__libc_init_array+0x44>)
 8000b2a:	1b64      	subs	r4, r4, r5
 8000b2c:	10a4      	asrs	r4, r4, #2
 8000b2e:	42a6      	cmp	r6, r4
 8000b30:	d105      	bne.n	8000b3e <__libc_init_array+0x2e>
 8000b32:	bd70      	pop	{r4, r5, r6, pc}
 8000b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b38:	4798      	blx	r3
 8000b3a:	3601      	adds	r6, #1
 8000b3c:	e7ee      	b.n	8000b1c <__libc_init_array+0xc>
 8000b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b42:	4798      	blx	r3
 8000b44:	3601      	adds	r6, #1
 8000b46:	e7f2      	b.n	8000b2e <__libc_init_array+0x1e>
 8000b48:	080014a4 	.word	0x080014a4
 8000b4c:	080014a4 	.word	0x080014a4
 8000b50:	080014a4 	.word	0x080014a4
 8000b54:	080014a8 	.word	0x080014a8

08000b58 <siprintf>:
 8000b58:	b40e      	push	{r1, r2, r3}
 8000b5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000b5e:	b500      	push	{lr}
 8000b60:	b09c      	sub	sp, #112	; 0x70
 8000b62:	ab1d      	add	r3, sp, #116	; 0x74
 8000b64:	9002      	str	r0, [sp, #8]
 8000b66:	9006      	str	r0, [sp, #24]
 8000b68:	9107      	str	r1, [sp, #28]
 8000b6a:	9104      	str	r1, [sp, #16]
 8000b6c:	4808      	ldr	r0, [pc, #32]	; (8000b90 <siprintf+0x38>)
 8000b6e:	4909      	ldr	r1, [pc, #36]	; (8000b94 <siprintf+0x3c>)
 8000b70:	f853 2b04 	ldr.w	r2, [r3], #4
 8000b74:	9105      	str	r1, [sp, #20]
 8000b76:	6800      	ldr	r0, [r0, #0]
 8000b78:	a902      	add	r1, sp, #8
 8000b7a:	9301      	str	r3, [sp, #4]
 8000b7c:	f000 f868 	bl	8000c50 <_svfiprintf_r>
 8000b80:	2200      	movs	r2, #0
 8000b82:	9b02      	ldr	r3, [sp, #8]
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	b01c      	add	sp, #112	; 0x70
 8000b88:	f85d eb04 	ldr.w	lr, [sp], #4
 8000b8c:	b003      	add	sp, #12
 8000b8e:	4770      	bx	lr
 8000b90:	20000004 	.word	0x20000004
 8000b94:	ffff0208 	.word	0xffff0208

08000b98 <__ssputs_r>:
 8000b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b9c:	688e      	ldr	r6, [r1, #8]
 8000b9e:	4682      	mov	sl, r0
 8000ba0:	429e      	cmp	r6, r3
 8000ba2:	460c      	mov	r4, r1
 8000ba4:	4690      	mov	r8, r2
 8000ba6:	461f      	mov	r7, r3
 8000ba8:	d838      	bhi.n	8000c1c <__ssputs_r+0x84>
 8000baa:	898a      	ldrh	r2, [r1, #12]
 8000bac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000bb0:	d032      	beq.n	8000c18 <__ssputs_r+0x80>
 8000bb2:	6825      	ldr	r5, [r4, #0]
 8000bb4:	6909      	ldr	r1, [r1, #16]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	eba5 0901 	sub.w	r9, r5, r1
 8000bbc:	6965      	ldr	r5, [r4, #20]
 8000bbe:	444b      	add	r3, r9
 8000bc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000bc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000bc8:	106d      	asrs	r5, r5, #1
 8000bca:	429d      	cmp	r5, r3
 8000bcc:	bf38      	it	cc
 8000bce:	461d      	movcc	r5, r3
 8000bd0:	0553      	lsls	r3, r2, #21
 8000bd2:	d531      	bpl.n	8000c38 <__ssputs_r+0xa0>
 8000bd4:	4629      	mov	r1, r5
 8000bd6:	f000 fb6f 	bl	80012b8 <_malloc_r>
 8000bda:	4606      	mov	r6, r0
 8000bdc:	b950      	cbnz	r0, 8000bf4 <__ssputs_r+0x5c>
 8000bde:	230c      	movs	r3, #12
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	f8ca 3000 	str.w	r3, [sl]
 8000be8:	89a3      	ldrh	r3, [r4, #12]
 8000bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bee:	81a3      	strh	r3, [r4, #12]
 8000bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf4:	464a      	mov	r2, r9
 8000bf6:	6921      	ldr	r1, [r4, #16]
 8000bf8:	f000 face 	bl	8001198 <memcpy>
 8000bfc:	89a3      	ldrh	r3, [r4, #12]
 8000bfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c06:	81a3      	strh	r3, [r4, #12]
 8000c08:	6126      	str	r6, [r4, #16]
 8000c0a:	444e      	add	r6, r9
 8000c0c:	6026      	str	r6, [r4, #0]
 8000c0e:	463e      	mov	r6, r7
 8000c10:	6165      	str	r5, [r4, #20]
 8000c12:	eba5 0509 	sub.w	r5, r5, r9
 8000c16:	60a5      	str	r5, [r4, #8]
 8000c18:	42be      	cmp	r6, r7
 8000c1a:	d900      	bls.n	8000c1e <__ssputs_r+0x86>
 8000c1c:	463e      	mov	r6, r7
 8000c1e:	4632      	mov	r2, r6
 8000c20:	4641      	mov	r1, r8
 8000c22:	6820      	ldr	r0, [r4, #0]
 8000c24:	f000 fac6 	bl	80011b4 <memmove>
 8000c28:	68a3      	ldr	r3, [r4, #8]
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	1b9b      	subs	r3, r3, r6
 8000c2e:	60a3      	str	r3, [r4, #8]
 8000c30:	6823      	ldr	r3, [r4, #0]
 8000c32:	4433      	add	r3, r6
 8000c34:	6023      	str	r3, [r4, #0]
 8000c36:	e7db      	b.n	8000bf0 <__ssputs_r+0x58>
 8000c38:	462a      	mov	r2, r5
 8000c3a:	f000 fbb1 	bl	80013a0 <_realloc_r>
 8000c3e:	4606      	mov	r6, r0
 8000c40:	2800      	cmp	r0, #0
 8000c42:	d1e1      	bne.n	8000c08 <__ssputs_r+0x70>
 8000c44:	4650      	mov	r0, sl
 8000c46:	6921      	ldr	r1, [r4, #16]
 8000c48:	f000 face 	bl	80011e8 <_free_r>
 8000c4c:	e7c7      	b.n	8000bde <__ssputs_r+0x46>
	...

08000c50 <_svfiprintf_r>:
 8000c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c54:	4698      	mov	r8, r3
 8000c56:	898b      	ldrh	r3, [r1, #12]
 8000c58:	4607      	mov	r7, r0
 8000c5a:	061b      	lsls	r3, r3, #24
 8000c5c:	460d      	mov	r5, r1
 8000c5e:	4614      	mov	r4, r2
 8000c60:	b09d      	sub	sp, #116	; 0x74
 8000c62:	d50e      	bpl.n	8000c82 <_svfiprintf_r+0x32>
 8000c64:	690b      	ldr	r3, [r1, #16]
 8000c66:	b963      	cbnz	r3, 8000c82 <_svfiprintf_r+0x32>
 8000c68:	2140      	movs	r1, #64	; 0x40
 8000c6a:	f000 fb25 	bl	80012b8 <_malloc_r>
 8000c6e:	6028      	str	r0, [r5, #0]
 8000c70:	6128      	str	r0, [r5, #16]
 8000c72:	b920      	cbnz	r0, 8000c7e <_svfiprintf_r+0x2e>
 8000c74:	230c      	movs	r3, #12
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7c:	e0d1      	b.n	8000e22 <_svfiprintf_r+0x1d2>
 8000c7e:	2340      	movs	r3, #64	; 0x40
 8000c80:	616b      	str	r3, [r5, #20]
 8000c82:	2300      	movs	r3, #0
 8000c84:	9309      	str	r3, [sp, #36]	; 0x24
 8000c86:	2320      	movs	r3, #32
 8000c88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000c8c:	2330      	movs	r3, #48	; 0x30
 8000c8e:	f04f 0901 	mov.w	r9, #1
 8000c92:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c96:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8000e3c <_svfiprintf_r+0x1ec>
 8000c9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000c9e:	4623      	mov	r3, r4
 8000ca0:	469a      	mov	sl, r3
 8000ca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ca6:	b10a      	cbz	r2, 8000cac <_svfiprintf_r+0x5c>
 8000ca8:	2a25      	cmp	r2, #37	; 0x25
 8000caa:	d1f9      	bne.n	8000ca0 <_svfiprintf_r+0x50>
 8000cac:	ebba 0b04 	subs.w	fp, sl, r4
 8000cb0:	d00b      	beq.n	8000cca <_svfiprintf_r+0x7a>
 8000cb2:	465b      	mov	r3, fp
 8000cb4:	4622      	mov	r2, r4
 8000cb6:	4629      	mov	r1, r5
 8000cb8:	4638      	mov	r0, r7
 8000cba:	f7ff ff6d 	bl	8000b98 <__ssputs_r>
 8000cbe:	3001      	adds	r0, #1
 8000cc0:	f000 80aa 	beq.w	8000e18 <_svfiprintf_r+0x1c8>
 8000cc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000cc6:	445a      	add	r2, fp
 8000cc8:	9209      	str	r2, [sp, #36]	; 0x24
 8000cca:	f89a 3000 	ldrb.w	r3, [sl]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f000 80a2 	beq.w	8000e18 <_svfiprintf_r+0x1c8>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8000cda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000cde:	f10a 0a01 	add.w	sl, sl, #1
 8000ce2:	9304      	str	r3, [sp, #16]
 8000ce4:	9307      	str	r3, [sp, #28]
 8000ce6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000cea:	931a      	str	r3, [sp, #104]	; 0x68
 8000cec:	4654      	mov	r4, sl
 8000cee:	2205      	movs	r2, #5
 8000cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cf4:	4851      	ldr	r0, [pc, #324]	; (8000e3c <_svfiprintf_r+0x1ec>)
 8000cf6:	f000 fa41 	bl	800117c <memchr>
 8000cfa:	9a04      	ldr	r2, [sp, #16]
 8000cfc:	b9d8      	cbnz	r0, 8000d36 <_svfiprintf_r+0xe6>
 8000cfe:	06d0      	lsls	r0, r2, #27
 8000d00:	bf44      	itt	mi
 8000d02:	2320      	movmi	r3, #32
 8000d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d08:	0711      	lsls	r1, r2, #28
 8000d0a:	bf44      	itt	mi
 8000d0c:	232b      	movmi	r3, #43	; 0x2b
 8000d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d12:	f89a 3000 	ldrb.w	r3, [sl]
 8000d16:	2b2a      	cmp	r3, #42	; 0x2a
 8000d18:	d015      	beq.n	8000d46 <_svfiprintf_r+0xf6>
 8000d1a:	4654      	mov	r4, sl
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f04f 0c0a 	mov.w	ip, #10
 8000d22:	9a07      	ldr	r2, [sp, #28]
 8000d24:	4621      	mov	r1, r4
 8000d26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d2a:	3b30      	subs	r3, #48	; 0x30
 8000d2c:	2b09      	cmp	r3, #9
 8000d2e:	d94e      	bls.n	8000dce <_svfiprintf_r+0x17e>
 8000d30:	b1b0      	cbz	r0, 8000d60 <_svfiprintf_r+0x110>
 8000d32:	9207      	str	r2, [sp, #28]
 8000d34:	e014      	b.n	8000d60 <_svfiprintf_r+0x110>
 8000d36:	eba0 0308 	sub.w	r3, r0, r8
 8000d3a:	fa09 f303 	lsl.w	r3, r9, r3
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	46a2      	mov	sl, r4
 8000d42:	9304      	str	r3, [sp, #16]
 8000d44:	e7d2      	b.n	8000cec <_svfiprintf_r+0x9c>
 8000d46:	9b03      	ldr	r3, [sp, #12]
 8000d48:	1d19      	adds	r1, r3, #4
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	9103      	str	r1, [sp, #12]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	bfbb      	ittet	lt
 8000d52:	425b      	neglt	r3, r3
 8000d54:	f042 0202 	orrlt.w	r2, r2, #2
 8000d58:	9307      	strge	r3, [sp, #28]
 8000d5a:	9307      	strlt	r3, [sp, #28]
 8000d5c:	bfb8      	it	lt
 8000d5e:	9204      	strlt	r2, [sp, #16]
 8000d60:	7823      	ldrb	r3, [r4, #0]
 8000d62:	2b2e      	cmp	r3, #46	; 0x2e
 8000d64:	d10c      	bne.n	8000d80 <_svfiprintf_r+0x130>
 8000d66:	7863      	ldrb	r3, [r4, #1]
 8000d68:	2b2a      	cmp	r3, #42	; 0x2a
 8000d6a:	d135      	bne.n	8000dd8 <_svfiprintf_r+0x188>
 8000d6c:	9b03      	ldr	r3, [sp, #12]
 8000d6e:	3402      	adds	r4, #2
 8000d70:	1d1a      	adds	r2, r3, #4
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	9203      	str	r2, [sp, #12]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	bfb8      	it	lt
 8000d7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8000d7e:	9305      	str	r3, [sp, #20]
 8000d80:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8000e40 <_svfiprintf_r+0x1f0>
 8000d84:	2203      	movs	r2, #3
 8000d86:	4650      	mov	r0, sl
 8000d88:	7821      	ldrb	r1, [r4, #0]
 8000d8a:	f000 f9f7 	bl	800117c <memchr>
 8000d8e:	b140      	cbz	r0, 8000da2 <_svfiprintf_r+0x152>
 8000d90:	2340      	movs	r3, #64	; 0x40
 8000d92:	eba0 000a 	sub.w	r0, r0, sl
 8000d96:	fa03 f000 	lsl.w	r0, r3, r0
 8000d9a:	9b04      	ldr	r3, [sp, #16]
 8000d9c:	3401      	adds	r4, #1
 8000d9e:	4303      	orrs	r3, r0
 8000da0:	9304      	str	r3, [sp, #16]
 8000da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000da6:	2206      	movs	r2, #6
 8000da8:	4826      	ldr	r0, [pc, #152]	; (8000e44 <_svfiprintf_r+0x1f4>)
 8000daa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000dae:	f000 f9e5 	bl	800117c <memchr>
 8000db2:	2800      	cmp	r0, #0
 8000db4:	d038      	beq.n	8000e28 <_svfiprintf_r+0x1d8>
 8000db6:	4b24      	ldr	r3, [pc, #144]	; (8000e48 <_svfiprintf_r+0x1f8>)
 8000db8:	bb1b      	cbnz	r3, 8000e02 <_svfiprintf_r+0x1b2>
 8000dba:	9b03      	ldr	r3, [sp, #12]
 8000dbc:	3307      	adds	r3, #7
 8000dbe:	f023 0307 	bic.w	r3, r3, #7
 8000dc2:	3308      	adds	r3, #8
 8000dc4:	9303      	str	r3, [sp, #12]
 8000dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000dc8:	4433      	add	r3, r6
 8000dca:	9309      	str	r3, [sp, #36]	; 0x24
 8000dcc:	e767      	b.n	8000c9e <_svfiprintf_r+0x4e>
 8000dce:	460c      	mov	r4, r1
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8000dd6:	e7a5      	b.n	8000d24 <_svfiprintf_r+0xd4>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f04f 0c0a 	mov.w	ip, #10
 8000dde:	4619      	mov	r1, r3
 8000de0:	3401      	adds	r4, #1
 8000de2:	9305      	str	r3, [sp, #20]
 8000de4:	4620      	mov	r0, r4
 8000de6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000dea:	3a30      	subs	r2, #48	; 0x30
 8000dec:	2a09      	cmp	r2, #9
 8000dee:	d903      	bls.n	8000df8 <_svfiprintf_r+0x1a8>
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d0c5      	beq.n	8000d80 <_svfiprintf_r+0x130>
 8000df4:	9105      	str	r1, [sp, #20]
 8000df6:	e7c3      	b.n	8000d80 <_svfiprintf_r+0x130>
 8000df8:	4604      	mov	r4, r0
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e00:	e7f0      	b.n	8000de4 <_svfiprintf_r+0x194>
 8000e02:	ab03      	add	r3, sp, #12
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	462a      	mov	r2, r5
 8000e08:	4638      	mov	r0, r7
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <_svfiprintf_r+0x1fc>)
 8000e0c:	a904      	add	r1, sp, #16
 8000e0e:	f3af 8000 	nop.w
 8000e12:	1c42      	adds	r2, r0, #1
 8000e14:	4606      	mov	r6, r0
 8000e16:	d1d6      	bne.n	8000dc6 <_svfiprintf_r+0x176>
 8000e18:	89ab      	ldrh	r3, [r5, #12]
 8000e1a:	065b      	lsls	r3, r3, #25
 8000e1c:	f53f af2c 	bmi.w	8000c78 <_svfiprintf_r+0x28>
 8000e20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000e22:	b01d      	add	sp, #116	; 0x74
 8000e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e28:	ab03      	add	r3, sp, #12
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	462a      	mov	r2, r5
 8000e2e:	4638      	mov	r0, r7
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <_svfiprintf_r+0x1fc>)
 8000e32:	a904      	add	r1, sp, #16
 8000e34:	f000 f87c 	bl	8000f30 <_printf_i>
 8000e38:	e7eb      	b.n	8000e12 <_svfiprintf_r+0x1c2>
 8000e3a:	bf00      	nop
 8000e3c:	0800146f 	.word	0x0800146f
 8000e40:	08001475 	.word	0x08001475
 8000e44:	08001479 	.word	0x08001479
 8000e48:	00000000 	.word	0x00000000
 8000e4c:	08000b99 	.word	0x08000b99

08000e50 <_printf_common>:
 8000e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e54:	4616      	mov	r6, r2
 8000e56:	4699      	mov	r9, r3
 8000e58:	688a      	ldr	r2, [r1, #8]
 8000e5a:	690b      	ldr	r3, [r1, #16]
 8000e5c:	4607      	mov	r7, r0
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	bfb8      	it	lt
 8000e62:	4613      	movlt	r3, r2
 8000e64:	6033      	str	r3, [r6, #0]
 8000e66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000e6a:	460c      	mov	r4, r1
 8000e6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000e70:	b10a      	cbz	r2, 8000e76 <_printf_common+0x26>
 8000e72:	3301      	adds	r3, #1
 8000e74:	6033      	str	r3, [r6, #0]
 8000e76:	6823      	ldr	r3, [r4, #0]
 8000e78:	0699      	lsls	r1, r3, #26
 8000e7a:	bf42      	ittt	mi
 8000e7c:	6833      	ldrmi	r3, [r6, #0]
 8000e7e:	3302      	addmi	r3, #2
 8000e80:	6033      	strmi	r3, [r6, #0]
 8000e82:	6825      	ldr	r5, [r4, #0]
 8000e84:	f015 0506 	ands.w	r5, r5, #6
 8000e88:	d106      	bne.n	8000e98 <_printf_common+0x48>
 8000e8a:	f104 0a19 	add.w	sl, r4, #25
 8000e8e:	68e3      	ldr	r3, [r4, #12]
 8000e90:	6832      	ldr	r2, [r6, #0]
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	42ab      	cmp	r3, r5
 8000e96:	dc28      	bgt.n	8000eea <_printf_common+0x9a>
 8000e98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000e9c:	1e13      	subs	r3, r2, #0
 8000e9e:	6822      	ldr	r2, [r4, #0]
 8000ea0:	bf18      	it	ne
 8000ea2:	2301      	movne	r3, #1
 8000ea4:	0692      	lsls	r2, r2, #26
 8000ea6:	d42d      	bmi.n	8000f04 <_printf_common+0xb4>
 8000ea8:	4649      	mov	r1, r9
 8000eaa:	4638      	mov	r0, r7
 8000eac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000eb0:	47c0      	blx	r8
 8000eb2:	3001      	adds	r0, #1
 8000eb4:	d020      	beq.n	8000ef8 <_printf_common+0xa8>
 8000eb6:	6823      	ldr	r3, [r4, #0]
 8000eb8:	68e5      	ldr	r5, [r4, #12]
 8000eba:	f003 0306 	and.w	r3, r3, #6
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	bf18      	it	ne
 8000ec2:	2500      	movne	r5, #0
 8000ec4:	6832      	ldr	r2, [r6, #0]
 8000ec6:	f04f 0600 	mov.w	r6, #0
 8000eca:	68a3      	ldr	r3, [r4, #8]
 8000ecc:	bf08      	it	eq
 8000ece:	1aad      	subeq	r5, r5, r2
 8000ed0:	6922      	ldr	r2, [r4, #16]
 8000ed2:	bf08      	it	eq
 8000ed4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	bfc4      	itt	gt
 8000edc:	1a9b      	subgt	r3, r3, r2
 8000ede:	18ed      	addgt	r5, r5, r3
 8000ee0:	341a      	adds	r4, #26
 8000ee2:	42b5      	cmp	r5, r6
 8000ee4:	d11a      	bne.n	8000f1c <_printf_common+0xcc>
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	e008      	b.n	8000efc <_printf_common+0xac>
 8000eea:	2301      	movs	r3, #1
 8000eec:	4652      	mov	r2, sl
 8000eee:	4649      	mov	r1, r9
 8000ef0:	4638      	mov	r0, r7
 8000ef2:	47c0      	blx	r8
 8000ef4:	3001      	adds	r0, #1
 8000ef6:	d103      	bne.n	8000f00 <_printf_common+0xb0>
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f00:	3501      	adds	r5, #1
 8000f02:	e7c4      	b.n	8000e8e <_printf_common+0x3e>
 8000f04:	2030      	movs	r0, #48	; 0x30
 8000f06:	18e1      	adds	r1, r4, r3
 8000f08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000f0c:	1c5a      	adds	r2, r3, #1
 8000f0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000f12:	4422      	add	r2, r4
 8000f14:	3302      	adds	r3, #2
 8000f16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000f1a:	e7c5      	b.n	8000ea8 <_printf_common+0x58>
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	4622      	mov	r2, r4
 8000f20:	4649      	mov	r1, r9
 8000f22:	4638      	mov	r0, r7
 8000f24:	47c0      	blx	r8
 8000f26:	3001      	adds	r0, #1
 8000f28:	d0e6      	beq.n	8000ef8 <_printf_common+0xa8>
 8000f2a:	3601      	adds	r6, #1
 8000f2c:	e7d9      	b.n	8000ee2 <_printf_common+0x92>
	...

08000f30 <_printf_i>:
 8000f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f34:	7e0f      	ldrb	r7, [r1, #24]
 8000f36:	4691      	mov	r9, r2
 8000f38:	2f78      	cmp	r7, #120	; 0x78
 8000f3a:	4680      	mov	r8, r0
 8000f3c:	460c      	mov	r4, r1
 8000f3e:	469a      	mov	sl, r3
 8000f40:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000f42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000f46:	d807      	bhi.n	8000f58 <_printf_i+0x28>
 8000f48:	2f62      	cmp	r7, #98	; 0x62
 8000f4a:	d80a      	bhi.n	8000f62 <_printf_i+0x32>
 8000f4c:	2f00      	cmp	r7, #0
 8000f4e:	f000 80d9 	beq.w	8001104 <_printf_i+0x1d4>
 8000f52:	2f58      	cmp	r7, #88	; 0x58
 8000f54:	f000 80a4 	beq.w	80010a0 <_printf_i+0x170>
 8000f58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000f60:	e03a      	b.n	8000fd8 <_printf_i+0xa8>
 8000f62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000f66:	2b15      	cmp	r3, #21
 8000f68:	d8f6      	bhi.n	8000f58 <_printf_i+0x28>
 8000f6a:	a101      	add	r1, pc, #4	; (adr r1, 8000f70 <_printf_i+0x40>)
 8000f6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f70:	08000fc9 	.word	0x08000fc9
 8000f74:	08000fdd 	.word	0x08000fdd
 8000f78:	08000f59 	.word	0x08000f59
 8000f7c:	08000f59 	.word	0x08000f59
 8000f80:	08000f59 	.word	0x08000f59
 8000f84:	08000f59 	.word	0x08000f59
 8000f88:	08000fdd 	.word	0x08000fdd
 8000f8c:	08000f59 	.word	0x08000f59
 8000f90:	08000f59 	.word	0x08000f59
 8000f94:	08000f59 	.word	0x08000f59
 8000f98:	08000f59 	.word	0x08000f59
 8000f9c:	080010eb 	.word	0x080010eb
 8000fa0:	0800100d 	.word	0x0800100d
 8000fa4:	080010cd 	.word	0x080010cd
 8000fa8:	08000f59 	.word	0x08000f59
 8000fac:	08000f59 	.word	0x08000f59
 8000fb0:	0800110d 	.word	0x0800110d
 8000fb4:	08000f59 	.word	0x08000f59
 8000fb8:	0800100d 	.word	0x0800100d
 8000fbc:	08000f59 	.word	0x08000f59
 8000fc0:	08000f59 	.word	0x08000f59
 8000fc4:	080010d5 	.word	0x080010d5
 8000fc8:	682b      	ldr	r3, [r5, #0]
 8000fca:	1d1a      	adds	r2, r3, #4
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	602a      	str	r2, [r5, #0]
 8000fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000fd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e0a4      	b.n	8001126 <_printf_i+0x1f6>
 8000fdc:	6820      	ldr	r0, [r4, #0]
 8000fde:	6829      	ldr	r1, [r5, #0]
 8000fe0:	0606      	lsls	r6, r0, #24
 8000fe2:	f101 0304 	add.w	r3, r1, #4
 8000fe6:	d50a      	bpl.n	8000ffe <_printf_i+0xce>
 8000fe8:	680e      	ldr	r6, [r1, #0]
 8000fea:	602b      	str	r3, [r5, #0]
 8000fec:	2e00      	cmp	r6, #0
 8000fee:	da03      	bge.n	8000ff8 <_printf_i+0xc8>
 8000ff0:	232d      	movs	r3, #45	; 0x2d
 8000ff2:	4276      	negs	r6, r6
 8000ff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000ff8:	230a      	movs	r3, #10
 8000ffa:	485e      	ldr	r0, [pc, #376]	; (8001174 <_printf_i+0x244>)
 8000ffc:	e019      	b.n	8001032 <_printf_i+0x102>
 8000ffe:	680e      	ldr	r6, [r1, #0]
 8001000:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001004:	602b      	str	r3, [r5, #0]
 8001006:	bf18      	it	ne
 8001008:	b236      	sxthne	r6, r6
 800100a:	e7ef      	b.n	8000fec <_printf_i+0xbc>
 800100c:	682b      	ldr	r3, [r5, #0]
 800100e:	6820      	ldr	r0, [r4, #0]
 8001010:	1d19      	adds	r1, r3, #4
 8001012:	6029      	str	r1, [r5, #0]
 8001014:	0601      	lsls	r1, r0, #24
 8001016:	d501      	bpl.n	800101c <_printf_i+0xec>
 8001018:	681e      	ldr	r6, [r3, #0]
 800101a:	e002      	b.n	8001022 <_printf_i+0xf2>
 800101c:	0646      	lsls	r6, r0, #25
 800101e:	d5fb      	bpl.n	8001018 <_printf_i+0xe8>
 8001020:	881e      	ldrh	r6, [r3, #0]
 8001022:	2f6f      	cmp	r7, #111	; 0x6f
 8001024:	bf0c      	ite	eq
 8001026:	2308      	moveq	r3, #8
 8001028:	230a      	movne	r3, #10
 800102a:	4852      	ldr	r0, [pc, #328]	; (8001174 <_printf_i+0x244>)
 800102c:	2100      	movs	r1, #0
 800102e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001032:	6865      	ldr	r5, [r4, #4]
 8001034:	2d00      	cmp	r5, #0
 8001036:	bfa8      	it	ge
 8001038:	6821      	ldrge	r1, [r4, #0]
 800103a:	60a5      	str	r5, [r4, #8]
 800103c:	bfa4      	itt	ge
 800103e:	f021 0104 	bicge.w	r1, r1, #4
 8001042:	6021      	strge	r1, [r4, #0]
 8001044:	b90e      	cbnz	r6, 800104a <_printf_i+0x11a>
 8001046:	2d00      	cmp	r5, #0
 8001048:	d04d      	beq.n	80010e6 <_printf_i+0x1b6>
 800104a:	4615      	mov	r5, r2
 800104c:	fbb6 f1f3 	udiv	r1, r6, r3
 8001050:	fb03 6711 	mls	r7, r3, r1, r6
 8001054:	5dc7      	ldrb	r7, [r0, r7]
 8001056:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800105a:	4637      	mov	r7, r6
 800105c:	42bb      	cmp	r3, r7
 800105e:	460e      	mov	r6, r1
 8001060:	d9f4      	bls.n	800104c <_printf_i+0x11c>
 8001062:	2b08      	cmp	r3, #8
 8001064:	d10b      	bne.n	800107e <_printf_i+0x14e>
 8001066:	6823      	ldr	r3, [r4, #0]
 8001068:	07de      	lsls	r6, r3, #31
 800106a:	d508      	bpl.n	800107e <_printf_i+0x14e>
 800106c:	6923      	ldr	r3, [r4, #16]
 800106e:	6861      	ldr	r1, [r4, #4]
 8001070:	4299      	cmp	r1, r3
 8001072:	bfde      	ittt	le
 8001074:	2330      	movle	r3, #48	; 0x30
 8001076:	f805 3c01 	strble.w	r3, [r5, #-1]
 800107a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800107e:	1b52      	subs	r2, r2, r5
 8001080:	6122      	str	r2, [r4, #16]
 8001082:	464b      	mov	r3, r9
 8001084:	4621      	mov	r1, r4
 8001086:	4640      	mov	r0, r8
 8001088:	f8cd a000 	str.w	sl, [sp]
 800108c:	aa03      	add	r2, sp, #12
 800108e:	f7ff fedf 	bl	8000e50 <_printf_common>
 8001092:	3001      	adds	r0, #1
 8001094:	d14c      	bne.n	8001130 <_printf_i+0x200>
 8001096:	f04f 30ff 	mov.w	r0, #4294967295
 800109a:	b004      	add	sp, #16
 800109c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a0:	4834      	ldr	r0, [pc, #208]	; (8001174 <_printf_i+0x244>)
 80010a2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80010a6:	6829      	ldr	r1, [r5, #0]
 80010a8:	6823      	ldr	r3, [r4, #0]
 80010aa:	f851 6b04 	ldr.w	r6, [r1], #4
 80010ae:	6029      	str	r1, [r5, #0]
 80010b0:	061d      	lsls	r5, r3, #24
 80010b2:	d514      	bpl.n	80010de <_printf_i+0x1ae>
 80010b4:	07df      	lsls	r7, r3, #31
 80010b6:	bf44      	itt	mi
 80010b8:	f043 0320 	orrmi.w	r3, r3, #32
 80010bc:	6023      	strmi	r3, [r4, #0]
 80010be:	b91e      	cbnz	r6, 80010c8 <_printf_i+0x198>
 80010c0:	6823      	ldr	r3, [r4, #0]
 80010c2:	f023 0320 	bic.w	r3, r3, #32
 80010c6:	6023      	str	r3, [r4, #0]
 80010c8:	2310      	movs	r3, #16
 80010ca:	e7af      	b.n	800102c <_printf_i+0xfc>
 80010cc:	6823      	ldr	r3, [r4, #0]
 80010ce:	f043 0320 	orr.w	r3, r3, #32
 80010d2:	6023      	str	r3, [r4, #0]
 80010d4:	2378      	movs	r3, #120	; 0x78
 80010d6:	4828      	ldr	r0, [pc, #160]	; (8001178 <_printf_i+0x248>)
 80010d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80010dc:	e7e3      	b.n	80010a6 <_printf_i+0x176>
 80010de:	0659      	lsls	r1, r3, #25
 80010e0:	bf48      	it	mi
 80010e2:	b2b6      	uxthmi	r6, r6
 80010e4:	e7e6      	b.n	80010b4 <_printf_i+0x184>
 80010e6:	4615      	mov	r5, r2
 80010e8:	e7bb      	b.n	8001062 <_printf_i+0x132>
 80010ea:	682b      	ldr	r3, [r5, #0]
 80010ec:	6826      	ldr	r6, [r4, #0]
 80010ee:	1d18      	adds	r0, r3, #4
 80010f0:	6961      	ldr	r1, [r4, #20]
 80010f2:	6028      	str	r0, [r5, #0]
 80010f4:	0635      	lsls	r5, r6, #24
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	d501      	bpl.n	80010fe <_printf_i+0x1ce>
 80010fa:	6019      	str	r1, [r3, #0]
 80010fc:	e002      	b.n	8001104 <_printf_i+0x1d4>
 80010fe:	0670      	lsls	r0, r6, #25
 8001100:	d5fb      	bpl.n	80010fa <_printf_i+0x1ca>
 8001102:	8019      	strh	r1, [r3, #0]
 8001104:	2300      	movs	r3, #0
 8001106:	4615      	mov	r5, r2
 8001108:	6123      	str	r3, [r4, #16]
 800110a:	e7ba      	b.n	8001082 <_printf_i+0x152>
 800110c:	682b      	ldr	r3, [r5, #0]
 800110e:	2100      	movs	r1, #0
 8001110:	1d1a      	adds	r2, r3, #4
 8001112:	602a      	str	r2, [r5, #0]
 8001114:	681d      	ldr	r5, [r3, #0]
 8001116:	6862      	ldr	r2, [r4, #4]
 8001118:	4628      	mov	r0, r5
 800111a:	f000 f82f 	bl	800117c <memchr>
 800111e:	b108      	cbz	r0, 8001124 <_printf_i+0x1f4>
 8001120:	1b40      	subs	r0, r0, r5
 8001122:	6060      	str	r0, [r4, #4]
 8001124:	6863      	ldr	r3, [r4, #4]
 8001126:	6123      	str	r3, [r4, #16]
 8001128:	2300      	movs	r3, #0
 800112a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800112e:	e7a8      	b.n	8001082 <_printf_i+0x152>
 8001130:	462a      	mov	r2, r5
 8001132:	4649      	mov	r1, r9
 8001134:	4640      	mov	r0, r8
 8001136:	6923      	ldr	r3, [r4, #16]
 8001138:	47d0      	blx	sl
 800113a:	3001      	adds	r0, #1
 800113c:	d0ab      	beq.n	8001096 <_printf_i+0x166>
 800113e:	6823      	ldr	r3, [r4, #0]
 8001140:	079b      	lsls	r3, r3, #30
 8001142:	d413      	bmi.n	800116c <_printf_i+0x23c>
 8001144:	68e0      	ldr	r0, [r4, #12]
 8001146:	9b03      	ldr	r3, [sp, #12]
 8001148:	4298      	cmp	r0, r3
 800114a:	bfb8      	it	lt
 800114c:	4618      	movlt	r0, r3
 800114e:	e7a4      	b.n	800109a <_printf_i+0x16a>
 8001150:	2301      	movs	r3, #1
 8001152:	4632      	mov	r2, r6
 8001154:	4649      	mov	r1, r9
 8001156:	4640      	mov	r0, r8
 8001158:	47d0      	blx	sl
 800115a:	3001      	adds	r0, #1
 800115c:	d09b      	beq.n	8001096 <_printf_i+0x166>
 800115e:	3501      	adds	r5, #1
 8001160:	68e3      	ldr	r3, [r4, #12]
 8001162:	9903      	ldr	r1, [sp, #12]
 8001164:	1a5b      	subs	r3, r3, r1
 8001166:	42ab      	cmp	r3, r5
 8001168:	dcf2      	bgt.n	8001150 <_printf_i+0x220>
 800116a:	e7eb      	b.n	8001144 <_printf_i+0x214>
 800116c:	2500      	movs	r5, #0
 800116e:	f104 0619 	add.w	r6, r4, #25
 8001172:	e7f5      	b.n	8001160 <_printf_i+0x230>
 8001174:	08001480 	.word	0x08001480
 8001178:	08001491 	.word	0x08001491

0800117c <memchr>:
 800117c:	4603      	mov	r3, r0
 800117e:	b510      	push	{r4, lr}
 8001180:	b2c9      	uxtb	r1, r1
 8001182:	4402      	add	r2, r0
 8001184:	4293      	cmp	r3, r2
 8001186:	4618      	mov	r0, r3
 8001188:	d101      	bne.n	800118e <memchr+0x12>
 800118a:	2000      	movs	r0, #0
 800118c:	e003      	b.n	8001196 <memchr+0x1a>
 800118e:	7804      	ldrb	r4, [r0, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	428c      	cmp	r4, r1
 8001194:	d1f6      	bne.n	8001184 <memchr+0x8>
 8001196:	bd10      	pop	{r4, pc}

08001198 <memcpy>:
 8001198:	440a      	add	r2, r1
 800119a:	4291      	cmp	r1, r2
 800119c:	f100 33ff 	add.w	r3, r0, #4294967295
 80011a0:	d100      	bne.n	80011a4 <memcpy+0xc>
 80011a2:	4770      	bx	lr
 80011a4:	b510      	push	{r4, lr}
 80011a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80011aa:	4291      	cmp	r1, r2
 80011ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80011b0:	d1f9      	bne.n	80011a6 <memcpy+0xe>
 80011b2:	bd10      	pop	{r4, pc}

080011b4 <memmove>:
 80011b4:	4288      	cmp	r0, r1
 80011b6:	b510      	push	{r4, lr}
 80011b8:	eb01 0402 	add.w	r4, r1, r2
 80011bc:	d902      	bls.n	80011c4 <memmove+0x10>
 80011be:	4284      	cmp	r4, r0
 80011c0:	4623      	mov	r3, r4
 80011c2:	d807      	bhi.n	80011d4 <memmove+0x20>
 80011c4:	1e43      	subs	r3, r0, #1
 80011c6:	42a1      	cmp	r1, r4
 80011c8:	d008      	beq.n	80011dc <memmove+0x28>
 80011ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80011ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80011d2:	e7f8      	b.n	80011c6 <memmove+0x12>
 80011d4:	4601      	mov	r1, r0
 80011d6:	4402      	add	r2, r0
 80011d8:	428a      	cmp	r2, r1
 80011da:	d100      	bne.n	80011de <memmove+0x2a>
 80011dc:	bd10      	pop	{r4, pc}
 80011de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80011e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80011e6:	e7f7      	b.n	80011d8 <memmove+0x24>

080011e8 <_free_r>:
 80011e8:	b538      	push	{r3, r4, r5, lr}
 80011ea:	4605      	mov	r5, r0
 80011ec:	2900      	cmp	r1, #0
 80011ee:	d040      	beq.n	8001272 <_free_r+0x8a>
 80011f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80011f4:	1f0c      	subs	r4, r1, #4
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	bfb8      	it	lt
 80011fa:	18e4      	addlt	r4, r4, r3
 80011fc:	f000 f910 	bl	8001420 <__malloc_lock>
 8001200:	4a1c      	ldr	r2, [pc, #112]	; (8001274 <_free_r+0x8c>)
 8001202:	6813      	ldr	r3, [r2, #0]
 8001204:	b933      	cbnz	r3, 8001214 <_free_r+0x2c>
 8001206:	6063      	str	r3, [r4, #4]
 8001208:	6014      	str	r4, [r2, #0]
 800120a:	4628      	mov	r0, r5
 800120c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001210:	f000 b90c 	b.w	800142c <__malloc_unlock>
 8001214:	42a3      	cmp	r3, r4
 8001216:	d908      	bls.n	800122a <_free_r+0x42>
 8001218:	6820      	ldr	r0, [r4, #0]
 800121a:	1821      	adds	r1, r4, r0
 800121c:	428b      	cmp	r3, r1
 800121e:	bf01      	itttt	eq
 8001220:	6819      	ldreq	r1, [r3, #0]
 8001222:	685b      	ldreq	r3, [r3, #4]
 8001224:	1809      	addeq	r1, r1, r0
 8001226:	6021      	streq	r1, [r4, #0]
 8001228:	e7ed      	b.n	8001206 <_free_r+0x1e>
 800122a:	461a      	mov	r2, r3
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	b10b      	cbz	r3, 8001234 <_free_r+0x4c>
 8001230:	42a3      	cmp	r3, r4
 8001232:	d9fa      	bls.n	800122a <_free_r+0x42>
 8001234:	6811      	ldr	r1, [r2, #0]
 8001236:	1850      	adds	r0, r2, r1
 8001238:	42a0      	cmp	r0, r4
 800123a:	d10b      	bne.n	8001254 <_free_r+0x6c>
 800123c:	6820      	ldr	r0, [r4, #0]
 800123e:	4401      	add	r1, r0
 8001240:	1850      	adds	r0, r2, r1
 8001242:	4283      	cmp	r3, r0
 8001244:	6011      	str	r1, [r2, #0]
 8001246:	d1e0      	bne.n	800120a <_free_r+0x22>
 8001248:	6818      	ldr	r0, [r3, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	4401      	add	r1, r0
 800124e:	6011      	str	r1, [r2, #0]
 8001250:	6053      	str	r3, [r2, #4]
 8001252:	e7da      	b.n	800120a <_free_r+0x22>
 8001254:	d902      	bls.n	800125c <_free_r+0x74>
 8001256:	230c      	movs	r3, #12
 8001258:	602b      	str	r3, [r5, #0]
 800125a:	e7d6      	b.n	800120a <_free_r+0x22>
 800125c:	6820      	ldr	r0, [r4, #0]
 800125e:	1821      	adds	r1, r4, r0
 8001260:	428b      	cmp	r3, r1
 8001262:	bf01      	itttt	eq
 8001264:	6819      	ldreq	r1, [r3, #0]
 8001266:	685b      	ldreq	r3, [r3, #4]
 8001268:	1809      	addeq	r1, r1, r0
 800126a:	6021      	streq	r1, [r4, #0]
 800126c:	6063      	str	r3, [r4, #4]
 800126e:	6054      	str	r4, [r2, #4]
 8001270:	e7cb      	b.n	800120a <_free_r+0x22>
 8001272:	bd38      	pop	{r3, r4, r5, pc}
 8001274:	20000090 	.word	0x20000090

08001278 <sbrk_aligned>:
 8001278:	b570      	push	{r4, r5, r6, lr}
 800127a:	4e0e      	ldr	r6, [pc, #56]	; (80012b4 <sbrk_aligned+0x3c>)
 800127c:	460c      	mov	r4, r1
 800127e:	6831      	ldr	r1, [r6, #0]
 8001280:	4605      	mov	r5, r0
 8001282:	b911      	cbnz	r1, 800128a <sbrk_aligned+0x12>
 8001284:	f000 f8bc 	bl	8001400 <_sbrk_r>
 8001288:	6030      	str	r0, [r6, #0]
 800128a:	4621      	mov	r1, r4
 800128c:	4628      	mov	r0, r5
 800128e:	f000 f8b7 	bl	8001400 <_sbrk_r>
 8001292:	1c43      	adds	r3, r0, #1
 8001294:	d00a      	beq.n	80012ac <sbrk_aligned+0x34>
 8001296:	1cc4      	adds	r4, r0, #3
 8001298:	f024 0403 	bic.w	r4, r4, #3
 800129c:	42a0      	cmp	r0, r4
 800129e:	d007      	beq.n	80012b0 <sbrk_aligned+0x38>
 80012a0:	1a21      	subs	r1, r4, r0
 80012a2:	4628      	mov	r0, r5
 80012a4:	f000 f8ac 	bl	8001400 <_sbrk_r>
 80012a8:	3001      	adds	r0, #1
 80012aa:	d101      	bne.n	80012b0 <sbrk_aligned+0x38>
 80012ac:	f04f 34ff 	mov.w	r4, #4294967295
 80012b0:	4620      	mov	r0, r4
 80012b2:	bd70      	pop	{r4, r5, r6, pc}
 80012b4:	20000094 	.word	0x20000094

080012b8 <_malloc_r>:
 80012b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012bc:	1ccd      	adds	r5, r1, #3
 80012be:	f025 0503 	bic.w	r5, r5, #3
 80012c2:	3508      	adds	r5, #8
 80012c4:	2d0c      	cmp	r5, #12
 80012c6:	bf38      	it	cc
 80012c8:	250c      	movcc	r5, #12
 80012ca:	2d00      	cmp	r5, #0
 80012cc:	4607      	mov	r7, r0
 80012ce:	db01      	blt.n	80012d4 <_malloc_r+0x1c>
 80012d0:	42a9      	cmp	r1, r5
 80012d2:	d905      	bls.n	80012e0 <_malloc_r+0x28>
 80012d4:	230c      	movs	r3, #12
 80012d6:	2600      	movs	r6, #0
 80012d8:	603b      	str	r3, [r7, #0]
 80012da:	4630      	mov	r0, r6
 80012dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012e0:	4e2e      	ldr	r6, [pc, #184]	; (800139c <_malloc_r+0xe4>)
 80012e2:	f000 f89d 	bl	8001420 <__malloc_lock>
 80012e6:	6833      	ldr	r3, [r6, #0]
 80012e8:	461c      	mov	r4, r3
 80012ea:	bb34      	cbnz	r4, 800133a <_malloc_r+0x82>
 80012ec:	4629      	mov	r1, r5
 80012ee:	4638      	mov	r0, r7
 80012f0:	f7ff ffc2 	bl	8001278 <sbrk_aligned>
 80012f4:	1c43      	adds	r3, r0, #1
 80012f6:	4604      	mov	r4, r0
 80012f8:	d14d      	bne.n	8001396 <_malloc_r+0xde>
 80012fa:	6834      	ldr	r4, [r6, #0]
 80012fc:	4626      	mov	r6, r4
 80012fe:	2e00      	cmp	r6, #0
 8001300:	d140      	bne.n	8001384 <_malloc_r+0xcc>
 8001302:	6823      	ldr	r3, [r4, #0]
 8001304:	4631      	mov	r1, r6
 8001306:	4638      	mov	r0, r7
 8001308:	eb04 0803 	add.w	r8, r4, r3
 800130c:	f000 f878 	bl	8001400 <_sbrk_r>
 8001310:	4580      	cmp	r8, r0
 8001312:	d13a      	bne.n	800138a <_malloc_r+0xd2>
 8001314:	6821      	ldr	r1, [r4, #0]
 8001316:	3503      	adds	r5, #3
 8001318:	1a6d      	subs	r5, r5, r1
 800131a:	f025 0503 	bic.w	r5, r5, #3
 800131e:	3508      	adds	r5, #8
 8001320:	2d0c      	cmp	r5, #12
 8001322:	bf38      	it	cc
 8001324:	250c      	movcc	r5, #12
 8001326:	4638      	mov	r0, r7
 8001328:	4629      	mov	r1, r5
 800132a:	f7ff ffa5 	bl	8001278 <sbrk_aligned>
 800132e:	3001      	adds	r0, #1
 8001330:	d02b      	beq.n	800138a <_malloc_r+0xd2>
 8001332:	6823      	ldr	r3, [r4, #0]
 8001334:	442b      	add	r3, r5
 8001336:	6023      	str	r3, [r4, #0]
 8001338:	e00e      	b.n	8001358 <_malloc_r+0xa0>
 800133a:	6822      	ldr	r2, [r4, #0]
 800133c:	1b52      	subs	r2, r2, r5
 800133e:	d41e      	bmi.n	800137e <_malloc_r+0xc6>
 8001340:	2a0b      	cmp	r2, #11
 8001342:	d916      	bls.n	8001372 <_malloc_r+0xba>
 8001344:	1961      	adds	r1, r4, r5
 8001346:	42a3      	cmp	r3, r4
 8001348:	6025      	str	r5, [r4, #0]
 800134a:	bf18      	it	ne
 800134c:	6059      	strne	r1, [r3, #4]
 800134e:	6863      	ldr	r3, [r4, #4]
 8001350:	bf08      	it	eq
 8001352:	6031      	streq	r1, [r6, #0]
 8001354:	5162      	str	r2, [r4, r5]
 8001356:	604b      	str	r3, [r1, #4]
 8001358:	4638      	mov	r0, r7
 800135a:	f104 060b 	add.w	r6, r4, #11
 800135e:	f000 f865 	bl	800142c <__malloc_unlock>
 8001362:	f026 0607 	bic.w	r6, r6, #7
 8001366:	1d23      	adds	r3, r4, #4
 8001368:	1af2      	subs	r2, r6, r3
 800136a:	d0b6      	beq.n	80012da <_malloc_r+0x22>
 800136c:	1b9b      	subs	r3, r3, r6
 800136e:	50a3      	str	r3, [r4, r2]
 8001370:	e7b3      	b.n	80012da <_malloc_r+0x22>
 8001372:	6862      	ldr	r2, [r4, #4]
 8001374:	42a3      	cmp	r3, r4
 8001376:	bf0c      	ite	eq
 8001378:	6032      	streq	r2, [r6, #0]
 800137a:	605a      	strne	r2, [r3, #4]
 800137c:	e7ec      	b.n	8001358 <_malloc_r+0xa0>
 800137e:	4623      	mov	r3, r4
 8001380:	6864      	ldr	r4, [r4, #4]
 8001382:	e7b2      	b.n	80012ea <_malloc_r+0x32>
 8001384:	4634      	mov	r4, r6
 8001386:	6876      	ldr	r6, [r6, #4]
 8001388:	e7b9      	b.n	80012fe <_malloc_r+0x46>
 800138a:	230c      	movs	r3, #12
 800138c:	4638      	mov	r0, r7
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	f000 f84c 	bl	800142c <__malloc_unlock>
 8001394:	e7a1      	b.n	80012da <_malloc_r+0x22>
 8001396:	6025      	str	r5, [r4, #0]
 8001398:	e7de      	b.n	8001358 <_malloc_r+0xa0>
 800139a:	bf00      	nop
 800139c:	20000090 	.word	0x20000090

080013a0 <_realloc_r>:
 80013a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013a4:	4680      	mov	r8, r0
 80013a6:	4614      	mov	r4, r2
 80013a8:	460e      	mov	r6, r1
 80013aa:	b921      	cbnz	r1, 80013b6 <_realloc_r+0x16>
 80013ac:	4611      	mov	r1, r2
 80013ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80013b2:	f7ff bf81 	b.w	80012b8 <_malloc_r>
 80013b6:	b92a      	cbnz	r2, 80013c4 <_realloc_r+0x24>
 80013b8:	f7ff ff16 	bl	80011e8 <_free_r>
 80013bc:	4625      	mov	r5, r4
 80013be:	4628      	mov	r0, r5
 80013c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013c4:	f000 f838 	bl	8001438 <_malloc_usable_size_r>
 80013c8:	4284      	cmp	r4, r0
 80013ca:	4607      	mov	r7, r0
 80013cc:	d802      	bhi.n	80013d4 <_realloc_r+0x34>
 80013ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80013d2:	d812      	bhi.n	80013fa <_realloc_r+0x5a>
 80013d4:	4621      	mov	r1, r4
 80013d6:	4640      	mov	r0, r8
 80013d8:	f7ff ff6e 	bl	80012b8 <_malloc_r>
 80013dc:	4605      	mov	r5, r0
 80013de:	2800      	cmp	r0, #0
 80013e0:	d0ed      	beq.n	80013be <_realloc_r+0x1e>
 80013e2:	42bc      	cmp	r4, r7
 80013e4:	4622      	mov	r2, r4
 80013e6:	4631      	mov	r1, r6
 80013e8:	bf28      	it	cs
 80013ea:	463a      	movcs	r2, r7
 80013ec:	f7ff fed4 	bl	8001198 <memcpy>
 80013f0:	4631      	mov	r1, r6
 80013f2:	4640      	mov	r0, r8
 80013f4:	f7ff fef8 	bl	80011e8 <_free_r>
 80013f8:	e7e1      	b.n	80013be <_realloc_r+0x1e>
 80013fa:	4635      	mov	r5, r6
 80013fc:	e7df      	b.n	80013be <_realloc_r+0x1e>
	...

08001400 <_sbrk_r>:
 8001400:	b538      	push	{r3, r4, r5, lr}
 8001402:	2300      	movs	r3, #0
 8001404:	4d05      	ldr	r5, [pc, #20]	; (800141c <_sbrk_r+0x1c>)
 8001406:	4604      	mov	r4, r0
 8001408:	4608      	mov	r0, r1
 800140a:	602b      	str	r3, [r5, #0]
 800140c:	f7ff fb06 	bl	8000a1c <_sbrk>
 8001410:	1c43      	adds	r3, r0, #1
 8001412:	d102      	bne.n	800141a <_sbrk_r+0x1a>
 8001414:	682b      	ldr	r3, [r5, #0]
 8001416:	b103      	cbz	r3, 800141a <_sbrk_r+0x1a>
 8001418:	6023      	str	r3, [r4, #0]
 800141a:	bd38      	pop	{r3, r4, r5, pc}
 800141c:	20000098 	.word	0x20000098

08001420 <__malloc_lock>:
 8001420:	4801      	ldr	r0, [pc, #4]	; (8001428 <__malloc_lock+0x8>)
 8001422:	f000 b811 	b.w	8001448 <__retarget_lock_acquire_recursive>
 8001426:	bf00      	nop
 8001428:	2000009c 	.word	0x2000009c

0800142c <__malloc_unlock>:
 800142c:	4801      	ldr	r0, [pc, #4]	; (8001434 <__malloc_unlock+0x8>)
 800142e:	f000 b80c 	b.w	800144a <__retarget_lock_release_recursive>
 8001432:	bf00      	nop
 8001434:	2000009c 	.word	0x2000009c

08001438 <_malloc_usable_size_r>:
 8001438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800143c:	1f18      	subs	r0, r3, #4
 800143e:	2b00      	cmp	r3, #0
 8001440:	bfbc      	itt	lt
 8001442:	580b      	ldrlt	r3, [r1, r0]
 8001444:	18c0      	addlt	r0, r0, r3
 8001446:	4770      	bx	lr

08001448 <__retarget_lock_acquire_recursive>:
 8001448:	4770      	bx	lr

0800144a <__retarget_lock_release_recursive>:
 800144a:	4770      	bx	lr

0800144c <_init>:
 800144c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800144e:	bf00      	nop
 8001450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001452:	bc08      	pop	{r3}
 8001454:	469e      	mov	lr, r3
 8001456:	4770      	bx	lr

08001458 <_fini>:
 8001458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800145a:	bf00      	nop
 800145c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800145e:	bc08      	pop	{r3}
 8001460:	469e      	mov	lr, r3
 8001462:	4770      	bx	lr
