
RTOS_TEST_G3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bf0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001d00  08001d00  00011d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d18  08001d18  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d18  08001d18  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d18  08001d18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d18  08001d18  00011d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d1c  08001d1c  00011d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000294c  2000000c  08001d2c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002958  08001d2c  00022958  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004378  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e27  00000000  00000000  000243ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004b0  00000000  00000000  000251d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000428  00000000  00000000  00025688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014b1f  00000000  00000000  00025ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004f83  00000000  00000000  0003a5cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085c82  00000000  00000000  0003f552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c51d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000011b8  00000000  00000000  000c5224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08001ce8 	.word	0x08001ce8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08001ce8 	.word	0x08001ce8

08000150 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b088      	sub	sp, #32
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 8000158:	2300      	movs	r3, #0
 800015a:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 800015c:	f001 f822 	bl	80011a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 8000160:	4b3e      	ldr	r3, [pc, #248]	; (800025c <pvPortMalloc+0x10c>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	2b00      	cmp	r3, #0
 8000166:	d104      	bne.n	8000172 <pvPortMalloc+0x22>
		{
			prvHeapInit();
 8000168:	f000 f8ba 	bl	80002e0 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 800016c:	4b3b      	ldr	r3, [pc, #236]	; (800025c <pvPortMalloc+0x10c>)
 800016e:	2201      	movs	r2, #1
 8000170:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2b00      	cmp	r3, #0
 8000176:	d00e      	beq.n	8000196 <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 8000178:	2308      	movs	r3, #8
 800017a:	461a      	mov	r2, r3
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	4413      	add	r3, r2
 8000180:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f003 0307 	and.w	r3, r3, #7
 8000188:	2b00      	cmp	r3, #0
 800018a:	d004      	beq.n	8000196 <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	f023 0307 	bic.w	r3, r3, #7
 8000192:	3308      	adds	r3, #8
 8000194:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2b00      	cmp	r3, #0
 800019a:	d057      	beq.n	800024c <pvPortMalloc+0xfc>
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	f242 72f7 	movw	r2, #10231	; 0x27f7
 80001a2:	4293      	cmp	r3, r2
 80001a4:	d852      	bhi.n	800024c <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 80001a6:	4b2e      	ldr	r3, [pc, #184]	; (8000260 <pvPortMalloc+0x110>)
 80001a8:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 80001aa:	4b2d      	ldr	r3, [pc, #180]	; (8000260 <pvPortMalloc+0x110>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80001b0:	e004      	b.n	80001bc <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 80001b2:	69fb      	ldr	r3, [r7, #28]
 80001b4:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 80001b6:	69fb      	ldr	r3, [r7, #28]
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80001bc:	69fb      	ldr	r3, [r7, #28]
 80001be:	685b      	ldr	r3, [r3, #4]
 80001c0:	687a      	ldr	r2, [r7, #4]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	d903      	bls.n	80001ce <pvPortMalloc+0x7e>
 80001c6:	69fb      	ldr	r3, [r7, #28]
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d1f1      	bne.n	80001b2 <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 80001ce:	69fb      	ldr	r3, [r7, #28]
 80001d0:	4a24      	ldr	r2, [pc, #144]	; (8000264 <pvPortMalloc+0x114>)
 80001d2:	4293      	cmp	r3, r2
 80001d4:	d03a      	beq.n	800024c <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 80001d6:	69bb      	ldr	r3, [r7, #24]
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	2208      	movs	r2, #8
 80001dc:	4413      	add	r3, r2
 80001de:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80001e0:	69fb      	ldr	r3, [r7, #28]
 80001e2:	681a      	ldr	r2, [r3, #0]
 80001e4:	69bb      	ldr	r3, [r7, #24]
 80001e6:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80001e8:	69fb      	ldr	r3, [r7, #28]
 80001ea:	685a      	ldr	r2, [r3, #4]
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	1ad3      	subs	r3, r2, r3
 80001f0:	2208      	movs	r2, #8
 80001f2:	0052      	lsls	r2, r2, #1
 80001f4:	4293      	cmp	r3, r2
 80001f6:	d922      	bls.n	800023e <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80001f8:	69fa      	ldr	r2, [r7, #28]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4413      	add	r3, r2
 80001fe:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000200:	69fb      	ldr	r3, [r7, #28]
 8000202:	685a      	ldr	r2, [r3, #4]
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	1ad2      	subs	r2, r2, r3
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 800020c:	69fb      	ldr	r3, [r7, #28]
 800020e:	687a      	ldr	r2, [r7, #4]
 8000210:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	685b      	ldr	r3, [r3, #4]
 8000216:	60bb      	str	r3, [r7, #8]
 8000218:	4b11      	ldr	r3, [pc, #68]	; (8000260 <pvPortMalloc+0x110>)
 800021a:	613b      	str	r3, [r7, #16]
 800021c:	e002      	b.n	8000224 <pvPortMalloc+0xd4>
 800021e:	693b      	ldr	r3, [r7, #16]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	613b      	str	r3, [r7, #16]
 8000224:	693b      	ldr	r3, [r7, #16]
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	685b      	ldr	r3, [r3, #4]
 800022a:	68ba      	ldr	r2, [r7, #8]
 800022c:	429a      	cmp	r2, r3
 800022e:	d8f6      	bhi.n	800021e <pvPortMalloc+0xce>
 8000230:	693b      	ldr	r3, [r7, #16]
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	693b      	ldr	r3, [r7, #16]
 800023a:	68fa      	ldr	r2, [r7, #12]
 800023c:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 800023e:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <pvPortMalloc+0x118>)
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	69fb      	ldr	r3, [r7, #28]
 8000244:	685b      	ldr	r3, [r3, #4]
 8000246:	1ad3      	subs	r3, r2, r3
 8000248:	4a07      	ldr	r2, [pc, #28]	; (8000268 <pvPortMalloc+0x118>)
 800024a:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800024c:	f000 ffb8 	bl	80011c0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8000250:	697b      	ldr	r3, [r7, #20]
}
 8000252:	4618      	mov	r0, r3
 8000254:	3720      	adds	r7, #32
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20002838 	.word	0x20002838
 8000260:	20002828 	.word	0x20002828
 8000264:	20002830 	.word	0x20002830
 8000268:	20000000 	.word	0x20000000

0800026c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b086      	sub	sp, #24
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d027      	beq.n	80002ce <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 800027e:	2308      	movs	r3, #8
 8000280:	425b      	negs	r3, r3
 8000282:	693a      	ldr	r2, [r7, #16]
 8000284:	4413      	add	r3, r2
 8000286:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8000288:	693b      	ldr	r3, [r7, #16]
 800028a:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 800028c:	f000 ff8a 	bl	80011a4 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	685b      	ldr	r3, [r3, #4]
 8000294:	60bb      	str	r3, [r7, #8]
 8000296:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <vPortFree+0x6c>)
 8000298:	617b      	str	r3, [r7, #20]
 800029a:	e002      	b.n	80002a2 <vPortFree+0x36>
 800029c:	697b      	ldr	r3, [r7, #20]
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	617b      	str	r3, [r7, #20]
 80002a2:	697b      	ldr	r3, [r7, #20]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	685b      	ldr	r3, [r3, #4]
 80002a8:	68ba      	ldr	r2, [r7, #8]
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d8f6      	bhi.n	800029c <vPortFree+0x30>
 80002ae:	697b      	ldr	r3, [r7, #20]
 80002b0:	681a      	ldr	r2, [r3, #0]
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	68fa      	ldr	r2, [r7, #12]
 80002ba:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	685a      	ldr	r2, [r3, #4]
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <vPortFree+0x70>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4413      	add	r3, r2
 80002c6:	4a05      	ldr	r2, [pc, #20]	; (80002dc <vPortFree+0x70>)
 80002c8:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 80002ca:	f000 ff79 	bl	80011c0 <xTaskResumeAll>
	}
}
 80002ce:	bf00      	nop
 80002d0:	3718      	adds	r7, #24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	20002828 	.word	0x20002828
 80002dc:	20000000 	.word	0x20000000

080002e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80002e6:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <prvHeapInit+0x44>)
 80002e8:	f023 0307 	bic.w	r3, r3, #7
 80002ec:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80002ee:	4a0e      	ldr	r2, [pc, #56]	; (8000328 <prvHeapInit+0x48>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <prvHeapInit+0x48>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 80002fa:	4b0c      	ldr	r3, [pc, #48]	; (800032c <prvHeapInit+0x4c>)
 80002fc:	f242 72f8 	movw	r2, #10232	; 0x27f8
 8000300:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 8000302:	4b0a      	ldr	r3, [pc, #40]	; (800032c <prvHeapInit+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	f242 72f8 	movw	r2, #10232	; 0x27f8
 8000312:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	4a05      	ldr	r2, [pc, #20]	; (800032c <prvHeapInit+0x4c>)
 8000318:	601a      	str	r2, [r3, #0]
}
 800031a:	bf00      	nop
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	bc80      	pop	{r7}
 8000322:	4770      	bx	lr
 8000324:	20000030 	.word	0x20000030
 8000328:	20002828 	.word	0x20002828
 800032c:	20002830 	.word	0x20002830

08000330 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	f103 0208 	add.w	r2, r3, #8
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	f04f 32ff 	mov.w	r2, #4294967295
 8000348:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	f103 0208 	add.w	r2, r3, #8
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	f103 0208 	add.w	r2, r3, #8
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000364:	bf00      	nop
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr

0800036e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800036e:	b480      	push	{r7}
 8000370:	b083      	sub	sp, #12
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	2200      	movs	r2, #0
 800037a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	bc80      	pop	{r7}
 8000384:	4770      	bx	lr

08000386 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000386:	b480      	push	{r7}
 8000388:	b085      	sub	sp, #20
 800038a:	af00      	add	r7, sp, #0
 800038c:	6078      	str	r0, [r7, #4]
 800038e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800039c:	d103      	bne.n	80003a6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	691b      	ldr	r3, [r3, #16]
 80003a2:	60fb      	str	r3, [r7, #12]
 80003a4:	e00c      	b.n	80003c0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	3308      	adds	r3, #8
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	e002      	b.n	80003b4 <vListInsert+0x2e>
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	685b      	ldr	r3, [r3, #4]
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	68ba      	ldr	r2, [r7, #8]
 80003bc:	429a      	cmp	r2, r3
 80003be:	d2f6      	bcs.n	80003ae <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	685a      	ldr	r2, [r3, #4]
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	683a      	ldr	r2, [r7, #0]
 80003ce:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	68fa      	ldr	r2, [r7, #12]
 80003d4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	683a      	ldr	r2, [r7, #0]
 80003da:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	687a      	ldr	r2, [r7, #4]
 80003e0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	1c5a      	adds	r2, r3, #1
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	601a      	str	r2, [r3, #0]
}
 80003ec:	bf00      	nop
 80003ee:	3714      	adds	r7, #20
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bc80      	pop	{r7}
 80003f4:	4770      	bx	lr

080003f6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80003f6:	b480      	push	{r7}
 80003f8:	b085      	sub	sp, #20
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	691b      	ldr	r3, [r3, #16]
 8000402:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	6892      	ldr	r2, [r2, #8]
 800040c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	689b      	ldr	r3, [r3, #8]
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	6852      	ldr	r2, [r2, #4]
 8000416:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	687a      	ldr	r2, [r7, #4]
 800041e:	429a      	cmp	r2, r3
 8000420:	d103      	bne.n	800042a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	689a      	ldr	r2, [r3, #8]
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	1e5a      	subs	r2, r3, #1
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	681b      	ldr	r3, [r3, #0]
}
 800043e:	4618      	mov	r0, r3
 8000440:	3714      	adds	r7, #20
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr

08000448 <vBlueLedTask>:
#include "queue.h"

QueueHandle_t xQueue;

void vBlueLedTask( void *pvParameters )
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	int recv = 0;
 8000450:	2300      	movs	r3, #0
 8000452:	60fb      	str	r3, [r7, #12]
	/* As per most tasks, this task is implemented in an infinite loop. */
	for( ;; )
	{

		xQueueReceive(xQueue, &recv, 1000/portTICK_PERIOD_MS);
 8000454:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <vBlueLedTask+0x3c>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f107 010c 	add.w	r1, r7, #12
 800045c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000460:	4618      	mov	r0, r3
 8000462:	f000 fb15 	bl	8000a90 <xQueueReceive>

		if(recv == 8)
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	2b08      	cmp	r3, #8
 800046a:	d105      	bne.n	8000478 <vBlueLedTask+0x30>
		{
			GPIOA->ODR ^= (1<<2);
 800046c:	4b06      	ldr	r3, [pc, #24]	; (8000488 <vBlueLedTask+0x40>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	4a05      	ldr	r2, [pc, #20]	; (8000488 <vBlueLedTask+0x40>)
 8000472:	f083 0304 	eor.w	r3, r3, #4
 8000476:	60d3      	str	r3, [r2, #12]
		 * Non-Blocking Delay
		 * Timer interrupt
		 * in FreeRTOS : vTaskDelay
		 *
		 */
		vTaskDelay(500/portTICK_PERIOD_MS);
 8000478:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800047c:	f000 fe32 	bl	80010e4 <vTaskDelay>
		xQueueReceive(xQueue, &recv, 1000/portTICK_PERIOD_MS);
 8000480:	e7e8      	b.n	8000454 <vBlueLedTask+0xc>
 8000482:	bf00      	nop
 8000484:	2000283c 	.word	0x2000283c
 8000488:	40010800 	.word	0x40010800

0800048c <vGreenLedTask>:

	}
}

void vGreenLedTask( void *pvParameters )
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	int count =0;
 8000494:	2300      	movs	r3, #0
 8000496:	60fb      	str	r3, [r7, #12]
	/* As per most tasks, this 21task is implemented in an infinite loop. */
	for( ;; )
	{
		GPIOA->ODR ^= (1<<1);
 8000498:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <vGreenLedTask+0x34>)
 800049a:	68db      	ldr	r3, [r3, #12]
 800049c:	4a08      	ldr	r2, [pc, #32]	; (80004c0 <vGreenLedTask+0x34>)
 800049e:	f083 0302 	eor.w	r3, r3, #2
 80004a2:	60d3      	str	r3, [r2, #12]
		count = 8;
 80004a4:	2308      	movs	r3, #8
 80004a6:	60fb      	str	r3, [r7, #12]
		xQueueSendToBack( xQueue, count, 1000/portMAX_DELAY);
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <vGreenLedTask+0x38>)
 80004aa:	6818      	ldr	r0, [r3, #0]
 80004ac:	68f9      	ldr	r1, [r7, #12]
 80004ae:	2300      	movs	r3, #0
 80004b0:	2200      	movs	r2, #0
 80004b2:	f000 fa43 	bl	800093c <xQueueGenericSend>

		vTaskDelay(1000/portTICK_PERIOD_MS);
 80004b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004ba:	f000 fe13 	bl	80010e4 <vTaskDelay>
		GPIOA->ODR ^= (1<<1);
 80004be:	e7eb      	b.n	8000498 <vGreenLedTask+0xc>
 80004c0:	40010800 	.word	0x40010800
 80004c4:	2000283c 	.word	0x2000283c

080004c8 <main>:
}



int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af02      	add	r7, sp, #8
	RCC->APB2ENR = (1<<2);
 80004ce:	4b16      	ldr	r3, [pc, #88]	; (8000528 <main+0x60>)
 80004d0:	2204      	movs	r2, #4
 80004d2:	619a      	str	r2, [r3, #24]
	GPIOA->CRL = (3<<8) | (3<<4);
 80004d4:	4b15      	ldr	r3, [pc, #84]	; (800052c <main+0x64>)
 80004d6:	f44f 724c 	mov.w	r2, #816	; 0x330
 80004da:	601a      	str	r2, [r3, #0]

	xQueue =  xQueueCreate( 1, sizeof(int) );
 80004dc:	2200      	movs	r2, #0
 80004de:	2104      	movs	r1, #4
 80004e0:	2001      	movs	r0, #1
 80004e2:	f000 f9c9 	bl	8000878 <xQueueGenericCreate>
 80004e6:	4603      	mov	r3, r0
 80004e8:	4a11      	ldr	r2, [pc, #68]	; (8000530 <main+0x68>)
 80004ea:	6013      	str	r3, [r2, #0]

	if(xQueue != NULL)
 80004ec:	4b10      	ldr	r3, [pc, #64]	; (8000530 <main+0x68>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d015      	beq.n	8000520 <main+0x58>
	{
		/* Create one of the two tasks. */
		xTaskCreate(	vGreenLedTask,		/* Pointer to the function that implements the task. */
 80004f4:	2300      	movs	r3, #0
 80004f6:	9301      	str	r3, [sp, #4]
 80004f8:	2302      	movs	r3, #2
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	2300      	movs	r3, #0
 80004fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000502:	490c      	ldr	r1, [pc, #48]	; (8000534 <main+0x6c>)
 8000504:	480c      	ldr	r0, [pc, #48]	; (8000538 <main+0x70>)
 8000506:	f000 fc90 	bl	8000e2a <xTaskCreate>
						NULL,		/* We are not using the task parameter. */
						2,			/* This task will run at priority 2. */
						NULL );		/* We are not using the task handle. */

		/* Create one of the two tasks. */
		xTaskCreate(	vBlueLedTask,		/* Pointer to the function that implements the task. */
 800050a:	2300      	movs	r3, #0
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2301      	movs	r3, #1
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2300      	movs	r3, #0
 8000514:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000518:	4908      	ldr	r1, [pc, #32]	; (800053c <main+0x74>)
 800051a:	4809      	ldr	r0, [pc, #36]	; (8000540 <main+0x78>)
 800051c:	f000 fc85 	bl	8000e2a <xTaskCreate>

	}

	/* Start the scheduler so our tasks start executing. */

   vTaskStartScheduler();
 8000520:	f000 fe04 	bl	800112c <vTaskStartScheduler>

  while (1)
 8000524:	e7fe      	b.n	8000524 <main+0x5c>
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000
 800052c:	40010800 	.word	0x40010800
 8000530:	2000283c 	.word	0x2000283c
 8000534:	08001d00 	.word	0x08001d00
 8000538:	0800048d 	.word	0x0800048d
 800053c:	08001d08 	.word	0x08001d08
 8000540:	08000449 	.word	0x08000449

08000544 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	3b04      	subs	r3, #4
 8000554:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800055c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	3b04      	subs	r3, #4
 8000562:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	f023 0201 	bic.w	r2, r3, #1
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	3b04      	subs	r3, #4
 8000572:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000574:	4a08      	ldr	r2, [pc, #32]	; (8000598 <pxPortInitialiseStack+0x54>)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	3b14      	subs	r3, #20
 800057e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	3b20      	subs	r3, #32
 800058a:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800058c:	68fb      	ldr	r3, [r7, #12]
}
 800058e:	4618      	mov	r0, r3
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	0800059d 	.word	0x0800059d

0800059c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	603b      	str	r3, [r7, #0]

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80005aa:	f383 8811 	msr	BASEPRI, r3
 80005ae:	f3bf 8f6f 	isb	sy
 80005b2:	f3bf 8f4f 	dsb	sy
 80005b6:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b8:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80005ba:	bf00      	nop
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0fc      	beq.n	80005bc <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80005c2:	bf00      	nop
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr
	...

080005d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80005d0:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <pxCurrentTCBConst2>)
 80005d2:	6819      	ldr	r1, [r3, #0]
 80005d4:	6808      	ldr	r0, [r1, #0]
 80005d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80005da:	f380 8809 	msr	PSP, r0
 80005de:	f3bf 8f6f 	isb	sy
 80005e2:	f04f 0000 	mov.w	r0, #0
 80005e6:	f380 8811 	msr	BASEPRI, r0
 80005ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80005ee:	4770      	bx	lr

080005f0 <pxCurrentTCBConst2>:
 80005f0:	20002840 	.word	0x20002840
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop

080005f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 80005f8:	4806      	ldr	r0, [pc, #24]	; (8000614 <prvPortStartFirstTask+0x1c>)
 80005fa:	6800      	ldr	r0, [r0, #0]
 80005fc:	6800      	ldr	r0, [r0, #0]
 80005fe:	f380 8808 	msr	MSP, r0
 8000602:	b662      	cpsie	i
 8000604:	b661      	cpsie	f
 8000606:	f3bf 8f4f 	dsb	sy
 800060a:	f3bf 8f6f 	isb	sy
 800060e:	df00      	svc	0
 8000610:	bf00      	nop
 8000612:	0000      	.short	0x0000
 8000614:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000618:	bf00      	nop
 800061a:	bf00      	nop

0800061c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
            *pucFirstUserPriorityRegister = ulOriginalPriority;
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <xPortStartScheduler+0x38>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a0b      	ldr	r2, [pc, #44]	; (8000654 <xPortStartScheduler+0x38>)
 8000626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800062a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <xPortStartScheduler+0x38>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a08      	ldr	r2, [pc, #32]	; (8000654 <xPortStartScheduler+0x38>)
 8000632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000636:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8000638:	f000 f890 	bl	800075c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <xPortStartScheduler+0x3c>)
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000642:	f7ff ffd9 	bl	80005f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8000646:	f000 ffad 	bl	80015a4 <vTaskSwitchContext>
    prvTaskExitError();
 800064a:	f7ff ffa7 	bl	800059c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800064e:	2300      	movs	r3, #0
}
 8000650:	4618      	mov	r0, r3
 8000652:	bd80      	pop	{r7, pc}
 8000654:	e000ed20 	.word	0xe000ed20
 8000658:	20000004 	.word	0x20000004

0800065c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
        __asm volatile
 8000662:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000666:	f383 8811 	msr	BASEPRI, r3
 800066a:	f3bf 8f6f 	isb	sy
 800066e:	f3bf 8f4f 	dsb	sy
 8000672:	607b      	str	r3, [r7, #4]
    }
 8000674:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <vPortEnterCritical+0x30>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	3301      	adds	r3, #1
 800067c:	4a03      	ldr	r2, [pc, #12]	; (800068c <vPortEnterCritical+0x30>)
 800067e:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000004 	.word	0x20000004

08000690 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <vPortExitCritical+0x30>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	3b01      	subs	r3, #1
 800069c:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <vPortExitCritical+0x30>)
 800069e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <vPortExitCritical+0x30>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d105      	bne.n	80006b4 <vPortExitCritical+0x24>
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80006b2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	20000004 	.word	0x20000004
	...

080006d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80006d0:	f3ef 8009 	mrs	r0, PSP
 80006d4:	f3bf 8f6f 	isb	sy
 80006d8:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <pxCurrentTCBConst>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80006e0:	6010      	str	r0, [r2, #0]
 80006e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80006e6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80006ea:	f380 8811 	msr	BASEPRI, r0
 80006ee:	f000 ff59 	bl	80015a4 <vTaskSwitchContext>
 80006f2:	f04f 0000 	mov.w	r0, #0
 80006f6:	f380 8811 	msr	BASEPRI, r0
 80006fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006fe:	6819      	ldr	r1, [r3, #0]
 8000700:	6808      	ldr	r0, [r1, #0]
 8000702:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000706:	f380 8809 	msr	PSP, r0
 800070a:	f3bf 8f6f 	isb	sy
 800070e:	4770      	bx	lr

08000710 <pxCurrentTCBConst>:
 8000710:	20002840 	.word	0x20002840
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000714:	bf00      	nop
 8000716:	bf00      	nop

08000718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
        __asm volatile
 800071e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000722:	f383 8811 	msr	BASEPRI, r3
 8000726:	f3bf 8f6f 	isb	sy
 800072a:	f3bf 8f4f 	dsb	sy
 800072e:	607b      	str	r3, [r7, #4]
    }
 8000730:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000732:	f000 fe31 	bl	8001398 <xTaskIncrementTick>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d003      	beq.n	8000744 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <SysTick_Handler+0x40>)
 800073e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	2300      	movs	r3, #0
 8000746:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	f383 8811 	msr	BASEPRI, r3
    }
 800074e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	e000ed04 	.word	0xe000ed04

0800075c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <vPortSetupTimerInterrupt+0x28>)
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <vPortSetupTimerInterrupt+0x2c>)
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <vPortSetupTimerInterrupt+0x30>)
 800076e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000772:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000774:	4b03      	ldr	r3, [pc, #12]	; (8000784 <vPortSetupTimerInterrupt+0x28>)
 8000776:	2207      	movs	r2, #7
 8000778:	601a      	str	r2, [r3, #0]
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000e010 	.word	0xe000e010
 8000788:	e000e018 	.word	0xe000e018
 800078c:	e000e014 	.word	0xe000e014

08000790 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800079a:	2301      	movs	r3, #1
 800079c:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d05d      	beq.n	8000864 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d059      	beq.n	8000864 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007b8:	2100      	movs	r1, #0
 80007ba:	fba3 2302 	umull	r2, r3, r3, r2
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d000      	beq.n	80007c4 <xQueueGenericReset+0x34>
 80007c2:	2101      	movs	r1, #1
 80007c4:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d14c      	bne.n	8000864 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 80007ca:	f7ff ff47 	bl	800065c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007d6:	68b9      	ldr	r1, [r7, #8]
 80007d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80007da:	fb01 f303 	mul.w	r3, r1, r3
 80007de:	441a      	add	r2, r3
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	2200      	movs	r2, #0
 80007e8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007fa:	3b01      	subs	r3, #1
 80007fc:	68b9      	ldr	r1, [r7, #8]
 80007fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000800:	fb01 f303 	mul.w	r3, r1, r3
 8000804:	441a      	add	r2, r3
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	22ff      	movs	r2, #255	; 0xff
 800080e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	22ff      	movs	r2, #255	; 0xff
 8000816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d114      	bne.n	800084a <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	691b      	ldr	r3, [r3, #16]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d01a      	beq.n	800085e <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	3310      	adds	r3, #16
 800082c:	4618      	mov	r0, r3
 800082e:	f000 ff15 	bl	800165c <xTaskRemoveFromEventList>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d012      	beq.n	800085e <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <xQueueGenericReset+0xe4>)
 800083a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	f3bf 8f4f 	dsb	sy
 8000844:	f3bf 8f6f 	isb	sy
 8000848:	e009      	b.n	800085e <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	3310      	adds	r3, #16
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fd6e 	bl	8000330 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	3324      	adds	r3, #36	; 0x24
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fd69 	bl	8000330 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800085e:	f7ff ff17 	bl	8000690 <vPortExitCritical>
 8000862:	e001      	b.n	8000868 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000868:	68fb      	ldr	r3, [r7, #12]
}
 800086a:	4618      	mov	r0, r3
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	e000ed04 	.word	0xe000ed04

08000878 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	; 0x28
 800087c:	af02      	add	r7, sp, #8
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	4613      	mov	r3, r2
 8000884:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d02d      	beq.n	80008ec <xQueueGenericCreate+0x74>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000890:	2100      	movs	r1, #0
 8000892:	68ba      	ldr	r2, [r7, #8]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	fba3 2302 	umull	r2, r3, r3, r2
 800089a:	2b00      	cmp	r3, #0
 800089c:	d000      	beq.n	80008a0 <xQueueGenericCreate+0x28>
 800089e:	2101      	movs	r1, #1
 80008a0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d122      	bne.n	80008ec <xQueueGenericCreate+0x74>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	68ba      	ldr	r2, [r7, #8]
 80008aa:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80008ae:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80008b2:	d81b      	bhi.n	80008ec <xQueueGenericCreate+0x74>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	68ba      	ldr	r2, [r7, #8]
 80008b8:	fb02 f303 	mul.w	r3, r2, r3
 80008bc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80008be:	69bb      	ldr	r3, [r7, #24]
 80008c0:	3350      	adds	r3, #80	; 0x50
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fc44 	bl	8000150 <pvPortMalloc>
 80008c8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d00d      	beq.n	80008ec <xQueueGenericCreate+0x74>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80008d0:	69fb      	ldr	r3, [r7, #28]
 80008d2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	3350      	adds	r3, #80	; 0x50
 80008d8:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80008da:	79fa      	ldrb	r2, [r7, #7]
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	4613      	mov	r3, r2
 80008e2:	697a      	ldr	r2, [r7, #20]
 80008e4:	68b9      	ldr	r1, [r7, #8]
 80008e6:	68f8      	ldr	r0, [r7, #12]
 80008e8:	f000 f805 	bl	80008f6 <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80008ec:	69fb      	ldr	r3, [r7, #28]
    }
 80008ee:	4618      	mov	r0, r3
 80008f0:	3720      	adds	r7, #32
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b084      	sub	sp, #16
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	60f8      	str	r0, [r7, #12]
 80008fe:	60b9      	str	r1, [r7, #8]
 8000900:	607a      	str	r2, [r7, #4]
 8000902:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d103      	bne.n	8000912 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	e002      	b.n	8000918 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	68ba      	ldr	r2, [r7, #8]
 8000922:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000924:	2101      	movs	r1, #1
 8000926:	69b8      	ldr	r0, [r7, #24]
 8000928:	f7ff ff32 	bl	8000790 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	78fa      	ldrb	r2, [r7, #3]
 8000930:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
 8000948:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000952:	f7ff fe83 	bl	800065c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000956:	6a3b      	ldr	r3, [r7, #32]
 8000958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800095a:	6a3b      	ldr	r3, [r7, #32]
 800095c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800095e:	429a      	cmp	r2, r3
 8000960:	d302      	bcc.n	8000968 <xQueueGenericSend+0x2c>
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	2b02      	cmp	r3, #2
 8000966:	d129      	bne.n	80009bc <xQueueGenericSend+0x80>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	68b9      	ldr	r1, [r7, #8]
 800096c:	6a38      	ldr	r0, [r7, #32]
 800096e:	f000 f931 	bl	8000bd4 <prvCopyDataToQueue>
 8000972:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000974:	6a3b      	ldr	r3, [r7, #32]
 8000976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000978:	2b00      	cmp	r3, #0
 800097a:	d010      	beq.n	800099e <xQueueGenericSend+0x62>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800097c:	6a3b      	ldr	r3, [r7, #32]
 800097e:	3324      	adds	r3, #36	; 0x24
 8000980:	4618      	mov	r0, r3
 8000982:	f000 fe6b 	bl	800165c <xTaskRemoveFromEventList>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d013      	beq.n	80009b4 <xQueueGenericSend+0x78>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800098c:	4b3f      	ldr	r3, [pc, #252]	; (8000a8c <xQueueGenericSend+0x150>)
 800098e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	f3bf 8f4f 	dsb	sy
 8000998:	f3bf 8f6f 	isb	sy
 800099c:	e00a      	b.n	80009b4 <xQueueGenericSend+0x78>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d007      	beq.n	80009b4 <xQueueGenericSend+0x78>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80009a4:	4b39      	ldr	r3, [pc, #228]	; (8000a8c <xQueueGenericSend+0x150>)
 80009a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	f3bf 8f4f 	dsb	sy
 80009b0:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80009b4:	f7ff fe6c 	bl	8000690 <vPortExitCritical>
                return pdPASS;
 80009b8:	2301      	movs	r3, #1
 80009ba:	e063      	b.n	8000a84 <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d103      	bne.n	80009ca <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80009c2:	f7ff fe65 	bl	8000690 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	e05c      	b.n	8000a84 <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 80009ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d106      	bne.n	80009de <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 ff09 	bl	80017ec <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80009da:	2301      	movs	r3, #1
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80009de:	f7ff fe57 	bl	8000690 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80009e2:	f000 fbdf 	bl	80011a4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80009e6:	f7ff fe39 	bl	800065c <vPortEnterCritical>
 80009ea:	6a3b      	ldr	r3, [r7, #32]
 80009ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80009f0:	b25b      	sxtb	r3, r3
 80009f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009f6:	d103      	bne.n	8000a00 <xQueueGenericSend+0xc4>
 80009f8:	6a3b      	ldr	r3, [r7, #32]
 80009fa:	2200      	movs	r2, #0
 80009fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a00:	6a3b      	ldr	r3, [r7, #32]
 8000a02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a06:	b25b      	sxtb	r3, r3
 8000a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a0c:	d103      	bne.n	8000a16 <xQueueGenericSend+0xda>
 8000a0e:	6a3b      	ldr	r3, [r7, #32]
 8000a10:	2200      	movs	r2, #0
 8000a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000a16:	f7ff fe3b 	bl	8000690 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a1a:	1d3a      	adds	r2, r7, #4
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4611      	mov	r1, r2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 fef8 	bl	8001818 <xTaskCheckForTimeOut>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d124      	bne.n	8000a78 <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a2e:	6a38      	ldr	r0, [r7, #32]
 8000a30:	f000 f9c8 	bl	8000dc4 <prvIsQueueFull>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d018      	beq.n	8000a6c <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a3a:	6a3b      	ldr	r3, [r7, #32]
 8000a3c:	3310      	adds	r3, #16
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	4611      	mov	r1, r2
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 fdf4 	bl	8001630 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000a48:	6a38      	ldr	r0, [r7, #32]
 8000a4a:	f000 f953 	bl	8000cf4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000a4e:	f000 fbb7 	bl	80011c0 <xTaskResumeAll>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	f47f af7c 	bne.w	8000952 <xQueueGenericSend+0x16>
                {
                    portYIELD_WITHIN_API();
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <xQueueGenericSend+0x150>)
 8000a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	f3bf 8f4f 	dsb	sy
 8000a66:	f3bf 8f6f 	isb	sy
 8000a6a:	e772      	b.n	8000952 <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000a6c:	6a38      	ldr	r0, [r7, #32]
 8000a6e:	f000 f941 	bl	8000cf4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000a72:	f000 fba5 	bl	80011c0 <xTaskResumeAll>
 8000a76:	e76c      	b.n	8000952 <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000a78:	6a38      	ldr	r0, [r7, #32]
 8000a7a:	f000 f93b 	bl	8000cf4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000a7e:	f000 fb9f 	bl	80011c0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8000a82:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3728      	adds	r7, #40	; 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	e000ed04 	.word	0xe000ed04

08000a90 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	623b      	str	r3, [r7, #32]
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000aa4:	f7ff fdda 	bl	800065c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
 8000aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aac:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d01f      	beq.n	8000af4 <xQueueReceive+0x64>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000ab4:	68b9      	ldr	r1, [r7, #8]
 8000ab6:	6a38      	ldr	r0, [r7, #32]
 8000ab8:	f000 f8f6 	bl	8000ca8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	1e5a      	subs	r2, r3, #1
 8000ac0:	6a3b      	ldr	r3, [r7, #32]
 8000ac2:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ac4:	6a3b      	ldr	r3, [r7, #32]
 8000ac6:	691b      	ldr	r3, [r3, #16]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d00f      	beq.n	8000aec <xQueueReceive+0x5c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000acc:	6a3b      	ldr	r3, [r7, #32]
 8000ace:	3310      	adds	r3, #16
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 fdc3 	bl	800165c <xTaskRemoveFromEventList>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d007      	beq.n	8000aec <xQueueReceive+0x5c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000adc:	4b3c      	ldr	r3, [pc, #240]	; (8000bd0 <xQueueReceive+0x140>)
 8000ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	f3bf 8f4f 	dsb	sy
 8000ae8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000aec:	f7ff fdd0 	bl	8000690 <vPortExitCritical>
                return pdPASS;
 8000af0:	2301      	movs	r3, #1
 8000af2:	e069      	b.n	8000bc8 <xQueueReceive+0x138>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d103      	bne.n	8000b02 <xQueueReceive+0x72>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000afa:	f7ff fdc9 	bl	8000690 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e062      	b.n	8000bc8 <xQueueReceive+0x138>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d106      	bne.n	8000b16 <xQueueReceive+0x86>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 fe6d 	bl	80017ec <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000b12:	2301      	movs	r3, #1
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000b16:	f7ff fdbb 	bl	8000690 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000b1a:	f000 fb43 	bl	80011a4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000b1e:	f7ff fd9d 	bl	800065c <vPortEnterCritical>
 8000b22:	6a3b      	ldr	r3, [r7, #32]
 8000b24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000b28:	b25b      	sxtb	r3, r3
 8000b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b2e:	d103      	bne.n	8000b38 <xQueueReceive+0xa8>
 8000b30:	6a3b      	ldr	r3, [r7, #32]
 8000b32:	2200      	movs	r2, #0
 8000b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000b38:	6a3b      	ldr	r3, [r7, #32]
 8000b3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b3e:	b25b      	sxtb	r3, r3
 8000b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b44:	d103      	bne.n	8000b4e <xQueueReceive+0xbe>
 8000b46:	6a3b      	ldr	r3, [r7, #32]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000b4e:	f7ff fd9f 	bl	8000690 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000b52:	1d3a      	adds	r2, r7, #4
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4611      	mov	r1, r2
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 fe5c 	bl	8001818 <xTaskCheckForTimeOut>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d123      	bne.n	8000bae <xQueueReceive+0x11e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000b66:	6a38      	ldr	r0, [r7, #32]
 8000b68:	f000 f916 	bl	8000d98 <prvIsQueueEmpty>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d017      	beq.n	8000ba2 <xQueueReceive+0x112>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000b72:	6a3b      	ldr	r3, [r7, #32]
 8000b74:	3324      	adds	r3, #36	; 0x24
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 fd58 	bl	8001630 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000b80:	6a38      	ldr	r0, [r7, #32]
 8000b82:	f000 f8b7 	bl	8000cf4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000b86:	f000 fb1b 	bl	80011c0 <xTaskResumeAll>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d189      	bne.n	8000aa4 <xQueueReceive+0x14>
                {
                    portYIELD_WITHIN_API();
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <xQueueReceive+0x140>)
 8000b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	f3bf 8f4f 	dsb	sy
 8000b9c:	f3bf 8f6f 	isb	sy
 8000ba0:	e780      	b.n	8000aa4 <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000ba2:	6a38      	ldr	r0, [r7, #32]
 8000ba4:	f000 f8a6 	bl	8000cf4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ba8:	f000 fb0a 	bl	80011c0 <xTaskResumeAll>
 8000bac:	e77a      	b.n	8000aa4 <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000bae:	6a38      	ldr	r0, [r7, #32]
 8000bb0:	f000 f8a0 	bl	8000cf4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000bb4:	f000 fb04 	bl	80011c0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000bb8:	6a38      	ldr	r0, [r7, #32]
 8000bba:	f000 f8ed 	bl	8000d98 <prvIsQueueEmpty>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	f43f af6f 	beq.w	8000aa4 <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000bc6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3728      	adds	r7, #40	; 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	e000ed04 	.word	0xe000ed04

08000bd4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000be8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d10d      	bne.n	8000c0e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d14d      	bne.n	8000c96 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 ff10 	bl	8001a24 <xTaskPriorityDisinherit>
 8000c04:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	e043      	b.n	8000c96 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d119      	bne.n	8000c48 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	6858      	ldr	r0, [r3, #4]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	68b9      	ldr	r1, [r7, #8]
 8000c20:	f001 f84c 	bl	8001cbc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	685a      	ldr	r2, [r3, #4]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2c:	441a      	add	r2, r3
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	685a      	ldr	r2, [r3, #4]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d32b      	bcc.n	8000c96 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	e026      	b.n	8000c96 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	68d8      	ldr	r0, [r3, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c50:	461a      	mov	r2, r3
 8000c52:	68b9      	ldr	r1, [r7, #8]
 8000c54:	f001 f832 	bl	8001cbc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	68da      	ldr	r2, [r3, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	425b      	negs	r3, r3
 8000c62:	441a      	add	r2, r3
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	68da      	ldr	r2, [r3, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d207      	bcs.n	8000c84 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	689a      	ldr	r2, [r3, #8]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	425b      	negs	r3, r3
 8000c7e:	441a      	add	r2, r3
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d105      	bne.n	8000c96 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d002      	beq.n	8000c96 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	1c5a      	adds	r2, r3, #1
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000c9e:	697b      	ldr	r3, [r7, #20]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d018      	beq.n	8000cec <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	68da      	ldr	r2, [r3, #12]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	441a      	add	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	68da      	ldr	r2, [r3, #12]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d303      	bcc.n	8000cdc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	68d9      	ldr	r1, [r3, #12]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	6838      	ldr	r0, [r7, #0]
 8000ce8:	f000 ffe8 	bl	8001cbc <memcpy>
    }
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000cfc:	f7ff fcae 	bl	800065c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d06:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000d08:	e011      	b.n	8000d2e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d012      	beq.n	8000d38 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3324      	adds	r3, #36	; 0x24
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 fca0 	bl	800165c <xTaskRemoveFromEventList>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000d22:	f000 fdc3 	bl	80018ac <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	dce9      	bgt.n	8000d0a <prvUnlockQueue+0x16>
 8000d36:	e000      	b.n	8000d3a <prvUnlockQueue+0x46>
                        break;
 8000d38:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	22ff      	movs	r2, #255	; 0xff
 8000d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000d42:	f7ff fca5 	bl	8000690 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000d46:	f7ff fc89 	bl	800065c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d50:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000d52:	e011      	b.n	8000d78 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	691b      	ldr	r3, [r3, #16]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d012      	beq.n	8000d82 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3310      	adds	r3, #16
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 fc7b 	bl	800165c <xTaskRemoveFromEventList>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000d6c:	f000 fd9e 	bl	80018ac <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000d70:	7bbb      	ldrb	r3, [r7, #14]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000d78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	dce9      	bgt.n	8000d54 <prvUnlockQueue+0x60>
 8000d80:	e000      	b.n	8000d84 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000d82:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	22ff      	movs	r2, #255	; 0xff
 8000d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000d8c:	f7ff fc80 	bl	8000690 <vPortExitCritical>
}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000da0:	f7ff fc5c 	bl	800065c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d102      	bne.n	8000db2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000dac:	2301      	movs	r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	e001      	b.n	8000db6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000db6:	f7ff fc6b 	bl	8000690 <vPortExitCritical>

    return xReturn;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000dcc:	f7ff fc46 	bl	800065c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d102      	bne.n	8000de2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	e001      	b.n	8000de6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000de6:	f7ff fc53 	bl	8000690 <vPortExitCritical>

    return xReturn;
 8000dea:	68fb      	ldr	r3, [r7, #12]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <NMI_Handler+0x4>

08000dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <HardFault_Handler+0x4>

08000e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <MemManage_Handler+0x4>

08000e06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <BusFault_Handler+0x4>

08000e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <UsageFault_Handler+0x4>

08000e12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr

08000e1e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr

08000e2a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b08c      	sub	sp, #48	; 0x30
 8000e2e:	af04      	add	r7, sp, #16
 8000e30:	60f8      	str	r0, [r7, #12]
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	4613      	mov	r3, r2
 8000e38:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff f986 	bl	8000150 <pvPortMalloc>
 8000e44:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d00e      	beq.n	8000e6a <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000e4c:	205c      	movs	r0, #92	; 0x5c
 8000e4e:	f7ff f97f 	bl	8000150 <pvPortMalloc>
 8000e52:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	631a      	str	r2, [r3, #48]	; 0x30
 8000e60:	e005      	b.n	8000e6e <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8000e62:	6978      	ldr	r0, [r7, #20]
 8000e64:	f7ff fa02 	bl	800026c <vPortFree>
 8000e68:	e001      	b.n	8000e6e <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d013      	beq.n	8000e9c <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000e74:	88fa      	ldrh	r2, [r7, #6]
 8000e76:	2300      	movs	r3, #0
 8000e78:	9303      	str	r3, [sp, #12]
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	9302      	str	r3, [sp, #8]
 8000e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e80:	9301      	str	r3, [sp, #4]
 8000e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	68b9      	ldr	r1, [r7, #8]
 8000e8a:	68f8      	ldr	r0, [r7, #12]
 8000e8c:	f000 f80e 	bl	8000eac <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000e90:	69f8      	ldr	r0, [r7, #28]
 8000e92:	f000 f891 	bl	8000fb8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000e96:	2301      	movs	r3, #1
 8000e98:	61bb      	str	r3, [r7, #24]
 8000e9a:	e002      	b.n	8000ea2 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000ea2:	69bb      	ldr	r3, [r7, #24]
    }
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3720      	adds	r7, #32
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
 8000eb8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ebc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	21a5      	movs	r1, #165	; 0xa5
 8000ec6:	f000 ff07 	bl	8001cd8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	f023 0307 	bic.w	r3, r3, #7
 8000ee2:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d01f      	beq.n	8000f2a <prvInitialiseNewTask+0x7e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	e012      	b.n	8000f16 <prvInitialiseNewTask+0x6a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000ef0:	68ba      	ldr	r2, [r7, #8]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	7819      	ldrb	r1, [r3, #0]
 8000ef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	4413      	add	r3, r2
 8000efe:	3334      	adds	r3, #52	; 0x34
 8000f00:	460a      	mov	r2, r1
 8000f02:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000f04:	68ba      	ldr	r2, [r7, #8]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	4413      	add	r3, r2
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d006      	beq.n	8000f1e <prvInitialiseNewTask+0x72>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	3301      	adds	r3, #1
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	2b0f      	cmp	r3, #15
 8000f1a:	d9e9      	bls.n	8000ef0 <prvInitialiseNewTask+0x44>
 8000f1c:	e000      	b.n	8000f20 <prvInitialiseNewTask+0x74>
            {
                break;
 8000f1e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000f28:	e003      	b.n	8000f32 <prvInitialiseNewTask+0x86>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	2b05      	cmp	r3, #5
 8000f36:	d901      	bls.n	8000f3c <prvInitialiseNewTask+0x90>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000f38:	2305      	movs	r3, #5
 8000f3a:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3e:	6a3a      	ldr	r2, [r7, #32]
 8000f40:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8000f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f44:	6a3a      	ldr	r2, [r7, #32]
 8000f46:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8000f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f50:	3304      	adds	r3, #4
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fa0b 	bl	800036e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5a:	3318      	adds	r3, #24
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fa06 	bl	800036e <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f66:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f68:	6a3b      	ldr	r3, [r7, #32]
 8000f6a:	f1c3 0206 	rsb	r2, r3, #6
 8000f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f70:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f7a:	3354      	adds	r3, #84	; 0x54
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 fea9 	bl	8001cd8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8000f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f88:	3358      	adds	r3, #88	; 0x58
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 fea2 	bl	8001cd8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	68f9      	ldr	r1, [r7, #12]
 8000f98:	6938      	ldr	r0, [r7, #16]
 8000f9a:	f7ff fad3 	bl	8000544 <pxPortInitialiseStack>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa2:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d002      	beq.n	8000fb0 <prvInitialiseNewTask+0x104>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fae:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000fb0:	bf00      	nop
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000fc0:	f7ff fb4c 	bl	800065c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000fc4:	4b40      	ldr	r3, [pc, #256]	; (80010c8 <prvAddNewTaskToReadyList+0x110>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	4a3f      	ldr	r2, [pc, #252]	; (80010c8 <prvAddNewTaskToReadyList+0x110>)
 8000fcc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000fce:	4b3f      	ldr	r3, [pc, #252]	; (80010cc <prvAddNewTaskToReadyList+0x114>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d109      	bne.n	8000fea <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000fd6:	4a3d      	ldr	r2, [pc, #244]	; (80010cc <prvAddNewTaskToReadyList+0x114>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000fdc:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <prvAddNewTaskToReadyList+0x110>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d110      	bne.n	8001006 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000fe4:	f000 fc86 	bl	80018f4 <prvInitialiseTaskLists>
 8000fe8:	e00d      	b.n	8001006 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000fea:	4b39      	ldr	r3, [pc, #228]	; (80010d0 <prvAddNewTaskToReadyList+0x118>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d109      	bne.n	8001006 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000ff2:	4b36      	ldr	r3, [pc, #216]	; (80010cc <prvAddNewTaskToReadyList+0x114>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d802      	bhi.n	8001006 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001000:	4a32      	ldr	r2, [pc, #200]	; (80010cc <prvAddNewTaskToReadyList+0x114>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001006:	4b33      	ldr	r3, [pc, #204]	; (80010d4 <prvAddNewTaskToReadyList+0x11c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	3301      	adds	r3, #1
 800100c:	4a31      	ldr	r2, [pc, #196]	; (80010d4 <prvAddNewTaskToReadyList+0x11c>)
 800100e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001010:	4b30      	ldr	r3, [pc, #192]	; (80010d4 <prvAddNewTaskToReadyList+0x11c>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101c:	2201      	movs	r2, #1
 800101e:	409a      	lsls	r2, r3
 8001020:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <prvAddNewTaskToReadyList+0x120>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4313      	orrs	r3, r2
 8001026:	4a2c      	ldr	r2, [pc, #176]	; (80010d8 <prvAddNewTaskToReadyList+0x120>)
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800102e:	492b      	ldr	r1, [pc, #172]	; (80010dc <prvAddNewTaskToReadyList+0x124>)
 8001030:	4613      	mov	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	440b      	add	r3, r1
 800103a:	3304      	adds	r3, #4
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	3204      	adds	r2, #4
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	1d1a      	adds	r2, r3, #4
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001064:	4613      	mov	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4a1b      	ldr	r2, [pc, #108]	; (80010dc <prvAddNewTaskToReadyList+0x124>)
 800106e:	441a      	add	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	615a      	str	r2, [r3, #20]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001078:	4918      	ldr	r1, [pc, #96]	; (80010dc <prvAddNewTaskToReadyList+0x124>)
 800107a:	4613      	mov	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	440b      	add	r3, r1
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	1c59      	adds	r1, r3, #1
 8001088:	4814      	ldr	r0, [pc, #80]	; (80010dc <prvAddNewTaskToReadyList+0x124>)
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4403      	add	r3, r0
 8001094:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001096:	f7ff fafb 	bl	8000690 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800109a:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <prvAddNewTaskToReadyList+0x118>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d00e      	beq.n	80010c0 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <prvAddNewTaskToReadyList+0x114>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d207      	bcs.n	80010c0 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <prvAddNewTaskToReadyList+0x128>)
 80010b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	f3bf 8f4f 	dsb	sy
 80010bc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80010c0:	bf00      	nop
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	2000292c 	.word	0x2000292c
 80010cc:	20002840 	.word	0x20002840
 80010d0:	20002938 	.word	0x20002938
 80010d4:	20002948 	.word	0x20002948
 80010d8:	20002934 	.word	0x20002934
 80010dc:	20002844 	.word	0x20002844
 80010e0:	e000ed04 	.word	0xe000ed04

080010e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d008      	beq.n	8001108 <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 80010f6:	f000 f855 	bl	80011a4 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80010fa:	2100      	movs	r1, #0
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f000 fd13 	bl	8001b28 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001102:	f000 f85d 	bl	80011c0 <xTaskResumeAll>
 8001106:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d107      	bne.n	800111e <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <vTaskDelay+0x44>)
 8001110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	f3bf 8f4f 	dsb	sy
 800111a:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	e000ed04 	.word	0xe000ed04

0800112c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <vTaskStartScheduler+0x5c>)
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	2300      	movs	r3, #0
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2300      	movs	r3, #0
 800113c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001140:	4912      	ldr	r1, [pc, #72]	; (800118c <vTaskStartScheduler+0x60>)
 8001142:	4813      	ldr	r0, [pc, #76]	; (8001190 <vTaskStartScheduler+0x64>)
 8001144:	f7ff fe71 	bl	8000e2a <xTaskCreate>
 8001148:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d115      	bne.n	800117c <vTaskStartScheduler+0x50>
        __asm volatile
 8001150:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001154:	f383 8811 	msr	BASEPRI, r3
 8001158:	f3bf 8f6f 	isb	sy
 800115c:	f3bf 8f4f 	dsb	sy
 8001160:	603b      	str	r3, [r7, #0]
    }
 8001162:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <vTaskStartScheduler+0x68>)
 8001166:	f04f 32ff 	mov.w	r2, #4294967295
 800116a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <vTaskStartScheduler+0x6c>)
 800116e:	2201      	movs	r2, #1
 8001170:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <vTaskStartScheduler+0x70>)
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001178:	f7ff fa50 	bl	800061c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <vTaskStartScheduler+0x74>)
 800117e:	681b      	ldr	r3, [r3, #0]
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20002950 	.word	0x20002950
 800118c:	08001d10 	.word	0x08001d10
 8001190:	080018c5 	.word	0x080018c5
 8001194:	2000294c 	.word	0x2000294c
 8001198:	20002938 	.word	0x20002938
 800119c:	20002930 	.word	0x20002930
 80011a0:	20000008 	.word	0x20000008

080011a4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <vTaskSuspendAll+0x18>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	4a03      	ldr	r2, [pc, #12]	; (80011bc <vTaskSuspendAll+0x18>)
 80011b0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20002954 	.word	0x20002954

080011c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80011ce:	f7ff fa45 	bl	800065c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80011d2:	4b68      	ldr	r3, [pc, #416]	; (8001374 <xTaskResumeAll+0x1b4>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	4a66      	ldr	r2, [pc, #408]	; (8001374 <xTaskResumeAll+0x1b4>)
 80011da:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80011dc:	4b65      	ldr	r3, [pc, #404]	; (8001374 <xTaskResumeAll+0x1b4>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f040 80c0 	bne.w	8001366 <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80011e6:	4b64      	ldr	r3, [pc, #400]	; (8001378 <xTaskResumeAll+0x1b8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 80bb 	beq.w	8001366 <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80011f0:	e08a      	b.n	8001308 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80011f2:	4b62      	ldr	r3, [pc, #392]	; (800137c <xTaskResumeAll+0x1bc>)
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	69db      	ldr	r3, [r3, #28]
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	6a12      	ldr	r2, [r2, #32]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	6a1b      	ldr	r3, [r3, #32]
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	69d2      	ldr	r2, [r2, #28]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	3318      	adds	r3, #24
 800121c:	429a      	cmp	r2, r3
 800121e:	d103      	bne.n	8001228 <xTaskResumeAll+0x68>
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	6a1a      	ldr	r2, [r3, #32]
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	2200      	movs	r2, #0
 800122c:	629a      	str	r2, [r3, #40]	; 0x28
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	1e5a      	subs	r2, r3, #1
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	68d2      	ldr	r2, [r2, #12]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	6892      	ldr	r2, [r2, #8]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	3304      	adds	r3, #4
 800125a:	429a      	cmp	r2, r3
 800125c:	d103      	bne.n	8001266 <xTaskResumeAll+0xa6>
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	2200      	movs	r2, #0
 800126a:	615a      	str	r2, [r3, #20]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	1e5a      	subs	r2, r3, #1
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127a:	2201      	movs	r2, #1
 800127c:	409a      	lsls	r2, r3
 800127e:	4b40      	ldr	r3, [pc, #256]	; (8001380 <xTaskResumeAll+0x1c0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4313      	orrs	r3, r2
 8001284:	4a3e      	ldr	r2, [pc, #248]	; (8001380 <xTaskResumeAll+0x1c0>)
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800128c:	493d      	ldr	r1, [pc, #244]	; (8001384 <xTaskResumeAll+0x1c4>)
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	440b      	add	r3, r1
 8001298:	3304      	adds	r3, #4
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	3204      	adds	r2, #4
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	1d1a      	adds	r2, r3, #4
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c2:	4613      	mov	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4a2e      	ldr	r2, [pc, #184]	; (8001384 <xTaskResumeAll+0x1c4>)
 80012cc:	441a      	add	r2, r3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	615a      	str	r2, [r3, #20]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012d6:	492b      	ldr	r1, [pc, #172]	; (8001384 <xTaskResumeAll+0x1c4>)
 80012d8:	4613      	mov	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	440b      	add	r3, r1
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	1c59      	adds	r1, r3, #1
 80012e6:	4827      	ldr	r0, [pc, #156]	; (8001384 <xTaskResumeAll+0x1c4>)
 80012e8:	4613      	mov	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4403      	add	r3, r0
 80012f2:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012f8:	4b23      	ldr	r3, [pc, #140]	; (8001388 <xTaskResumeAll+0x1c8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fe:	429a      	cmp	r2, r3
 8001300:	d302      	bcc.n	8001308 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 8001302:	4b22      	ldr	r3, [pc, #136]	; (800138c <xTaskResumeAll+0x1cc>)
 8001304:	2201      	movs	r2, #1
 8001306:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001308:	4b1c      	ldr	r3, [pc, #112]	; (800137c <xTaskResumeAll+0x1bc>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	f47f af70 	bne.w	80011f2 <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001318:	f000 fb6a 	bl	80019f0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800131c:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <xTaskResumeAll+0x1d0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d010      	beq.n	800134a <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001328:	f000 f836 	bl	8001398 <xTaskIncrementTick>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d002      	beq.n	8001338 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <xTaskResumeAll+0x1cc>)
 8001334:	2201      	movs	r2, #1
 8001336:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3b01      	subs	r3, #1
 800133c:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f1      	bne.n	8001328 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <xTaskResumeAll+0x1d0>)
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <xTaskResumeAll+0x1cc>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d009      	beq.n	8001366 <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001352:	2301      	movs	r3, #1
 8001354:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <xTaskResumeAll+0x1d4>)
 8001358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	f3bf 8f4f 	dsb	sy
 8001362:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001366:	f7ff f993 	bl	8000690 <vPortExitCritical>

    return xAlreadyYielded;
 800136a:	693b      	ldr	r3, [r7, #16]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20002954 	.word	0x20002954
 8001378:	2000292c 	.word	0x2000292c
 800137c:	200028ec 	.word	0x200028ec
 8001380:	20002934 	.word	0x20002934
 8001384:	20002844 	.word	0x20002844
 8001388:	20002840 	.word	0x20002840
 800138c:	20002940 	.word	0x20002940
 8001390:	2000293c 	.word	0x2000293c
 8001394:	e000ed04 	.word	0xe000ed04

08001398 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80013a2:	4b75      	ldr	r3, [pc, #468]	; (8001578 <xTaskIncrementTick+0x1e0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f040 80dc 	bne.w	8001564 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80013ac:	4b73      	ldr	r3, [pc, #460]	; (800157c <xTaskIncrementTick+0x1e4>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80013b4:	4a71      	ldr	r2, [pc, #452]	; (800157c <xTaskIncrementTick+0x1e4>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d110      	bne.n	80013e2 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 80013c0:	4b6f      	ldr	r3, [pc, #444]	; (8001580 <xTaskIncrementTick+0x1e8>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	4b6f      	ldr	r3, [pc, #444]	; (8001584 <xTaskIncrementTick+0x1ec>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a6d      	ldr	r2, [pc, #436]	; (8001580 <xTaskIncrementTick+0x1e8>)
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	4a6d      	ldr	r2, [pc, #436]	; (8001584 <xTaskIncrementTick+0x1ec>)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	4b6c      	ldr	r3, [pc, #432]	; (8001588 <xTaskIncrementTick+0x1f0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	3301      	adds	r3, #1
 80013da:	4a6b      	ldr	r2, [pc, #428]	; (8001588 <xTaskIncrementTick+0x1f0>)
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	f000 fb07 	bl	80019f0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80013e2:	4b6a      	ldr	r3, [pc, #424]	; (800158c <xTaskIncrementTick+0x1f4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	f0c0 80a6 	bcc.w	800153a <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80013ee:	4b64      	ldr	r3, [pc, #400]	; (8001580 <xTaskIncrementTick+0x1e8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d104      	bne.n	8001402 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80013f8:	4b64      	ldr	r3, [pc, #400]	; (800158c <xTaskIncrementTick+0x1f4>)
 80013fa:	f04f 32ff 	mov.w	r2, #4294967295
 80013fe:	601a      	str	r2, [r3, #0]
                    break;
 8001400:	e09b      	b.n	800153a <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001402:	4b5f      	ldr	r3, [pc, #380]	; (8001580 <xTaskIncrementTick+0x1e8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	429a      	cmp	r2, r3
 8001418:	d203      	bcs.n	8001422 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800141a:	4a5c      	ldr	r2, [pc, #368]	; (800158c <xTaskIncrementTick+0x1f4>)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001420:	e08b      	b.n	800153a <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	68d2      	ldr	r2, [r2, #12]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	6892      	ldr	r2, [r2, #8]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	3304      	adds	r3, #4
 8001444:	429a      	cmp	r2, r3
 8001446:	d103      	bne.n	8001450 <xTaskIncrementTick+0xb8>
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	68da      	ldr	r2, [r3, #12]
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	2200      	movs	r2, #0
 8001454:	615a      	str	r2, [r3, #20]
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	1e5a      	subs	r2, r3, #1
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001464:	2b00      	cmp	r3, #0
 8001466:	d01e      	beq.n	80014a6 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	6a12      	ldr	r2, [r2, #32]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	69d2      	ldr	r2, [r2, #28]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	3318      	adds	r3, #24
 800148a:	429a      	cmp	r2, r3
 800148c:	d103      	bne.n	8001496 <xTaskIncrementTick+0xfe>
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	6a1a      	ldr	r2, [r3, #32]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	2200      	movs	r2, #0
 800149a:	629a      	str	r2, [r3, #40]	; 0x28
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	1e5a      	subs	r2, r3, #1
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014aa:	2201      	movs	r2, #1
 80014ac:	409a      	lsls	r2, r3
 80014ae:	4b38      	ldr	r3, [pc, #224]	; (8001590 <xTaskIncrementTick+0x1f8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	4a36      	ldr	r2, [pc, #216]	; (8001590 <xTaskIncrementTick+0x1f8>)
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014bc:	4935      	ldr	r1, [pc, #212]	; (8001594 <xTaskIncrementTick+0x1fc>)
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	440b      	add	r3, r1
 80014c8:	3304      	adds	r3, #4
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	603b      	str	r3, [r7, #0]
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	3204      	adds	r2, #4
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1d1a      	adds	r2, r3, #4
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4a26      	ldr	r2, [pc, #152]	; (8001594 <xTaskIncrementTick+0x1fc>)
 80014fc:	441a      	add	r2, r3
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	615a      	str	r2, [r3, #20]
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001506:	4923      	ldr	r1, [pc, #140]	; (8001594 <xTaskIncrementTick+0x1fc>)
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	1c59      	adds	r1, r3, #1
 8001516:	481f      	ldr	r0, [pc, #124]	; (8001594 <xTaskIncrementTick+0x1fc>)
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4403      	add	r3, r0
 8001522:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001528:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <xTaskIncrementTick+0x200>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152e:	429a      	cmp	r2, r3
 8001530:	f4ff af5d 	bcc.w	80013ee <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 8001534:	2301      	movs	r3, #1
 8001536:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001538:	e759      	b.n	80013ee <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800153a:	4b17      	ldr	r3, [pc, #92]	; (8001598 <xTaskIncrementTick+0x200>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001540:	4914      	ldr	r1, [pc, #80]	; (8001594 <xTaskIncrementTick+0x1fc>)
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	440b      	add	r3, r1
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d901      	bls.n	8001556 <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 8001552:	2301      	movs	r3, #1
 8001554:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <xTaskIncrementTick+0x204>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d007      	beq.n	800156e <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 800155e:	2301      	movs	r3, #1
 8001560:	61fb      	str	r3, [r7, #28]
 8001562:	e004      	b.n	800156e <xTaskIncrementTick+0x1d6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <xTaskIncrementTick+0x208>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	3301      	adds	r3, #1
 800156a:	4a0d      	ldr	r2, [pc, #52]	; (80015a0 <xTaskIncrementTick+0x208>)
 800156c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800156e:	69fb      	ldr	r3, [r7, #28]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3720      	adds	r7, #32
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20002954 	.word	0x20002954
 800157c:	20002930 	.word	0x20002930
 8001580:	200028e4 	.word	0x200028e4
 8001584:	200028e8 	.word	0x200028e8
 8001588:	20002944 	.word	0x20002944
 800158c:	2000294c 	.word	0x2000294c
 8001590:	20002934 	.word	0x20002934
 8001594:	20002844 	.word	0x20002844
 8001598:	20002840 	.word	0x20002840
 800159c:	20002940 	.word	0x20002940
 80015a0:	2000293c 	.word	0x2000293c

080015a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80015aa:	4b1c      	ldr	r3, [pc, #112]	; (800161c <vTaskSwitchContext+0x78>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80015b2:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <vTaskSwitchContext+0x7c>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80015b8:	e02a      	b.n	8001610 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 80015ba:	4b19      	ldr	r3, [pc, #100]	; (8001620 <vTaskSwitchContext+0x7c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015c0:	4b18      	ldr	r3, [pc, #96]	; (8001624 <vTaskSwitchContext+0x80>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	fab3 f383 	clz	r3, r3
 80015cc:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 80015ce:	78fb      	ldrb	r3, [r7, #3]
 80015d0:	f1c3 031f 	rsb	r3, r3, #31
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	4613      	mov	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4a11      	ldr	r2, [pc, #68]	; (8001628 <vTaskSwitchContext+0x84>)
 80015e2:	4413      	add	r3, r2
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	3308      	adds	r3, #8
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d104      	bne.n	8001606 <vTaskSwitchContext+0x62>
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	4a07      	ldr	r2, [pc, #28]	; (800162c <vTaskSwitchContext+0x88>)
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20002954 	.word	0x20002954
 8001620:	20002940 	.word	0x20002940
 8001624:	20002934 	.word	0x20002934
 8001628:	20002844 	.word	0x20002844
 800162c:	20002840 	.word	0x20002840

08001630 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800163a:	4b07      	ldr	r3, [pc, #28]	; (8001658 <vTaskPlaceOnEventList+0x28>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	3318      	adds	r3, #24
 8001640:	4619      	mov	r1, r3
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7fe fe9f 	bl	8000386 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001648:	2101      	movs	r1, #1
 800164a:	6838      	ldr	r0, [r7, #0]
 800164c:	f000 fa6c 	bl	8001b28 <prvAddCurrentTaskToDelayedList>
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20002840 	.word	0x20002840

0800165c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800165c:	b480      	push	{r7}
 800165e:	b089      	sub	sp, #36	; 0x24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	6a12      	ldr	r2, [r2, #32]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	69d2      	ldr	r2, [r2, #28]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	3318      	adds	r3, #24
 800168e:	429a      	cmp	r2, r3
 8001690:	d103      	bne.n	800169a <xTaskRemoveFromEventList+0x3e>
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	6a1a      	ldr	r2, [r3, #32]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	2200      	movs	r2, #0
 800169e:	629a      	str	r2, [r3, #40]	; 0x28
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	1e5a      	subs	r2, r3, #1
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80016aa:	4b4a      	ldr	r3, [pc, #296]	; (80017d4 <xTaskRemoveFromEventList+0x178>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d15e      	bne.n	8001770 <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	68d2      	ldr	r2, [r2, #12]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	6892      	ldr	r2, [r2, #8]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	3304      	adds	r3, #4
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d103      	bne.n	80016e0 <xTaskRemoveFromEventList+0x84>
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	68da      	ldr	r2, [r3, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	2200      	movs	r2, #0
 80016e4:	615a      	str	r2, [r3, #20]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	1e5a      	subs	r2, r3, #1
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f4:	2201      	movs	r2, #1
 80016f6:	409a      	lsls	r2, r3
 80016f8:	4b37      	ldr	r3, [pc, #220]	; (80017d8 <xTaskRemoveFromEventList+0x17c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	4a36      	ldr	r2, [pc, #216]	; (80017d8 <xTaskRemoveFromEventList+0x17c>)
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001706:	4935      	ldr	r1, [pc, #212]	; (80017dc <xTaskRemoveFromEventList+0x180>)
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	3304      	adds	r3, #4
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	3204      	adds	r2, #4
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	1d1a      	adds	r2, r3, #4
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800173c:	4613      	mov	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4a25      	ldr	r2, [pc, #148]	; (80017dc <xTaskRemoveFromEventList+0x180>)
 8001746:	441a      	add	r2, r3
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	615a      	str	r2, [r3, #20]
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001750:	4922      	ldr	r1, [pc, #136]	; (80017dc <xTaskRemoveFromEventList+0x180>)
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	440b      	add	r3, r1
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	1c59      	adds	r1, r3, #1
 8001760:	481e      	ldr	r0, [pc, #120]	; (80017dc <xTaskRemoveFromEventList+0x180>)
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4403      	add	r3, r0
 800176c:	6019      	str	r1, [r3, #0]
 800176e:	e01b      	b.n	80017a8 <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <xTaskRemoveFromEventList+0x184>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	61da      	str	r2, [r3, #28]
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	621a      	str	r2, [r3, #32]
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	3218      	adds	r2, #24
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	f103 0218 	add.w	r2, r3, #24
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	4a11      	ldr	r2, [pc, #68]	; (80017e0 <xTaskRemoveFromEventList+0x184>)
 800179c:	629a      	str	r2, [r3, #40]	; 0x28
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <xTaskRemoveFromEventList+0x184>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	3301      	adds	r3, #1
 80017a4:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <xTaskRemoveFromEventList+0x184>)
 80017a6:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ac:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <xTaskRemoveFromEventList+0x188>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d905      	bls.n	80017c2 <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80017b6:	2301      	movs	r3, #1
 80017b8:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <xTaskRemoveFromEventList+0x18c>)
 80017bc:	2201      	movs	r2, #1
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	e001      	b.n	80017c6 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 80017c6:	69fb      	ldr	r3, [r7, #28]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3724      	adds	r7, #36	; 0x24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	20002954 	.word	0x20002954
 80017d8:	20002934 	.word	0x20002934
 80017dc:	20002844 	.word	0x20002844
 80017e0:	200028ec 	.word	0x200028ec
 80017e4:	20002840 	.word	0x20002840
 80017e8:	20002940 	.word	0x20002940

080017ec <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <vTaskInternalSetTimeOutState+0x24>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <vTaskInternalSetTimeOutState+0x28>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	605a      	str	r2, [r3, #4]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20002944 	.word	0x20002944
 8001814:	20002930 	.word	0x20002930

08001818 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 8001822:	f7fe ff1b 	bl	800065c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001826:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <xTaskCheckForTimeOut+0x8c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800183e:	d102      	bne.n	8001846 <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	e026      	b.n	8001894 <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <xTaskCheckForTimeOut+0x90>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d00a      	beq.n	8001868 <xTaskCheckForTimeOut+0x50>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	429a      	cmp	r2, r3
 800185a:	d305      	bcc.n	8001868 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800185c:	2301      	movs	r3, #1
 800185e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	e015      	b.n	8001894 <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	429a      	cmp	r2, r3
 8001870:	d20b      	bcs.n	800188a <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1ad2      	subs	r2, r2, r3
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff ffb4 	bl	80017ec <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	e004      	b.n	8001894 <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001890:	2301      	movs	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8001894:	f7fe fefc 	bl	8000690 <vPortExitCritical>

    return xReturn;
 8001898:	697b      	ldr	r3, [r7, #20]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20002930 	.word	0x20002930
 80018a8:	20002944 	.word	0x20002944

080018ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <vTaskMissedYield+0x14>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	601a      	str	r2, [r3, #0]
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20002940 	.word	0x20002940

080018c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80018cc:	f000 f852 	bl	8001974 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <prvIdleTask+0x28>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d9f9      	bls.n	80018cc <prvIdleTask+0x8>
                {
                    taskYIELD();
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <prvIdleTask+0x2c>)
 80018da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	f3bf 8f4f 	dsb	sy
 80018e4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80018e8:	e7f0      	b.n	80018cc <prvIdleTask+0x8>
 80018ea:	bf00      	nop
 80018ec:	20002844 	.word	0x20002844
 80018f0:	e000ed04 	.word	0xe000ed04

080018f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	e00c      	b.n	800191a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4a12      	ldr	r2, [pc, #72]	; (8001954 <prvInitialiseTaskLists+0x60>)
 800190c:	4413      	add	r3, r2
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fd0e 	bl	8000330 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3301      	adds	r3, #1
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b05      	cmp	r3, #5
 800191e:	d9ef      	bls.n	8001900 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001920:	480d      	ldr	r0, [pc, #52]	; (8001958 <prvInitialiseTaskLists+0x64>)
 8001922:	f7fe fd05 	bl	8000330 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001926:	480d      	ldr	r0, [pc, #52]	; (800195c <prvInitialiseTaskLists+0x68>)
 8001928:	f7fe fd02 	bl	8000330 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800192c:	480c      	ldr	r0, [pc, #48]	; (8001960 <prvInitialiseTaskLists+0x6c>)
 800192e:	f7fe fcff 	bl	8000330 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001932:	480c      	ldr	r0, [pc, #48]	; (8001964 <prvInitialiseTaskLists+0x70>)
 8001934:	f7fe fcfc 	bl	8000330 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001938:	480b      	ldr	r0, [pc, #44]	; (8001968 <prvInitialiseTaskLists+0x74>)
 800193a:	f7fe fcf9 	bl	8000330 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <prvInitialiseTaskLists+0x78>)
 8001940:	4a05      	ldr	r2, [pc, #20]	; (8001958 <prvInitialiseTaskLists+0x64>)
 8001942:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001944:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <prvInitialiseTaskLists+0x7c>)
 8001946:	4a05      	ldr	r2, [pc, #20]	; (800195c <prvInitialiseTaskLists+0x68>)
 8001948:	601a      	str	r2, [r3, #0]
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20002844 	.word	0x20002844
 8001958:	200028bc 	.word	0x200028bc
 800195c:	200028d0 	.word	0x200028d0
 8001960:	200028ec 	.word	0x200028ec
 8001964:	20002900 	.word	0x20002900
 8001968:	20002918 	.word	0x20002918
 800196c:	200028e4 	.word	0x200028e4
 8001970:	200028e8 	.word	0x200028e8

08001974 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800197a:	e019      	b.n	80019b0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800197c:	f7fe fe6e 	bl	800065c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001980:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <prvCheckTasksWaitingTermination+0x50>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3304      	adds	r3, #4
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fd32 	bl	80003f6 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001992:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <prvCheckTasksWaitingTermination+0x54>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	3b01      	subs	r3, #1
 8001998:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <prvCheckTasksWaitingTermination+0x54>)
 800199a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <prvCheckTasksWaitingTermination+0x58>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	3b01      	subs	r3, #1
 80019a2:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <prvCheckTasksWaitingTermination+0x58>)
 80019a4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80019a6:	f7fe fe73 	bl	8000690 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f810 	bl	80019d0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <prvCheckTasksWaitingTermination+0x58>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1e1      	bne.n	800197c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20002900 	.word	0x20002900
 80019c8:	2000292c 	.word	0x2000292c
 80019cc:	20002914 	.word	0x20002914

080019d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fc45 	bl	800026c <vPortFree>
                vPortFree( pxTCB );
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7fe fc42 	bl	800026c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <prvResetNextTaskUnblockTime+0x2c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d104      	bne.n	8001a08 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80019fe:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <prvResetNextTaskUnblockTime+0x30>)
 8001a00:	f04f 32ff 	mov.w	r2, #4294967295
 8001a04:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001a06:	e005      	b.n	8001a14 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <prvResetNextTaskUnblockTime+0x2c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a03      	ldr	r2, [pc, #12]	; (8001a20 <prvResetNextTaskUnblockTime+0x30>)
 8001a12:	6013      	str	r3, [r2, #0]
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	200028e4 	.word	0x200028e4
 8001a20:	2000294c 	.word	0x2000294c

08001a24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d06c      	beq.n	8001b14 <xTaskPriorityDisinherit+0xf0>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a3e:	1e5a      	subs	r2, r3, #1
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d061      	beq.n	8001b14 <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d15d      	bne.n	8001b14 <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fcca 	bl	80003f6 <uxListRemove>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d10a      	bne.n	8001a7e <xTaskPriorityDisinherit+0x5a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43da      	mvns	r2, r3
 8001a74:	4b2a      	ldr	r3, [pc, #168]	; (8001b20 <xTaskPriorityDisinherit+0xfc>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	4a29      	ldr	r2, [pc, #164]	; (8001b20 <xTaskPriorityDisinherit+0xfc>)
 8001a7c:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	f1c3 0206 	rsb	r2, r3, #6
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a96:	2201      	movs	r2, #1
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <xTaskPriorityDisinherit+0xfc>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	4a1f      	ldr	r2, [pc, #124]	; (8001b20 <xTaskPriorityDisinherit+0xfc>)
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aa8:	491e      	ldr	r1, [pc, #120]	; (8001b24 <xTaskPriorityDisinherit+0x100>)
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	60da      	str	r2, [r3, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	3204      	adds	r2, #4
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1d1a      	adds	r2, r3, #4
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4a0f      	ldr	r2, [pc, #60]	; (8001b24 <xTaskPriorityDisinherit+0x100>)
 8001ae8:	441a      	add	r2, r3
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	615a      	str	r2, [r3, #20]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001af2:	490c      	ldr	r1, [pc, #48]	; (8001b24 <xTaskPriorityDisinherit+0x100>)
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	1c59      	adds	r1, r3, #1
 8001b02:	4808      	ldr	r0, [pc, #32]	; (8001b24 <xTaskPriorityDisinherit+0x100>)
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4403      	add	r3, r0
 8001b0e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001b10:	2301      	movs	r3, #1
 8001b12:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001b14:	697b      	ldr	r3, [r7, #20]
    }
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20002934 	.word	0x20002934
 8001b24:	20002844 	.word	0x20002844

08001b28 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001b32:	4b36      	ldr	r3, [pc, #216]	; (8001c0c <prvAddCurrentTaskToDelayedList+0xe4>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b38:	4b35      	ldr	r3, [pc, #212]	; (8001c10 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fc59 	bl	80003f6 <uxListRemove>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10b      	bne.n	8001b62 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001b4a:	4b31      	ldr	r3, [pc, #196]	; (8001c10 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b50:	2201      	movs	r2, #1
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43da      	mvns	r2, r3
 8001b58:	4b2e      	ldr	r3, [pc, #184]	; (8001c14 <prvAddCurrentTaskToDelayedList+0xec>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	4a2d      	ldr	r2, [pc, #180]	; (8001c14 <prvAddCurrentTaskToDelayedList+0xec>)
 8001b60:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b68:	d124      	bne.n	8001bb4 <prvAddCurrentTaskToDelayedList+0x8c>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d021      	beq.n	8001bb4 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b70:	4b29      	ldr	r3, [pc, #164]	; (8001c18 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	4b26      	ldr	r3, [pc, #152]	; (8001c10 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	6892      	ldr	r2, [r2, #8]
 8001b86:	60da      	str	r2, [r3, #12]
 8001b88:	4b21      	ldr	r3, [pc, #132]	; (8001c10 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	3204      	adds	r2, #4
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	1d1a      	adds	r2, r3, #4
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a1d      	ldr	r2, [pc, #116]	; (8001c18 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001ba4:	615a      	str	r2, [r3, #20]
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	3301      	adds	r3, #1
 8001bac:	4a1a      	ldr	r2, [pc, #104]	; (8001c18 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001bb2:	e026      	b.n	8001c02 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4413      	add	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001bbc:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d209      	bcs.n	8001be0 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001bcc:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <prvAddCurrentTaskToDelayedList+0xf4>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4610      	mov	r0, r2
 8001bda:	f7fe fbd4 	bl	8000386 <vListInsert>
}
 8001bde:	e010      	b.n	8001c02 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001be0:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	3304      	adds	r3, #4
 8001bea:	4619      	mov	r1, r3
 8001bec:	4610      	mov	r0, r2
 8001bee:	f7fe fbca 	bl	8000386 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d202      	bcs.n	8001c02 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8001bfc:	4a09      	ldr	r2, [pc, #36]	; (8001c24 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6013      	str	r3, [r2, #0]
}
 8001c02:	bf00      	nop
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20002930 	.word	0x20002930
 8001c10:	20002840 	.word	0x20002840
 8001c14:	20002934 	.word	0x20002934
 8001c18:	20002918 	.word	0x20002918
 8001c1c:	200028e8 	.word	0x200028e8
 8001c20:	200028e4 	.word	0x200028e4
 8001c24:	2000294c 	.word	0x2000294c

08001c28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c28:	480c      	ldr	r0, [pc, #48]	; (8001c5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c2a:	490d      	ldr	r1, [pc, #52]	; (8001c60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c2c:	4a0d      	ldr	r2, [pc, #52]	; (8001c64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c30:	e002      	b.n	8001c38 <LoopCopyDataInit>

08001c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c36:	3304      	adds	r3, #4

08001c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c3c:	d3f9      	bcc.n	8001c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c40:	4c0a      	ldr	r4, [pc, #40]	; (8001c6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c44:	e001      	b.n	8001c4a <LoopFillZerobss>

08001c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c48:	3204      	adds	r2, #4

08001c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c4c:	d3fb      	bcc.n	8001c46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c4e:	f7ff f8e6 	bl	8000e1e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c52:	f000 f80f 	bl	8001c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c56:	f7fe fc37 	bl	80004c8 <main>
  bx lr
 8001c5a:	4770      	bx	lr
  ldr r0, =_sdata
 8001c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c64:	08001d20 	.word	0x08001d20
  ldr r2, =_sbss
 8001c68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c6c:	20002958 	.word	0x20002958

08001c70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c70:	e7fe      	b.n	8001c70 <ADC1_2_IRQHandler>
	...

08001c74 <__libc_init_array>:
 8001c74:	b570      	push	{r4, r5, r6, lr}
 8001c76:	2600      	movs	r6, #0
 8001c78:	4d0c      	ldr	r5, [pc, #48]	; (8001cac <__libc_init_array+0x38>)
 8001c7a:	4c0d      	ldr	r4, [pc, #52]	; (8001cb0 <__libc_init_array+0x3c>)
 8001c7c:	1b64      	subs	r4, r4, r5
 8001c7e:	10a4      	asrs	r4, r4, #2
 8001c80:	42a6      	cmp	r6, r4
 8001c82:	d109      	bne.n	8001c98 <__libc_init_array+0x24>
 8001c84:	f000 f830 	bl	8001ce8 <_init>
 8001c88:	2600      	movs	r6, #0
 8001c8a:	4d0a      	ldr	r5, [pc, #40]	; (8001cb4 <__libc_init_array+0x40>)
 8001c8c:	4c0a      	ldr	r4, [pc, #40]	; (8001cb8 <__libc_init_array+0x44>)
 8001c8e:	1b64      	subs	r4, r4, r5
 8001c90:	10a4      	asrs	r4, r4, #2
 8001c92:	42a6      	cmp	r6, r4
 8001c94:	d105      	bne.n	8001ca2 <__libc_init_array+0x2e>
 8001c96:	bd70      	pop	{r4, r5, r6, pc}
 8001c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c9c:	4798      	blx	r3
 8001c9e:	3601      	adds	r6, #1
 8001ca0:	e7ee      	b.n	8001c80 <__libc_init_array+0xc>
 8001ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ca6:	4798      	blx	r3
 8001ca8:	3601      	adds	r6, #1
 8001caa:	e7f2      	b.n	8001c92 <__libc_init_array+0x1e>
 8001cac:	08001d18 	.word	0x08001d18
 8001cb0:	08001d18 	.word	0x08001d18
 8001cb4:	08001d18 	.word	0x08001d18
 8001cb8:	08001d1c 	.word	0x08001d1c

08001cbc <memcpy>:
 8001cbc:	440a      	add	r2, r1
 8001cbe:	4291      	cmp	r1, r2
 8001cc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8001cc4:	d100      	bne.n	8001cc8 <memcpy+0xc>
 8001cc6:	4770      	bx	lr
 8001cc8:	b510      	push	{r4, lr}
 8001cca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001cce:	4291      	cmp	r1, r2
 8001cd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001cd4:	d1f9      	bne.n	8001cca <memcpy+0xe>
 8001cd6:	bd10      	pop	{r4, pc}

08001cd8 <memset>:
 8001cd8:	4603      	mov	r3, r0
 8001cda:	4402      	add	r2, r0
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d100      	bne.n	8001ce2 <memset+0xa>
 8001ce0:	4770      	bx	lr
 8001ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8001ce6:	e7f9      	b.n	8001cdc <memset+0x4>

08001ce8 <_init>:
 8001ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cea:	bf00      	nop
 8001cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cee:	bc08      	pop	{r3}
 8001cf0:	469e      	mov	lr, r3
 8001cf2:	4770      	bx	lr

08001cf4 <_fini>:
 8001cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cf6:	bf00      	nop
 8001cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cfa:	bc08      	pop	{r3}
 8001cfc:	469e      	mov	lr, r3
 8001cfe:	4770      	bx	lr
